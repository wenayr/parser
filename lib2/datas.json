{
  "api": [
    {
      "description": "Fetch system status.",
      "securityType": "System",
      "request": "GET /sapi/v1/system/status",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/system/status",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "status": "0|1", // 0: normal,1:system maintenance
              "msg": "\"normal\"|\"system_maintenance\"" // "normal", "system_maintenance"
            }
          ],
          "responseExamples": [
            {
              "status": 0, // 0: normal,1:system maintenance
              "msg": "normal" // "normal", "system_maintenance"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.system-status-system",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#system-status-system",
      "name": "System Status (System)"
    },
    {
      "description": "Get information of coins (available for deposit and withdraw) for user.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/capital/config/getall",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/capital/config/getall",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "coin": "string",
                "depositAllEnable": "boolean",
                "free": "NumberString",
                "freeze": "NumberString",
                "ipoable": "NumberString",
                "ipoing": "NumberString",
                "isLegalMoney": "boolean",
                "locked": "NumberString",
                "name": "string",
                "networkList": [
                  {
                    "addressRegex": "string",
                    "coin": "string",
                    "depositDesc": "string", // shown only when "depositEnable" is false.
                    "depositEnable": "boolean",
                    "isDefault": "boolean",
                    "memoRegex": "string",
                    "minConfirm": "number", // min number for balance confirmation
                    "name": "string",
                    "network": "string",
                    "specialTips": "string",
                    "unLockConfirm": "number", // confirmation number for balance unlock
                    "withdrawDesc": "string", // shown only when "withdrawEnable" is false.
                    "withdrawEnable": "boolean",
                    "withdrawFee": "NumberString",
                    "withdrawIntegerMultiple": "NumberString",
                    "withdrawMax": "NumberString",
                    "withdrawMin": "NumberString",
                    "sameAddress": "boolean", // If the coin needs to provide memo to withdraw
                    "estimatedArrivalTime": "number",
                    "busy": "boolean",
                    "contractAddressUrl": "string",
                    "contractAddress": "NumberString"
                  },
                  {
                    "addressRegex": "string",
                    "coin": "string",
                    "depositEnable": "boolean",
                    "isDefault": "boolean",
                    "memoRegex": "string",
                    "minConfirm": "number",
                    "name": "string",
                    "network": "string",
                    "specialTips": "string",
                    "unLockConfirm": "number",
                    "withdrawEnable": "boolean",
                    "withdrawFee": "NumberString",
                    "withdrawIntegerMultiple": "NumberString",
                    "withdrawMax": "NumberString",
                    "withdrawMin": "NumberString",
                    "sameAddress": "boolean",
                    "estimatedArrivalTime": "number",
                    "busy": "boolean",
                    "contractAddressUrl": "string",
                    "contractAddress": "string"
                  }
                ],
                "storage": "NumberString",
                "trading": "boolean",
                "withdrawAllEnable": "boolean",
                "withdrawing": "NumberString"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "coin": "BTC",
                "depositAllEnable": true,
                "free": "0.08074558",
                "freeze": "0.00000000",
                "ipoable": "0.00000000",
                "ipoing": "0.00000000",
                "isLegalMoney": false,
                "locked": "0.00000000",
                "name": "Bitcoin",
                "networkList": [
                  {
                    "addressRegex": "^(bnb1)[0-9a-z]{38}$",
                    "coin": "BTC",
                    "depositDesc": "Wallet Maintenance, Deposit Suspended", // shown only when "depositEnable" is false.
                    "depositEnable": false,
                    "isDefault": false,
                    "memoRegex": "^[0-9A-Za-z\\-_]{1,120}$",
                    "minConfirm": 1, // min number for balance confirmation
                    "name": "BEP2",
                    "network": "BNB",
                    "specialTips": "Both a MEMO and an Address are required to successfully deposit your BEP2-BTCB tokens to Binance.",
                    "unLockConfirm": 0, // confirmation number for balance unlock
                    "withdrawDesc": "Wallet Maintenance, Withdrawal Suspended", // shown only when "withdrawEnable" is false.
                    "withdrawEnable": false,
                    "withdrawFee": "0.00000220",
                    "withdrawIntegerMultiple": "0.00000001",
                    "withdrawMax": "9999999999.99999999",
                    "withdrawMin": "0.00000440",
                    "sameAddress": true, // If the coin needs to provide memo to withdraw
                    "estimatedArrivalTime": 25,
                    "busy": false,
                    "contractAddressUrl": "https://bscscan.com/token/",
                    "contractAddress": "0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c"
                  },
                  {
                    "addressRegex": "^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$|^(bc1)[0-9A-Za-z]{39,59}$",
                    "coin": "BTC",
                    "depositEnable": true,
                    "isDefault": true,
                    "memoRegex": "",
                    "minConfirm": 1,
                    "name": "BTC",
                    "network": "BTC",
                    "specialTips": "",
                    "unLockConfirm": 2,
                    "withdrawEnable": true,
                    "withdrawFee": "0.00050000",
                    "withdrawIntegerMultiple": "0.00000001",
                    "withdrawMax": "750",
                    "withdrawMin": "0.00100000",
                    "sameAddress": false,
                    "estimatedArrivalTime": 25,
                    "busy": false,
                    "contractAddressUrl": "",
                    "contractAddress": ""
                  }
                ],
                "storage": "0.00000000",
                "trading": true,
                "withdrawAllEnable": true,
                "withdrawing": "0.00000000"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.all-coins-39-information-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#all-coins-39-information-user_data",
      "name": "All Coins' Information (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/accountSnapshot",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/accountSnapshot",
      "hmacSHA256": false,
      "weights": {
        "IP": 2400,
        "IP_text": "2400"
      },
      "baseParams": {
        "type": {
          "name": "type",
          "type": "\"SPOT\"|\"MARGIN\"|\"FUTURES\"",
          "required": true,
          "description": "\"SPOT\", \"MARGIN\", \"FUTURES\""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "min 7, max 30, default 7"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "type": {
              "name": "type",
              "type": "\"SPOT\"|\"MARGIN\"|\"FUTURES\"",
              "required": true,
              "description": "\"SPOT\", \"MARGIN\", \"FUTURES\""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "min 7, max 30, default 7"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "",
            "",
            ""
          ],
          "responseTypes": [
            {
              "code": "number", // 200 for success; others are error codes
              "msg": "string", // error message
              "snapshotVos": [
                {
                  "data": {
                    "balances": [
                      {
                        "asset": "string",
                        "free": "NumberString",
                        "locked": "NumberString"
                      },
                      null
                    ],
                    "totalAssetOfBtc": "NumberString"
                  },
                  "type": "string",
                  "updateTime": "number"
                }
              ]
            },
            {
              "code": "number", // 200 for success; others are error codes
              "msg": "string", // error message
              "snapshotVos": [
                {
                  "data": {
                    "marginLevel": "NumberString",
                    "totalAssetOfBtc": "NumberString",
                    "totalLiabilityOfBtc": "NumberString",
                    "totalNetAssetOfBtc": "NumberString",
                    "userAssets": [
                      {
                        "asset": "string",
                        "borrowed": "NumberString",
                        "free": "NumberString",
                        "interest": "NumberString",
                        "locked": "NumberString",
                        "netAsset": "NumberString"
                      }
                    ]
                  },
                  "type": "string",
                  "updateTime": "number"
                }
              ]
            },
            {
              "code": "number", // 200 for success; others are error codes
              "msg": "string", // error message
              "snapshotVos": [
                {
                  "data": {
                    "assets": [
                      {
                        "asset": "string",
                        "marginBalance": "NumberString", // Not real-time data, can ignore
                        "walletBalance": "NumberString"
                      }
                    ],
                    "position": [
                      {
                        "entryPrice": "NumberString",
                        "markPrice": "NumberString",
                        "positionAmt": "NumberString",
                        "symbol": "string",
                        "unRealizedProfit": "NumberString" // Only show the value at the time of opening the position
                      }
                    ]
                  },
                  "type": "string",
                  "updateTime": "number"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "code": 200, // 200 for success; others are error codes
              "msg": "", // error message
              "snapshotVos": [
                {
                  "data": {
                    "balances": [
                      {
                        "asset": "BTC",
                        "free": "0.09905021",
                        "locked": "0.00000000"
                      },
                      {
                        "asset": "USDT",
                        "free": "1.89109409",
                        "locked": "0.00000000"
                      }
                    ],
                    "totalAssetOfBtc": "0.09942700"
                  },
                  "type": "spot",
                  "updateTime": 1576281599000
                }
              ]
            },
            {
              "code": 200, // 200 for success; others are error codes
              "msg": "", // error message
              "snapshotVos": [
                {
                  "data": {
                    "marginLevel": "2748.02909813",
                    "totalAssetOfBtc": "0.00274803",
                    "totalLiabilityOfBtc": "0.00000100",
                    "totalNetAssetOfBtc": "0.00274750",
                    "userAssets": [
                      {
                        "asset": "XRP",
                        "borrowed": "0.00000000",
                        "free": "1.00000000",
                        "interest": "0.00000000",
                        "locked": "0.00000000",
                        "netAsset": "1.00000000"
                      }
                    ]
                  },
                  "type": "margin",
                  "updateTime": 1576281599000
                }
              ]
            },
            {
              "code": 200, // 200 for success; others are error codes
              "msg": "", // error message
              "snapshotVos": [
                {
                  "data": {
                    "assets": [
                      {
                        "asset": "USDT",
                        "marginBalance": "118.99782335", // Not real-time data, can ignore
                        "walletBalance": "120.23811389"
                      }
                    ],
                    "position": [
                      {
                        "entryPrice": "7130.41000000",
                        "markPrice": "7257.66239673",
                        "positionAmt": "0.01000000",
                        "symbol": "BTCUSDT",
                        "unRealizedProfit": "1.24029054" // Only show the value at the time of opening the position
                      }
                    ]
                  },
                  "type": "futures",
                  "updateTime": 1576281599000
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.daily-account-snapshot-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#daily-account-snapshot-user_data",
      "name": "Daily Account Snapshot (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/account/disableFastWithdrawSwitch",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/account/disableFastWithdrawSwitch",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.disable-fast-withdraw-switch-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#disable-fast-withdraw-switch-user_data",
      "name": "Disable Fast Withdraw Switch (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/account/enableFastWithdrawSwitch",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/account/enableFastWithdrawSwitch",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.enable-fast-withdraw-switch-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#enable-fast-withdraw-switch-user_data",
      "name": "Enable Fast Withdraw Switch (USER_DATA)"
    },
    {
      "description": "Submit a withdraw request.",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/capital/withdraw/apply",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/capital/withdraw/apply",
      "hmacSHA256": false,
      "weights": {
        "UID": 600,
        "UID_text": "600"
      },
      "baseParams": {
        "coin": {
          "name": "coin",
          "type": "string",
          "required": true,
          "description": ""
        },
        "withdrawOrderId": {
          "name": "withdrawOrderId",
          "type": "string",
          "required": false,
          "description": "client id for withdraw"
        },
        "network": {
          "name": "network",
          "type": "string",
          "required": false,
          "description": ""
        },
        "address": {
          "name": "address",
          "type": "string",
          "required": true,
          "description": ""
        },
        "addressTag": {
          "name": "addressTag",
          "type": "string",
          "required": false,
          "description": "Secondary address identifier for coins like XRP,XMR etc."
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "transactionFeeFlag": {
          "name": "transactionFeeFlag",
          "type": "boolean",
          "required": false,
          "description": "When making internal transfer, true for returning the fee to the destination account; false for returning the fee back to the departure account. Default false."
        },
        "name": {
          "name": "name",
          "type": "string",
          "required": false,
          "description": "Description of the address. The upper limit of the address book is 200. Exceeding the limit will cause withdrawal failure. Space in name should be encoded into %20."
        },
        "walletType": {
          "name": "walletType",
          "type": "INTEGER",
          "required": false,
          "description": "The wallet type for withdraw，0-spot wallet ，1-funding wallet. Default walletType is the current \"selected wallet\" under wallet->Fiat and Spot/Funding->Deposit"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "coin": {
              "name": "coin",
              "type": "string",
              "required": true,
              "description": ""
            },
            "withdrawOrderId": {
              "name": "withdrawOrderId",
              "type": "string",
              "required": false,
              "description": "client id for withdraw"
            },
            "network": {
              "name": "network",
              "type": "string",
              "required": false,
              "description": ""
            },
            "address": {
              "name": "address",
              "type": "string",
              "required": true,
              "description": ""
            },
            "addressTag": {
              "name": "addressTag",
              "type": "string",
              "required": false,
              "description": "Secondary address identifier for coins like XRP,XMR etc."
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "transactionFeeFlag": {
              "name": "transactionFeeFlag",
              "type": "boolean",
              "required": false,
              "description": "When making internal transfer, true for returning the fee to the destination account; false for returning the fee back to the departure account. Default false."
            },
            "name": {
              "name": "name",
              "type": "string",
              "required": false,
              "description": "Description of the address. The upper limit of the address book is 200. Exceeding the limit will cause withdrawal failure. Space in name should be encoded into %20."
            },
            "walletType": {
              "name": "walletType",
              "type": "INTEGER",
              "required": false,
              "description": "The wallet type for withdraw，0-spot wallet ，1-funding wallet. Default walletType is the current \"selected wallet\" under wallet->Fiat and Spot/Funding->Deposit"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "id": "string"
            }
          ],
          "responseExamples": [
            {
              "id": "7213fea8e94b4a5593d507237e5a555b"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.withdraw-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#withdraw-user_data",
      "name": "Withdraw(USER_DATA)"
    },
    {
      "description": "Fetch deposit history.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/capital/deposit/hisrec",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/capital/deposit/hisrec",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "includeSource": {
          "name": "includeSource",
          "type": "boolean",
          "required": false,
          "description": "default false, if true source address for the transaction will be returned"
        },
        "coin": {
          "name": "coin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "status": {
          "name": "status",
          "type": "INT",
          "required": false,
          "description": "0(0:pending,6: credited but cannot withdraw, 7=Wrong Deposit,8=Waiting User confirm, 1:success)"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Default: 90 days from current timestamp"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Default: present timestamp"
        },
        "offset": {
          "name": "offset",
          "type": "INT",
          "required": false,
          "description": "Default:0"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default:1000, Max:1000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "txId": {
          "name": "txId",
          "type": "string",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "includeSource": {
              "name": "includeSource",
              "type": "boolean",
              "required": false,
              "description": "default false, if true source address for the transaction will be returned"
            },
            "coin": {
              "name": "coin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "status": {
              "name": "status",
              "type": "INT",
              "required": false,
              "description": "0(0:pending,6: credited but cannot withdraw, 7=Wrong Deposit,8=Waiting User confirm, 1:success)"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Default: 90 days from current timestamp"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Default: present timestamp"
            },
            "offset": {
              "name": "offset",
              "type": "INT",
              "required": false,
              "description": "Default:0"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default:1000, Max:1000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "txId": {
              "name": "txId",
              "type": "string",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "id": "NumberString",
                "amount": "NumberString",
                "coin": "string",
                "network": "string",
                "status": "number",
                "address": "string",
                "addressTag": "NumberString",
                "txId": "string",
                "insertTime": "number",
                "transferType": "number",
                "confirmTimes": "string",
                "unlockConfirm": "number",
                "walletType": "number"
              },
              {
                "id": "NumberString",
                "amount": "NumberString",
                "coin": "string",
                "network": "string",
                "status": "number",
                "address": "string",
                "addressTag": "string",
                "txId": "string",
                "insertTime": "number",
                "transferType": "number",
                "confirmTimes": "string",
                "unlockConfirm": "number",
                "walletType": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "id": "769800519366885376",
                "amount": "0.001",
                "coin": "BNB",
                "network": "BNB",
                "status": 0,
                "address": "bnb136ns6lfw4zs5hg4n85vdthaad7hq5m4gtkgf23",
                "addressTag": "101764890",
                "txId": "98A3EA560C6B3336D348B6C83F0F95ECE4F1F5919E94BD006E5BF3BF264FACFC",
                "insertTime": 1661493146000,
                "transferType": 0,
                "confirmTimes": "1/1",
                "unlockConfirm": 0,
                "walletType": 0
              },
              {
                "id": "769754833590042625",
                "amount": "0.50000000",
                "coin": "IOTA",
                "network": "IOTA",
                "status": 1,
                "address": "SIZ9VLMHWATXKV99LH99CIGFJFUMLEHGWVZVNNZXRJJVWBPHYWPPBOSDORZ9EQSHCZAMPVAPGFYQAUUV9DROOXJLNW",
                "addressTag": "",
                "txId": "ESBFVQUTPIWQNJSPXFNHNYHSQNTGKRVKPRABQWTAXCDWOAKDKYWPTVG9BGXNVNKTLEJGESAVXIKIZ9999",
                "insertTime": 1599620082000,
                "transferType": 0,
                "confirmTimes": "1/1",
                "unlockConfirm": 0,
                "walletType": 0
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.deposit-history-supporting-network-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#deposit-history-supporting-network-user_data",
      "name": "Deposit History (supporting network) (USER_DATA)"
    },
    {
      "description": "Fetch withdraw history.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/capital/withdraw/history",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/capital/withdraw/history",
      "hmacSHA256": false,
      "weights": {
        "UID": 18000,
        "UID_text": "18000"
      },
      "baseParams": {
        "coin": {
          "name": "coin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "withdrawOrderId": {
          "name": "withdrawOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "status": {
          "name": "status",
          "type": "INT",
          "required": false,
          "description": "0(0:Email Sent,1:Cancelled 2:Awaiting Approval 3:Rejected 4:Processing 5:Failure 6:Completed)"
        },
        "offset": {
          "name": "offset",
          "type": "INT",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default: 1000, Max: 1000"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Default: 90 days from current timestamp"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Default: present timestamp"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "coin": {
              "name": "coin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "withdrawOrderId": {
              "name": "withdrawOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "status": {
              "name": "status",
              "type": "INT",
              "required": false,
              "description": "0(0:Email Sent,1:Cancelled 2:Awaiting Approval 3:Rejected 4:Processing 5:Failure 6:Completed)"
            },
            "offset": {
              "name": "offset",
              "type": "INT",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default: 1000, Max: 1000"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Default: 90 days from current timestamp"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Default: present timestamp"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "id": "string", // Withdrawal id in Binance
                "amount": "NumberString", // withdrawal amount
                "transactionFee": "NumberString", // transaction fee
                "coin": "string",
                "status": "number",
                "address": "NumberString",
                "txId": "NumberString", // withdrawal transaction id
                "applyTime": "string", // UTC time
                "network": "string",
                "transferType": "number", // 1 for internal transfer, 0 for external transfer
                "withdrawOrderId": "string", // // will not be returned if there's no withdrawOrderId for this withdraw.
                "info": "string", // reason for withdrawal failure
                "confirmNo": "number", // confirm times for withdraw
                "walletType": "number", //1: Funding Wallet 0:Spot Wallet
                "txKey": "string",
                "completeTime": "string" // complete UTC time when user's asset is deduct from withdrawing, only if status =  6(success)
              },
              {
                "id": "string",
                "amount": "NumberString",
                "transactionFee": "NumberString",
                "coin": "string",
                "status": "number",
                "address": "string",
                "txId": "string",
                "applyTime": "string",
                "network": "string",
                "transferType": "number",
                "info": "string",
                "confirmNo": "number",
                "walletType": "number",
                "txKey": "string",
                "completeTime": "string"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "id": "b6ae22b3aa844210a7041aee7589627c", // Withdrawal id in Binance
                "amount": "8.91000000", // withdrawal amount
                "transactionFee": "0.004", // transaction fee
                "coin": "USDT",
                "status": 6,
                "address": "0x94df8b352de7f46f64b01d3666bf6e936e44ce60",
                "txId": "0xb5ef8c13b968a406cc62a93a8bd80f9e9a906ef1b3fcf20a2e48573c17659268", // withdrawal transaction id
                "applyTime": "2019-10-12 11:12:02", // UTC time
                "network": "ETH",
                "transferType": 0, // 1 for internal transfer, 0 for external transfer
                "withdrawOrderId": "WITHDRAWtest123", // // will not be returned if there's no withdrawOrderId for this withdraw.
                "info": "The address is not valid. Please confirm with the recipient", // reason for withdrawal failure
                "confirmNo": 3, // confirm times for withdraw
                "walletType": 1, //1: Funding Wallet 0:Spot Wallet
                "txKey": "",
                "completeTime": "2023-03-23 16:52:41" // complete UTC time when user's asset is deduct from withdrawing, only if status =  6(success)
              },
              {
                "id": "156ec387f49b41df8724fa744fa82719",
                "amount": "0.00150000",
                "transactionFee": "0.004",
                "coin": "BTC",
                "status": 6,
                "address": "1FZdVHtiBqMrWdjPyRPULCUceZPJ2WLCsB",
                "txId": "60fd9007ebfddc753455f95fafa808c4302c836e4d1eebc5a132c36c1d8ac354",
                "applyTime": "2019-09-24 12:43:45",
                "network": "BTC",
                "transferType": 0,
                "info": "",
                "confirmNo": 2,
                "walletType": 1,
                "txKey": "",
                "completeTime": "2023-03-23 16:52:41"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.withdraw-history-supporting-network-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#withdraw-history-supporting-network-user_data",
      "name": "Withdraw History (supporting network) (USER_DATA)"
    },
    {
      "description": "Fetch deposit address with network.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/capital/deposit/address",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/capital/deposit/address",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "coin": {
          "name": "coin",
          "type": "string",
          "required": true,
          "description": ""
        },
        "network": {
          "name": "network",
          "type": "string",
          "required": false,
          "description": ""
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "coin": {
              "name": "coin",
              "type": "string",
              "required": true,
              "description": ""
            },
            "network": {
              "name": "network",
              "type": "string",
              "required": false,
              "description": ""
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "address": "string",
              "coin": "string",
              "tag": "string",
              "url": "string"
            }
          ],
          "responseExamples": [
            {
              "address": "1HPn8Rx2y6nNSfagQBKy27GB99Vbzg89wv",
              "coin": "BTC",
              "tag": "",
              "url": "https://btc.com/1HPn8Rx2y6nNSfagQBKy27GB99Vbzg89wv"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.deposit-address-supporting-network-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#deposit-address-supporting-network-user_data",
      "name": "Deposit Address (supporting network) (USER_DATA)"
    },
    {
      "description": "Fetch account status detail.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/account/status",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/account/status",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "data": "string"
            }
          ],
          "responseExamples": [
            {
              "data": "Normal"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.account-status-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#account-status-user_data",
      "name": "Account Status (USER_DATA)"
    },
    {
      "description": "Fetch account api trading status detail.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/account/apiTradingStatus",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/account/apiTradingStatus",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "data": { // API trading status detail
                "isLocked": "boolean", // API trading function is locked or not
                "plannedRecoverTime": "number", // If API trading function is locked, this is the planned recover time
                "triggerCondition": {
                  "GCR": "number", // Number of GTC orders
                  "IFER": "number", // Number of FOK/IOC orders
                  "UFR": "number" // Number of orders
                },
                "updateTime": "number"
              }
            }
          ],
          "responseExamples": [
            {
              "data": { // API trading status detail
                "isLocked": false, // API trading function is locked or not
                "plannedRecoverTime": 0, // If API trading function is locked, this is the planned recover time
                "triggerCondition": {
                  "GCR": 150, // Number of GTC orders
                  "IFER": 150, // Number of FOK/IOC orders
                  "UFR": 300 // Number of orders
                },
                "updateTime": 1547630471725
              }
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.account-api-trading-status-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#account-api-trading-status-user_data",
      "name": "Account API Trading Status (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/asset/dribblet",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/asset/dribblet",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "accountType": {
          "name": "accountType",
          "type": "string",
          "required": false,
          "description": "SPOTor MARGIN,default SPOT"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "accountType": {
              "name": "accountType",
              "type": "string",
              "required": false,
              "description": "SPOTor MARGIN,default SPOT"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number", //Total counts of exchange
              "userAssetDribblets": [
                {
                  "operateTime": "number",
                  "totalTransferedAmount": "NumberString", // Total transfered BNB amount for this exchange.
                  "totalServiceChargeAmount": "NumberString", //Total service charge amount for this exchange.
                  "transId": "number",
                  "userAssetDribbletDetails": [ //Details of  this exchange.
                    {
                      "transId": "number",
                      "serviceChargeAmount": "NumberString",
                      "amount": "NumberString",
                      "operateTime": "number",
                      "transferedAmount": "NumberString",
                      "fromAsset": "string"
                    },
                    null
                  ]
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 8, //Total counts of exchange
              "userAssetDribblets": [
                {
                  "operateTime": 1615985535000,
                  "totalTransferedAmount": "0.00132256", // Total transfered BNB amount for this exchange.
                  "totalServiceChargeAmount": "0.00002699", //Total service charge amount for this exchange.
                  "transId": 45178372831,
                  "userAssetDribbletDetails": [ //Details of  this exchange.
                    {
                      "transId": 4359321,
                      "serviceChargeAmount": "0.000009",
                      "amount": "0.0009",
                      "operateTime": 1615985535000,
                      "transferedAmount": "0.000441",
                      "fromAsset": "USDT"
                    },
                    {
                      "transId": 4359321,
                      "serviceChargeAmount": "0.00001799",
                      "amount": "0.0009",
                      "operateTime": 1615985535000,
                      "transferedAmount": "0.00088156",
                      "fromAsset": "ETH"
                    }
                  ]
                },
                {
                  "operateTime": 1616203180000,
                  "totalTransferedAmount": "0.00058795",
                  "totalServiceChargeAmount": "0.000012",
                  "transId": 4357015,
                  "userAssetDribbletDetails": [
                    {
                      "transId": 4357015,
                      "serviceChargeAmount": "0.00001",
                      "amount": "0.001",
                      "operateTime": 1616203180000,
                      "transferedAmount": "0.00049",
                      "fromAsset": "USDT"
                    },
                    {
                      "transId": 4357015,
                      "serviceChargeAmount": "0.000002",
                      "amount": "0.0001",
                      "operateTime": 1616203180000,
                      "transferedAmount": "0.00009795",
                      "fromAsset": "ETH"
                    }
                  ]
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.dustlog-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#dustlog-user_data",
      "name": "DustLog(USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/asset/dust-btc",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/asset/dust-btc",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "accountType": {
          "name": "accountType",
          "type": "string",
          "required": false,
          "description": "SPOTor MARGIN,default SPOT"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "accountType": {
              "name": "accountType",
              "type": "string",
              "required": false,
              "description": "SPOTor MARGIN,default SPOT"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "details": [
                {
                  "asset": "string",
                  "assetFullName": "string",
                  "amountFree": "NumberString", //Convertible amount
                  "toBTC": "NumberString", //BTC amount
                  "toBNB": "NumberString", //BNB amount（Not deducted commission fee）
                  "toBNBOffExchange": "NumberString", //BNB amount（Deducted commission fee）
                  "exchange": "NumberString" //Commission fee
                }
              ],
              "totalTransferBtc": "NumberString",
              "totalTransferBNB": "NumberString",
              "dribbletPercentage": "NumberString" //Commission fee
            }
          ],
          "responseExamples": [
            {
              "details": [
                {
                  "asset": "ADA",
                  "assetFullName": "ADA",
                  "amountFree": "6.21", //Convertible amount
                  "toBTC": "0.00016848", //BTC amount
                  "toBNB": "0.01777302", //BNB amount（Not deducted commission fee）
                  "toBNBOffExchange": "0.01741756", //BNB amount（Deducted commission fee）
                  "exchange": "0.00035546" //Commission fee
                }
              ],
              "totalTransferBtc": "0.00016848",
              "totalTransferBNB": "0.01777302",
              "dribbletPercentage": "0.02" //Commission fee
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.get-assets-that-can-be-converted-into-bnb-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-assets-that-can-be-converted-into-bnb-user_data",
      "name": "Get Assets That Can Be Converted Into BNB (USER_DATA)"
    },
    {
      "description": "Convert dust assets to BNB.",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/asset/dust",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/asset/dust",
      "hmacSHA256": false,
      "weights": {
        "UID": 10,
        "UID_text": "10"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string[]",
          "required": true,
          "description": "The asset being converted. For example: asset=BTC,USDT"
        },
        "accountType": {
          "name": "accountType",
          "type": "string",
          "required": false,
          "description": "SPOTor MARGIN,default SPOT"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string[]",
              "required": true,
              "description": "The asset being converted. For example: asset=BTC,USDT"
            },
            "accountType": {
              "name": "accountType",
              "type": "string",
              "required": false,
              "description": "SPOTor MARGIN,default SPOT"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "totalServiceCharge": "NumberString",
              "totalTransfered": "NumberString",
              "transferResult": [
                {
                  "amount": "NumberString",
                  "fromAsset": "string",
                  "operateTime": "number",
                  "serviceChargeAmount": "NumberString",
                  "tranId": "number",
                  "transferedAmount": "NumberString"
                },
                null,
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "totalServiceCharge": "0.02102542",
              "totalTransfered": "1.05127099",
              "transferResult": [
                {
                  "amount": "0.03000000",
                  "fromAsset": "ETH",
                  "operateTime": 1563368549307,
                  "serviceChargeAmount": "0.00500000",
                  "tranId": 2970932918,
                  "transferedAmount": "0.25000000"
                },
                {
                  "amount": "0.09000000",
                  "fromAsset": "LTC",
                  "operateTime": 1563368549404,
                  "serviceChargeAmount": "0.01548000",
                  "tranId": 2970932918,
                  "transferedAmount": "0.77400000"
                },
                {
                  "amount": "248.61878453",
                  "fromAsset": "TRX",
                  "operateTime": 1563368549489,
                  "serviceChargeAmount": "0.00054542",
                  "tranId": 2970932918,
                  "transferedAmount": "0.02727099"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.dust-transfer-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#dust-transfer-user_data",
      "name": "Dust Transfer (USER_DATA)"
    },
    {
      "description": "Query asset dividend record.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/asset/assetDividend",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/asset/assetDividend",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 20, max 500"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 20, max 500"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "id": "number",
                  "amount": "NumberString",
                  "asset": "string",
                  "divTime": "number",
                  "enInfo": "string",
                  "tranId": "number"
                },
                null
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "id": 1637366104,
                  "amount": "10.00000000",
                  "asset": "BHFT",
                  "divTime": 1563189166000,
                  "enInfo": "BHFT distribution",
                  "tranId": 2968885920
                },
                {
                  "id": 1631750237,
                  "amount": "10.00000000",
                  "asset": "BHFT",
                  "divTime": 1563189165000,
                  "enInfo": "BHFT distribution",
                  "tranId": 2968885920
                }
              ],
              "total": 2
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.asset-dividend-record-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#asset-dividend-record-user_data",
      "name": "Asset Dividend Record (USER_DATA)"
    },
    {
      "description": "Fetch details of assets supported on Binance.",
      "securityType": "USER_DATA",
      "request": "GET   /sapi/v1/asset/assetDetail",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/asset/assetDetail",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "CTR": {
                "minWithdrawAmount": "NumberString", //min withdraw amount
                "depositStatus": "boolean", //deposit status (false if ALL of networks' are false)
                "withdrawFee": "number", // withdraw fee
                "withdrawStatus": "boolean", //withdraw status (false if ALL of networks' are false)
                "depositTip": "string" //reason
              },
              "SKY": {
                "minWithdrawAmount": "NumberString",
                "depositStatus": "boolean",
                "withdrawFee": "number",
                "withdrawStatus": "boolean"
              }
            }
          ],
          "responseExamples": [
            {
              "CTR": {
                "minWithdrawAmount": "70.00000000", //min withdraw amount
                "depositStatus": false, //deposit status (false if ALL of networks' are false)
                "withdrawFee": 35, // withdraw fee
                "withdrawStatus": true, //withdraw status (false if ALL of networks' are false)
                "depositTip": "Delisted, Deposit Suspended" //reason
              },
              "SKY": {
                "minWithdrawAmount": "0.02000000",
                "depositStatus": true,
                "withdrawFee": 0.01,
                "withdrawStatus": true
              }
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.asset-detail-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#asset-detail-user_data",
      "name": "Asset Detail (USER_DATA)"
    },
    {
      "description": "Fetch trade fee",
      "securityType": "USER_DATA",
      "request": "GET  /sapi/v1/asset/tradeFee",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/asset/tradeFee",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "makerCommission": "NumberString",
                "takerCommission": "NumberString"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "ADABNB",
                "makerCommission": "0.001",
                "takerCommission": "0.001"
              },
              {
                "symbol": "BNBBTC",
                "makerCommission": "0.001",
                "takerCommission": "0.001"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.trade-fee-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#trade-fee-user_data",
      "name": "Trade Fee (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/asset/transfer",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/asset/transfer",
      "hmacSHA256": false,
      "weights": {
        "UID": 900,
        "UID_text": "900"
      },
      "baseParams": {
        "type": {
          "name": "type",
          "type": "OrderType",
          "required": true,
          "description": ""
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "fromSymbol": {
          "name": "fromSymbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "toSymbol": {
          "name": "toSymbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "type": {
              "name": "type",
              "type": "OrderType",
              "required": true,
              "description": ""
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "fromSymbol": {
              "name": "fromSymbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "toSymbol": {
              "name": "toSymbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "tranId": "number"
            }
          ],
          "responseExamples": [
            {
              "tranId": 13526853623
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.user-universal-transfer-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#user-universal-transfer-user_data",
      "name": "User Universal Transfer (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET   /sapi/v1/asset/transfer",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/asset/transfer",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "type": {
          "name": "type",
          "type": "OrderType",
          "required": true,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "INT",
          "required": false,
          "description": "Default 1"
        },
        "size": {
          "name": "size",
          "type": "INT",
          "required": false,
          "description": "Default 10, Max 100"
        },
        "fromSymbol": {
          "name": "fromSymbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "toSymbol": {
          "name": "toSymbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "type": {
              "name": "type",
              "type": "OrderType",
              "required": true,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "INT",
              "required": false,
              "description": "Default 1"
            },
            "size": {
              "name": "size",
              "type": "INT",
              "required": false,
              "description": "Default 10, Max 100"
            },
            "fromSymbol": {
              "name": "fromSymbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "toSymbol": {
              "name": "toSymbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number",
              "rows": [
                {
                  "asset": "string",
                  "amount": "NumberString",
                  "type": "string",
                  "status": "string", // status: CONFIRMED / FAILED / PENDING
                  "tranId": "number",
                  "timestamp": "number"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 2,
              "rows": [
                {
                  "asset": "USDT",
                  "amount": "1",
                  "type": "MAIN_UMFUTURE",
                  "status": "CONFIRMED", // status: CONFIRMED / FAILED / PENDING
                  "tranId": 11415955596,
                  "timestamp": 1544433328000
                },
                {
                  "asset": "USDT",
                  "amount": "2",
                  "type": "MAIN_UMFUTURE",
                  "status": "CONFIRMED",
                  "tranId": 11366865406,
                  "timestamp": 1544433328000
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.query-user-universal-transfer-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-user-universal-transfer-history-user_data",
      "name": "Query User Universal Transfer History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/asset/get-funding-asset",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/asset/get-funding-asset",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "needBtcValuation": {
          "name": "needBtcValuation",
          "type": "string",
          "required": false,
          "description": "true or false"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "needBtcValuation": {
              "name": "needBtcValuation",
              "type": "string",
              "required": false,
              "description": "true or false"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "asset": "string",
                "free": "NumberString", // avalible balance
                "locked": "NumberString", // locked asset
                "freeze": "NumberString", // freeze asset
                "withdrawing": "NumberString",
                "btcValuation": "NumberString"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "asset": "USDT",
                "free": "1", // avalible balance
                "locked": "0", // locked asset
                "freeze": "0", // freeze asset
                "withdrawing": "0",
                "btcValuation": "0.00000091"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.funding-wallet-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#funding-wallet-user_data",
      "name": "Funding Wallet (USER_DATA)"
    },
    {
      "description": "Get user assets, just for positive data.",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v3/asset/getUserAsset",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v3/asset/getUserAsset",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": "If asset is blank, then query all positive assets user have."
        },
        "needBtcValuation": {
          "name": "needBtcValuation",
          "type": "boolean",
          "required": false,
          "description": "Whether need btc valuation or not."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": "If asset is blank, then query all positive assets user have."
            },
            "needBtcValuation": {
              "name": "needBtcValuation",
              "type": "boolean",
              "required": false,
              "description": "Whether need btc valuation or not."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "asset": "string",
                "free": "NumberString",
                "locked": "NumberString",
                "freeze": "NumberString",
                "withdrawing": "NumberString",
                "ipoable": "NumberString",
                "btcValuation": "NumberString"
              },
              null,
              null,
              null,
              null,
              null,
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "asset": "AVAX",
                "free": "1",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "ipoable": "0",
                "btcValuation": "0"
              },
              {
                "asset": "BCH",
                "free": "0.9",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "ipoable": "0",
                "btcValuation": "0"
              },
              {
                "asset": "BNB",
                "free": "887.47061626",
                "locked": "0",
                "freeze": "10.52",
                "withdrawing": "0.1",
                "ipoable": "0",
                "btcValuation": "0"
              },
              {
                "asset": "BUSD",
                "free": "9999.7",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "ipoable": "0",
                "btcValuation": "0"
              },
              {
                "asset": "SHIB",
                "free": "532.32",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "ipoable": "0",
                "btcValuation": "0"
              },
              {
                "asset": "USDT",
                "free": "50300000001.44911105",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "ipoable": "0",
                "btcValuation": "0"
              },
              {
                "asset": "WRZ",
                "free": "1",
                "locked": "0",
                "freeze": "0",
                "withdrawing": "0",
                "ipoable": "0",
                "btcValuation": "0"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.user-asset-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#user-asset-user_data",
      "name": "User Asset (USER_DATA)"
    },
    {
      "description": "Convert transfer, convert between BUSD and stablecoins.",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/asset/convert-transfer",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/asset/convert-transfer",
      "hmacSHA256": false,
      "weights": {
        "UID": 5,
        "UID_text": "5"
      },
      "baseParams": {
        "clientTranId": {
          "name": "clientTranId",
          "type": "string",
          "required": true,
          "description": "The unique user-defined transaction id, min length 20"
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": "The current asset"
        },
        "amount": {
          "name": "amount",
          "type": "BigDecimal",
          "required": true,
          "description": "The amount must be positive number"
        },
        "targetAsset": {
          "name": "targetAsset",
          "type": "string",
          "required": true,
          "description": "Target asset you want to convert"
        },
        "accountType": {
          "name": "accountType",
          "type": "string",
          "required": false,
          "description": "Only MAIN and CARD, default MAIN"
        }
      },
      "overloads": [
        {
          "params": {
            "clientTranId": {
              "name": "clientTranId",
              "type": "string",
              "required": true,
              "description": "The unique user-defined transaction id, min length 20"
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": "The current asset"
            },
            "amount": {
              "name": "amount",
              "type": "BigDecimal",
              "required": true,
              "description": "The amount must be positive number"
            },
            "targetAsset": {
              "name": "targetAsset",
              "type": "string",
              "required": true,
              "description": "Target asset you want to convert"
            },
            "accountType": {
              "name": "accountType",
              "type": "string",
              "required": false,
              "description": "Only MAIN and CARD, default MAIN"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "tranId": "number",
              "status": "string"
            }
          ],
          "responseExamples": [
            {
              "tranId": 118263407119,
              "status": "S"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.busd-convert-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#busd-convert-trade",
      "name": "BUSD Convert (TRADE)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/asset/convert-transfer/queryByPage",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/asset/convert-transfer/queryByPage",
      "hmacSHA256": false,
      "weights": {
        "UID": 5,
        "UID_text": "5"
      },
      "baseParams": {
        "tranId": {
          "name": "tranId",
          "type": "LONG",
          "required": false,
          "description": "The transaction id"
        },
        "clientTranId": {
          "name": "clientTranId",
          "type": "string",
          "required": false,
          "description": "The user-defined transaction id"
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": "If it is blank, we will match deducted asset and target asset."
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": true,
          "description": "inclusive, unit: ms"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": true,
          "description": "exclusive, unit: ms"
        },
        "accountType": {
          "name": "accountType",
          "type": "string",
          "required": false,
          "description": "MAIN: main account. CARD: funding account. If it is blank, we will query spot and card wallet, otherwise, we just query the corresponding wallet"
        },
        "current": {
          "name": "current",
          "type": "INTEGER",
          "required": false,
          "description": "current page, default 1, the min value is 1"
        },
        "size": {
          "name": "size",
          "type": "INTEGER",
          "required": false,
          "description": "page size, default 10, the max value is 100"
        }
      },
      "overloads": [
        {
          "params": {
            "tranId": {
              "name": "tranId",
              "type": "LONG",
              "required": false,
              "description": "The transaction id"
            },
            "clientTranId": {
              "name": "clientTranId",
              "type": "string",
              "required": false,
              "description": "The user-defined transaction id"
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": "If it is blank, we will match deducted asset and target asset."
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": true,
              "description": "inclusive, unit: ms"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": true,
              "description": "exclusive, unit: ms"
            },
            "accountType": {
              "name": "accountType",
              "type": "string",
              "required": false,
              "description": "MAIN: main account. CARD: funding account. If it is blank, we will query spot and card wallet, otherwise, we just query the corresponding wallet"
            },
            "current": {
              "name": "current",
              "type": "INTEGER",
              "required": false,
              "description": "current page, default 1, the min value is 1"
            },
            "size": {
              "name": "size",
              "type": "INTEGER",
              "required": false,
              "description": "page size, default 10, the max value is 100"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number",
              "rows": [
                {
                  "tranId": "number",
                  "type": "number",
                  "time": "number",
                  "deductedAsset": "string",
                  "deductedAmount": "NumberString",
                  "targetAsset": "string",
                  "targetAmount": "NumberString",
                  "status": "string",
                  "accountType": "string"
                },
                null,
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 3,
              "rows": [
                {
                  "tranId": 118263615991,
                  "type": 244,
                  "time": 1664442078000,
                  "deductedAsset": "BUSD",
                  "deductedAmount": "1",
                  "targetAsset": "USDC",
                  "targetAmount": "1",
                  "status": "S",
                  "accountType": "MAIN"
                },
                {
                  "tranId": 118263598801,
                  "type": 244,
                  "time": 1664442061000,
                  "deductedAsset": "BUSD",
                  "deductedAmount": "1",
                  "targetAsset": "USDC",
                  "targetAmount": "1",
                  "status": "S",
                  "accountType": "MAIN"
                },
                {
                  "tranId": 118263407119,
                  "type": 244,
                  "time": 1664441820000,
                  "deductedAsset": "BUSD",
                  "deductedAmount": "1",
                  "targetAsset": "USDC",
                  "targetAmount": "1",
                  "status": "S",
                  "accountType": "MAIN"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.busd-convert-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#busd-convert-history-user_data",
      "name": "BUSD Convert History (USER_DATA)"
    },
    {
      "description": "The query of Cloud-Mining payment and refund history",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage",
      "hmacSHA256": false,
      "weights": {
        "UID": 600,
        "UID_text": "600"
      },
      "baseParams": {
        "tranId": {
          "name": "tranId",
          "type": "LONG",
          "required": false,
          "description": "The transaction id"
        },
        "clientTranId": {
          "name": "clientTranId",
          "type": "string",
          "required": false,
          "description": "The unique flag"
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": "If it is blank, we will query all assets"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": true,
          "description": "inclusive, unit: ms"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": true,
          "description": "exclusive, unit: ms"
        },
        "current": {
          "name": "current",
          "type": "INTEGER",
          "required": false,
          "description": "current page, default 1, the min value is 1"
        },
        "size": {
          "name": "size",
          "type": "INTEGER",
          "required": false,
          "description": "page size, default 10, the max value is 100"
        }
      },
      "overloads": [
        {
          "params": {
            "tranId": {
              "name": "tranId",
              "type": "LONG",
              "required": false,
              "description": "The transaction id"
            },
            "clientTranId": {
              "name": "clientTranId",
              "type": "string",
              "required": false,
              "description": "The unique flag"
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": "If it is blank, we will query all assets"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": true,
              "description": "inclusive, unit: ms"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": true,
              "description": "exclusive, unit: ms"
            },
            "current": {
              "name": "current",
              "type": "INTEGER",
              "required": false,
              "description": "current page, default 1, the min value is 1"
            },
            "size": {
              "name": "size",
              "type": "INTEGER",
              "required": false,
              "description": "page size, default 10, the max value is 100"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number",
              "rows": [
                {
                  "createTime": "number",
                  "tranId": "number",
                  "type": "number",
                  "asset": "string",
                  "amount": "NumberString",
                  "status": "string"
                },
                null,
                null,
                null,
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 5,
              "rows": [
                {
                  "createTime": 1667880112000,
                  "tranId": 121230610120,
                  "type": 248,
                  "asset": "USDT",
                  "amount": "25.0068",
                  "status": "S"
                },
                {
                  "createTime": 1666776366000,
                  "tranId": 119991507468,
                  "type": 249,
                  "asset": "USDT",
                  "amount": "0.027",
                  "status": "S"
                },
                {
                  "createTime": 1666764505000,
                  "tranId": 119977966327,
                  "type": 248,
                  "asset": "USDT",
                  "amount": "0.027",
                  "status": "S"
                },
                {
                  "createTime": 1666758189000,
                  "tranId": 119973601721,
                  "type": 248,
                  "asset": "USDT",
                  "amount": "0.018",
                  "status": "S"
                },
                {
                  "createTime": 1666757278000,
                  "tranId": 119973028551,
                  "type": 248,
                  "asset": "USDT",
                  "amount": "0.018",
                  "status": "S"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.get-cloud-mining-payment-and-refund-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-cloud-mining-payment-and-refund-history-user_data",
      "name": "Get Cloud-Mining payment and refund history (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/account/apiRestrictions",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/account/apiRestrictions",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "ipRestrict": "boolean",
              "createTime": "number",
              "enableInternalTransfer": "boolean", // This option authorizes this key to transfer funds between your master account and your sub account instantly
              "enableFutures": "boolean", //  The Futures API cannot be used if the API key was created before the Futures account was opened, or if you have enabled portfolio margin.
              "enablePortfolioMarginTrading": "boolean", //  API Key created before your activate portfolio margin does not support portfolio margin API service
              "enableVanillaOptions": "boolean", //  Authorizes this key to Vanilla options trading
              "permitsUniversalTransfer": "boolean", // Authorizes this key to be used for a dedicated universal transfer API to transfer multiple supported currencies. Each business's own transfer API rights are not affected by this authorization
              "enableReading": "boolean",
              "enableSpotAndMarginTrading": "boolean", // Spot and margin trading
              "enableWithdrawals": "boolean", // This option allows you to withdraw via API. You must apply the IP Access Restriction filter in order to enable withdrawals
              "enableMargin": "boolean" //  This option can be adjusted after the Cross Margin account transfer is completed
            }
          ],
          "responseExamples": [
            {
              "ipRestrict": false,
              "createTime": 1698645219000,
              "enableInternalTransfer": false, // This option authorizes this key to transfer funds between your master account and your sub account instantly
              "enableFutures": false, //  The Futures API cannot be used if the API key was created before the Futures account was opened, or if you have enabled portfolio margin.
              "enablePortfolioMarginTrading": true, //  API Key created before your activate portfolio margin does not support portfolio margin API service
              "enableVanillaOptions": false, //  Authorizes this key to Vanilla options trading
              "permitsUniversalTransfer": false, // Authorizes this key to be used for a dedicated universal transfer API to transfer multiple supported currencies. Each business's own transfer API rights are not affected by this authorization
              "enableReading": true,
              "enableSpotAndMarginTrading": false, // Spot and margin trading
              "enableWithdrawals": false, // This option allows you to withdraw via API. You must apply the IP Access Restriction filter in order to enable withdrawals
              "enableMargin": false //  This option can be adjusted after the Cross Margin account transfer is completed
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.get-api-key-permission-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-api-key-permission-user_data",
      "name": "Get API Key Permission (USER_DATA)"
    },
    {
      "description": "Get a user's auto-conversion settings in deposit/withdrawal",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/capital/contract/convertible-coins",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/capital/contract/convertible-coins",
      "hmacSHA256": false,
      "weights": {
        "UID": 600,
        "UID_text": "600"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "convertEnabled": "boolean",
              "coins": [
                "string"
              ],
              "exchangeRates": {
                "USDC": "NumberString",
                "TUSD": "NumberString",
                "USDP": "NumberString"
              }
            }
          ],
          "responseExamples": [
            {
              "convertEnabled": true,
              "coins": [
                "USDC",
                "USDP",
                "TUSD"
              ],
              "exchangeRates": {
                "USDC": "1",
                "TUSD": "1",
                "USDP": "1"
              }
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.query-auto-converting-stable-coins-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-auto-converting-stable-coins-user_data",
      "name": "Query auto-converting stable coins (USER_DATA)"
    },
    {
      "description": "User can use it to turn on or turn off the BUSD auto-conversion from/to a specific stable coin.",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/capital/contract/convertible-coins",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/capital/contract/convertible-coins",
      "hmacSHA256": false,
      "weights": {
        "UID": 600,
        "UID_text": "600"
      },
      "baseParams": {
        "coin": {
          "name": "coin",
          "type": "string",
          "required": true,
          "description": "Must be USDC, USDP or TUSD"
        },
        "enable": {
          "name": "enable",
          "type": "boolean",
          "required": true,
          "description": "true: turn on the auto-conversion. false: turn off the auto-conversion"
        }
      },
      "overloads": [
        {
          "params": {
            "coin": {
              "name": "coin",
              "type": "string",
              "required": true,
              "description": "Must be USDC, USDP or TUSD"
            },
            "enable": {
              "name": "enable",
              "type": "boolean",
              "required": true,
              "description": "true: turn on the auto-conversion. false: turn off the auto-conversion"
            }
          },
          "responseNames": [],
          "responseTypes": [],
          "responseExamples": [],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.switch-on-off-busd-and-stable-coins-conversion-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#switch-on-off-busd-and-stable-coins-conversion-user_data",
      "name": "Switch on/off BUSD and stable coins conversion (USER_DATA)"
    },
    {
      "description": "Apply deposit credit for expired address (One click arrival)",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/capital/deposit/credit-apply",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/capital/deposit/credit-apply",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "depositId": {
          "name": "depositId",
          "type": "LONG",
          "required": false,
          "description": "Deposit record Id, priority use"
        },
        "txId": {
          "name": "txId",
          "type": "string",
          "required": false,
          "description": "Deposit txId, used when depositId is not specified"
        },
        "subAccountId": {
          "name": "subAccountId",
          "type": "LONG",
          "required": false,
          "description": "Sub-accountId of Cloud user"
        },
        "subUserId": {
          "name": "subUserId",
          "type": "LONG",
          "required": false,
          "description": "Sub-userId of parent user"
        }
      },
      "overloads": [
        {
          "params": {
            "depositId": {
              "name": "depositId",
              "type": "LONG",
              "required": false,
              "description": "Deposit record Id, priority use"
            },
            "txId": {
              "name": "txId",
              "type": "string",
              "required": false,
              "description": "Deposit txId, used when depositId is not specified"
            },
            "subAccountId": {
              "name": "subAccountId",
              "type": "LONG",
              "required": false,
              "description": "Sub-accountId of Cloud user"
            },
            "subUserId": {
              "name": "subUserId",
              "type": "LONG",
              "required": false,
              "description": "Sub-userId of parent user"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "NumberString",
              "message": "string",
              "data": "boolean",
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "code": "000000",
              "message": "success",
              "data": true,
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.one-click-arrival-deposit-apply-for-expired-address-deposit-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#one-click-arrival-deposit-apply-for-expired-address-deposit-user_data",
      "name": "One click arrival deposit apply (for expired address deposit) (USER_DATA)"
    },
    {
      "description": "Fetch deposit address list with network.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/capital/deposit/address/list",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/capital/deposit/address/list",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "coin": {
          "name": "coin",
          "type": "string",
          "required": true,
          "description": "coin refers to the parent network address format that the address is using"
        },
        "network": {
          "name": "network",
          "type": "string",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "coin": {
              "name": "coin",
              "type": "string",
              "required": true,
              "description": "coin refers to the parent network address format that the address is using"
            },
            "network": {
              "name": "network",
              "type": "string",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "coin": "string",
                "address": "NumberString",
                "tag": "string",
                "isDefault": "number"
              },
              null,
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "coin": "ETH",
                "address": "0xD316E95Fd9E8E237Cb11f8200Babbc5D8D177BA4",
                "tag": "",
                "isDefault": 0
              },
              {
                "coin": "ETH",
                "address": "0xD316E95Fd9E8E237Cb11f8200Babbc5D8D177BA4",
                "tag": "",
                "isDefault": 0
              },
              {
                "coin": "ETH",
                "address": "0x00003ada75e7da97ba0db2fcde72131f712455e2",
                "tag": "",
                "isDefault": 1 //'isDefault' is 1 means the address is default, same as shown in the app.
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.fetch-deposit-address-list-with-network-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#fetch-deposit-address-list-with-network-user_data",
      "name": "Fetch deposit address list with network(USER_DATA)"
    },
    {
      "description": "Query User Wallet Balance",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/asset/wallet/balance",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/asset/wallet/balance",
      "hmacSHA256": false,
      "weights": {
        "IP": 60,
        "IP_text": "60"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "activate": "boolean",
                "balance": "NumberString",
                "walletName": "string"
              },
              null,
              null,
              null,
              null,
              null,
              null,
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "activate": true,
                "balance": "0",
                "walletName": "Spot"
              },
              {
                "activate": true,
                "balance": "0",
                "walletName": "Funding"
              },
              {
                "activate": true,
                "balance": "0",
                "walletName": "Cross Margin"
              },
              {
                "activate": true,
                "balance": "0",
                "walletName": "Isolated Margin"
              },
              {
                "activate": true,
                "balance": "0.71842752",
                "walletName": "USDⓈ-M Futures"
              },
              {
                "activate": true,
                "balance": "0",
                "walletName": "COIN-M Futures"
              },
              {
                "activate": true,
                "balance": "0",
                "walletName": "Earn"
              },
              {
                "activate": false,
                "balance": "0",
                "walletName": "Options"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.query-user-wallet-balance-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-user-wallet-balance-user_data",
      "name": "Query User Wallet Balance (USER_DATA)"
    },
    {
      "description": "Query User Delegation History",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/asset/custody/transfer-history",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/asset/custody/transfer-history",
      "hmacSHA256": false,
      "weights": {
        "IP": 60,
        "IP_text": "60"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "type": {
          "name": "type",
          "type": "OrderType",
          "required": false,
          "description": "Delegate/Undelegate"
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "INTEGER",
          "required": false,
          "description": "default 1"
        },
        "size": {
          "name": "size",
          "type": "INTEGER",
          "required": false,
          "description": "default 10, max 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "type": {
              "name": "type",
              "type": "OrderType",
              "required": false,
              "description": "Delegate/Undelegate"
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "INTEGER",
              "required": false,
              "description": "default 1"
            },
            "size": {
              "name": "size",
              "type": "INTEGER",
              "required": false,
              "description": "default 10, max 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number",
              "rows": [
                {
                  "clientTranId": "NumberString",
                  "transferType": "string",
                  "asset": "string",
                  "amount": "NumberString",
                  "time": "number"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 3316,
              "rows": [
                {
                  "clientTranId": "293915932290879488",
                  "transferType": "Undelegate",
                  "asset": "ETH",
                  "amount": "1",
                  "time": 1695205406000
                },
                {
                  "clientTranId": "293915892281413632",
                  "transferType": "Delegate",
                  "asset": "ETH",
                  "amount": "1",
                  "time": 1695205396000
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.query-user-delegation-history-for-master-account-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-user-delegation-history-for-master-account-user_data",
      "name": "Query User Delegation History(For Master Account)(USER_DATA)"
    },
    {
      "description": "Get symbols delist schedule for spot",
      "securityType": "MARKET_DATA",
      "request": "GET /sapi/v1/spot/delist-schedule",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/spot/delist-schedule",
      "hmacSHA256": false,
      "weights": {
        "IP": 100,
        "IP_text": "100"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "delistTime": "number",
                "symbols": [
                  "string"
                ]
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "delistTime": 1686161202000,
                "symbols": [
                  "ADAUSDT",
                  "BNBUSDT"
                ]
              },
              {
                "delistTime": 1686222232000,
                "symbols": [
                  "ETHUSDT"
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.get-symbols-delist-schedule-for-spot-market_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-symbols-delist-schedule-for-spot-market_data",
      "name": "Get symbols delist schedule for spot (MARKET_DATA)"
    },
    {
      "description": "Fetch withdraw address list",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/capital/withdraw/address/list",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/capital/withdraw/address/list",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "address": "string",
                "addressTag": "string",
                "coin": "string",
                "name": "string", //is a user-defined name
                "network": "string",
                "origin": "string", //if originType=='others', the address source manually filled in by the user
                "originType": "string", //Address source type
                "whiteStatus": "boolean" //Is it whitelisted
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "address": "string",
                "addressTag": "string",
                "coin": "string",
                "name": "string", //is a user-defined name
                "network": "string",
                "origin": "string", //if originType=='others', the address source manually filled in by the user
                "originType": "string", //Address source type
                "whiteStatus": true //Is it whitelisted
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.fetch-withdraw-address-list-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#fetch-withdraw-address-list-user_data",
      "name": "Fetch withdraw address list (USER_DATA)"
    },
    {
      "description": "Fetch account info detail.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/account/info",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/account/info",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "vipLevel": "number",
              "isMarginEnabled": "boolean", // true or false for margin
              "isFutureEnabled": "boolean" // true or false for futures.
            }
          ],
          "responseExamples": [
            {
              "vipLevel": 0,
              "isMarginEnabled": true, // true or false for margin
              "isFutureEnabled": true // true or false for futures.
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Wallet Endpoints",
      "path": "toc.wallet-endpoints.account-info-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#account-info-user_data",
      "name": "Account info (USER_DATA)"
    },
    {
      "securityType": "",
      "request": "POST   /sapi/v1/sub-account/virtualSubAccount",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/sub-account/virtualSubAccount",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "subAccountString": {
          "name": "subAccountString",
          "type": "string",
          "required": true,
          "description": "Please input a string. We will create a virtual email using that string for you to register"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "subAccountString": {
              "name": "subAccountString",
              "type": "string",
              "required": true,
              "description": "Please input a string. We will create a virtual email using that string for you to register"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "email": "string"
            }
          ],
          "responseExamples": [
            {
              "email": "addsdd_virtual@aasaixwqnoemail.com"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.create-a-virtual-sub-account-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#create-a-virtual-sub-account-for-master-account",
      "name": "Create a Virtual Sub-account(For Master Account)"
    },
    {
      "securityType": "",
      "request": "GET   /sapi/v1/sub-account/list",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/sub-account/list",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": false,
          "description": "Sub-account email"
        },
        "isFreeze": {
          "name": "isFreeze",
          "type": "string",
          "required": false,
          "description": "true or false"
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": "Default value: 1"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default value: 1, Max value: 200"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": false,
              "description": "Sub-account email"
            },
            "isFreeze": {
              "name": "isFreeze",
              "type": "string",
              "required": false,
              "description": "true or false"
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "Default value: 1"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default value: 1, Max value: 200"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "subAccounts": [
                {
                  "email": "string",
                  "isFreeze": "boolean",
                  "createTime": "number",
                  "isManagedSubAccount": "boolean",
                  "isAssetManagementSubAccount": "boolean"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "subAccounts": [
                {
                  "email": "testsub@gmail.com",
                  "isFreeze": false,
                  "createTime": 1544433328000,
                  "isManagedSubAccount": false,
                  "isAssetManagementSubAccount": false
                },
                {
                  "email": "virtual@oxebmvfonoemail.com",
                  "isFreeze": false,
                  "createTime": 1544433328000,
                  "isManagedSubAccount": false,
                  "isAssetManagementSubAccount": false
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.query-sub-account-list-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-sub-account-list-for-master-account",
      "name": "Query Sub-account List (For Master Account)"
    },
    {
      "securityType": "",
      "request": "GET /sapi/v1/sub-account/sub/transfer/history",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/sub-account/sub/transfer/history",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "fromEmail": {
          "name": "fromEmail",
          "type": "string",
          "required": false,
          "description": ""
        },
        "toEmail": {
          "name": "toEmail",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": "Default value: 1"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default value: 500"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "fromEmail": {
              "name": "fromEmail",
              "type": "string",
              "required": false,
              "description": ""
            },
            "toEmail": {
              "name": "toEmail",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "Default value: 1"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default value: 500"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "from": "string",
                "to": "string",
                "asset": "string",
                "qty": "NumberString",
                "status": "string",
                "tranId": "number",
                "time": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "from": "aaa@test.com",
                "to": "bbb@test.com",
                "asset": "BTC",
                "qty": "10",
                "status": "SUCCESS",
                "tranId": 6489943656,
                "time": 1544433328000
              },
              {
                "from": "bbb@test.com",
                "to": "ccc@test.com",
                "asset": "ETH",
                "qty": "2",
                "status": "SUCCESS",
                "tranId": 6489938713,
                "time": 1544433328000
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.query-sub-account-spot-asset-transfer-history-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-sub-account-spot-asset-transfer-history-for-master-account",
      "name": "Query Sub-account Spot Asset Transfer History (For Master Account)"
    },
    {
      "securityType": "",
      "request": "GET /sapi/v1/sub-account/futures/internalTransfer",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/sub-account/futures/internalTransfer",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub-account email"
        },
        "futuresType": {
          "name": "futuresType",
          "type": "LONG",
          "required": true,
          "description": "1:USDT-margined Futures，2: Coin-margined Futures"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Default return the history with in 100 days"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Default return the history with in 100 days"
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": "Default value: 1"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default value: 50, Max value: 500"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub-account email"
            },
            "futuresType": {
              "name": "futuresType",
              "type": "LONG",
              "required": true,
              "description": "1:USDT-margined Futures，2: Coin-margined Futures"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Default return the history with in 100 days"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Default return the history with in 100 days"
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "Default value: 1"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default value: 50, Max value: 500"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "success": "boolean",
              "futuresType": "number",
              "transfers": [
                {
                  "from": "string",
                  "to": "string",
                  "asset": "string",
                  "qty": "NumberString",
                  "tranId": "number",
                  "time": "number"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "success": true,
              "futuresType": 2,
              "transfers": [
                {
                  "from": "aaa@test.com",
                  "to": "bbb@test.com",
                  "asset": "BTC",
                  "qty": "1",
                  "tranId": 11897001102,
                  "time": 1544433328000
                },
                {
                  "from": "bbb@test.com",
                  "to": "ccc@test.com",
                  "asset": "ETH",
                  "qty": "2",
                  "tranId": 11631474902,
                  "time": 1544433328000
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.query-sub-account-futures-asset-transfer-history-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-sub-account-futures-asset-transfer-history-for-master-account",
      "name": "Query Sub-account Futures Asset Transfer History (For Master Account)"
    },
    {
      "securityType": "",
      "request": "POST /sapi/v1/sub-account/futures/internalTransfer",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/sub-account/futures/internalTransfer",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "fromEmail": {
          "name": "fromEmail",
          "type": "string",
          "required": true,
          "description": "Sender email"
        },
        "toEmail": {
          "name": "toEmail",
          "type": "string",
          "required": true,
          "description": "Recipient email"
        },
        "futuresType": {
          "name": "futuresType",
          "type": "LONG",
          "required": true,
          "description": "1:USDT-margined Futures，2: Coin-margined Futures"
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "fromEmail": {
              "name": "fromEmail",
              "type": "string",
              "required": true,
              "description": "Sender email"
            },
            "toEmail": {
              "name": "toEmail",
              "type": "string",
              "required": true,
              "description": "Recipient email"
            },
            "futuresType": {
              "name": "futuresType",
              "type": "LONG",
              "required": true,
              "description": "1:USDT-margined Futures，2: Coin-margined Futures"
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "success": "boolean",
              "txnId": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "success": true,
              "txnId": "2934662589"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.sub-account-futures-asset-transfer-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#sub-account-futures-asset-transfer-for-master-account",
      "name": "Sub-account Futures Asset Transfer (For Master Account)"
    },
    {
      "description": "Fetch sub-account assets",
      "securityType": "",
      "request": "GET   /sapi/v3/sub-account/assets",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v3/sub-account/assets",
      "hmacSHA256": false,
      "weights": {
        "UID": 60,
        "UID_text": "60"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub account email"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub account email"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "balances": [
                {
                  "asset": "string",
                  "free": "number",
                  "locked": "number"
                },
                null,
                null,
                null,
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "balances": [
                {
                  "asset": "ADA",
                  "free": 10000,
                  "locked": 0
                },
                {
                  "asset": "BNB",
                  "free": 10003,
                  "locked": 0
                },
                {
                  "asset": "BTC",
                  "free": 11467.6399,
                  "locked": 0
                },
                {
                  "asset": "ETH",
                  "free": 10004.995,
                  "locked": 0
                },
                {
                  "asset": "USDT",
                  "free": 11652.14213,
                  "locked": 0
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.query-sub-account-assets-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-sub-account-assets-for-master-account",
      "name": "Query Sub-account Assets (For Master Account)"
    },
    {
      "description": "Get BTC valued asset summary of subaccounts.",
      "securityType": "",
      "request": "GET /sapi/v1/sub-account/spotSummary",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/sub-account/spotSummary",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": false,
          "description": "Sub account email"
        },
        "page": {
          "name": "page",
          "type": "LONG",
          "required": false,
          "description": "default 1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "default 10, max 20"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": false,
              "description": "Sub account email"
            },
            "page": {
              "name": "page",
              "type": "LONG",
              "required": false,
              "description": "default 1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "default 10, max 20"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "totalCount": "number",
              "masterAccountTotalAsset": "NumberString",
              "spotSubUserAssetBtcVoList": [
                {
                  "email": "string",
                  "totalAsset": "NumberString"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "totalCount": 2,
              "masterAccountTotalAsset": "0.23231201",
              "spotSubUserAssetBtcVoList": [
                {
                  "email": "sub123@test.com",
                  "totalAsset": "9999.00000000"
                },
                {
                  "email": "test456@test.com",
                  "totalAsset": "0.00000000"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.query-sub-account-spot-assets-summary-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-sub-account-spot-assets-summary-for-master-account",
      "name": "Query Sub-account Spot Assets Summary (For Master Account)"
    },
    {
      "description": "Fetch sub-account deposit address",
      "securityType": "",
      "request": "GET /sapi/v1/capital/deposit/subAddress",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/capital/deposit/subAddress",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub account email"
        },
        "coin": {
          "name": "coin",
          "type": "string",
          "required": true,
          "description": ""
        },
        "network": {
          "name": "network",
          "type": "string",
          "required": false,
          "description": ""
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub account email"
            },
            "coin": {
              "name": "coin",
              "type": "string",
              "required": true,
              "description": ""
            },
            "network": {
              "name": "network",
              "type": "string",
              "required": false,
              "description": ""
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "address": "string",
              "coin": "string",
              "tag": "string",
              "url": "string"
            }
          ],
          "responseExamples": [
            {
              "address": "TDunhSa7jkTNuKrusUTU1MUHtqXoBPKETV",
              "coin": "USDT",
              "tag": "",
              "url": "https://tronscan.org/#/address/TDunhSa7jkTNuKrusUTU1MUHtqXoBPKETV"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.get-sub-account-deposit-address-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-sub-account-deposit-address-for-master-account",
      "name": "Get Sub-account Deposit Address (For Master Account)"
    },
    {
      "description": "Fetch sub-account deposit history",
      "securityType": "",
      "request": "GET /sapi/v1/capital/deposit/subHisrec",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/capital/deposit/subHisrec",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub account email"
        },
        "coin": {
          "name": "coin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "status": {
          "name": "status",
          "type": "INT",
          "required": false,
          "description": "0(0:pending,6: credited but cannot withdraw,7:Wrong Deposit,8:Waiting User confirm,1:success)"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": ""
        },
        "offset": {
          "name": "offset",
          "type": "INT",
          "required": false,
          "description": "default:0"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "txId": {
          "name": "txId",
          "type": "string",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub account email"
            },
            "coin": {
              "name": "coin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "status": {
              "name": "status",
              "type": "INT",
              "required": false,
              "description": "0(0:pending,6: credited but cannot withdraw,7:Wrong Deposit,8:Waiting User confirm,1:success)"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": ""
            },
            "offset": {
              "name": "offset",
              "type": "INT",
              "required": false,
              "description": "default:0"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "txId": {
              "name": "txId",
              "type": "string",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "id": "NumberString",
                "amount": "NumberString",
                "coin": "string",
                "network": "string",
                "status": "number",
                "address": "string",
                "addressTag": "NumberString",
                "txId": "string",
                "insertTime": "number",
                "transferType": "number",
                "confirmTimes": "string",
                "unlockConfirm": "number",
                "walletType": "number"
              },
              {
                "id": "NumberString",
                "amount": "NumberString",
                "coin": "string",
                "network": "string",
                "status": "number",
                "address": "string",
                "addressTag": "string",
                "txId": "string",
                "insertTime": "number",
                "transferType": "number",
                "confirmTimes": "string",
                "unlockConfirm": "number",
                "walletType": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "id": "769800519366885376",
                "amount": "0.001",
                "coin": "BNB",
                "network": "BNB",
                "status": 0,
                "address": "bnb136ns6lfw4zs5hg4n85vdthaad7hq5m4gtkgf23",
                "addressTag": "101764890",
                "txId": "98A3EA560C6B3336D348B6C83F0F95ECE4F1F5919E94BD006E5BF3BF264FACFC",
                "insertTime": 1661493146000,
                "transferType": 0,
                "confirmTimes": "1/1",
                "unlockConfirm": 0,
                "walletType": 0
              },
              {
                "id": "769754833590042625",
                "amount": "0.50000000",
                "coin": "IOTA",
                "network": "IOTA",
                "status": 1,
                "address": "SIZ9VLMHWATXKV99LH99CIGFJFUMLEHGWVZVNNZXRJJVWBPHYWPPBOSDORZ9EQSHCZAMPVAPGFYQAUUV9DROOXJLNW",
                "addressTag": "",
                "txId": "ESBFVQUTPIWQNJSPXFNHNYHSQNTGKRVKPRABQWTAXCDWOAKDKYWPTVG9BGXNVNKTLEJGESAVXIKIZ9999",
                "insertTime": 1599620082000,
                "transferType": 0,
                "confirmTimes": "1/1",
                "unlockConfirm": 0,
                "walletType": 0
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.get-sub-account-deposit-history-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-sub-account-deposit-history-for-master-account",
      "name": "Get Sub-account Deposit History (For Master Account)"
    },
    {
      "securityType": "",
      "request": "GET /sapi/v1/sub-account/status",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/sub-account/status",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": false,
          "description": "Sub-account email"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": false,
              "description": "Sub-account email"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "email": "string", // user email
                "isSubUserEnabled": "boolean", // true or false
                "isUserActive": "boolean", // true or false
                "insertTime": "number", // sub account create time
                "isMarginEnabled": "boolean", // true or false for margin
                "isFutureEnabled": "boolean", // true or false for futures.
                "mobile": "number" // user mobile number
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "email": "123@test.com", // user email
                "isSubUserEnabled": true, // true or false
                "isUserActive": true, // true or false
                "insertTime": 1570791523523, // sub account create time
                "isMarginEnabled": true, // true or false for margin
                "isFutureEnabled": true, // true or false for futures.
                "mobile": 1570791523523 // user mobile number
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.get-sub-account-39-s-status-on-margin-futures-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-sub-account-39-s-status-on-margin-futures-for-master-account",
      "name": "Get Sub-account's Status on Margin/Futures (For Master Account)"
    },
    {
      "securityType": "",
      "request": "POST /sapi/v1/sub-account/margin/enable",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/sub-account/margin/enable",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub-account email"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub-account email"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "email": "string",
              "isMarginEnabled": "boolean"
            }
          ],
          "responseExamples": [
            {
              "email": "123@test.com",
              "isMarginEnabled": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.enable-margin-for-sub-account-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#enable-margin-for-sub-account-for-master-account",
      "name": "Enable Margin for Sub-account (For Master Account)"
    },
    {
      "securityType": "",
      "request": "GET /sapi/v1/sub-account/margin/account",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/sub-account/margin/account",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub-account email"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub-account email"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "email": "string",
              "marginLevel": "NumberString",
              "totalAssetOfBtc": "NumberString",
              "totalLiabilityOfBtc": "NumberString",
              "totalNetAssetOfBtc": "NumberString",
              "marginTradeCoeffVo": {
                "forceLiquidationBar": "NumberString", // Liquidation margin ratio
                "marginCallBar": "NumberString", // Margin call margin ratio
                "normalBar": "NumberString" // Initial margin ratio
              },
              "marginUserAssetVoList": [
                {
                  "asset": "string",
                  "borrowed": "NumberString",
                  "free": "NumberString",
                  "interest": "NumberString",
                  "locked": "NumberString",
                  "netAsset": "NumberString"
                },
                null,
                null,
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "email": "123@test.com",
              "marginLevel": "11.64405625",
              "totalAssetOfBtc": "6.82728457",
              "totalLiabilityOfBtc": "0.58633215",
              "totalNetAssetOfBtc": "6.24095242",
              "marginTradeCoeffVo": {
                "forceLiquidationBar": "1.10000000", // Liquidation margin ratio
                "marginCallBar": "1.50000000", // Margin call margin ratio
                "normalBar": "2.00000000" // Initial margin ratio
              },
              "marginUserAssetVoList": [
                {
                  "asset": "BTC",
                  "borrowed": "0.00000000",
                  "free": "0.00499500",
                  "interest": "0.00000000",
                  "locked": "0.00000000",
                  "netAsset": "0.00499500"
                },
                {
                  "asset": "BNB",
                  "borrowed": "201.66666672",
                  "free": "2346.50000000",
                  "interest": "0.00000000",
                  "locked": "0.00000000",
                  "netAsset": "2144.83333328"
                },
                {
                  "asset": "ETH",
                  "borrowed": "0.00000000",
                  "free": "0.00000000",
                  "interest": "0.00000000",
                  "locked": "0.00000000",
                  "netAsset": "0.00000000"
                },
                {
                  "asset": "USDT",
                  "borrowed": "0.00000000",
                  "free": "0.00000000",
                  "interest": "0.00000000",
                  "locked": "0.00000000",
                  "netAsset": "0.00000000"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.get-detail-on-sub-account-39-s-margin-account-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-detail-on-sub-account-39-s-margin-account-for-master-account",
      "name": "Get Detail on Sub-account's Margin Account (For Master Account)"
    },
    {
      "securityType": "",
      "request": "GET /sapi/v1/sub-account/margin/accountSummary",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/sub-account/margin/accountSummary",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "totalAssetOfBtc": "NumberString",
              "totalLiabilityOfBtc": "NumberString",
              "totalNetAssetOfBtc": "NumberString",
              "subAccountList": [
                {
                  "email": "string",
                  "totalAssetOfBtc": "NumberString",
                  "totalLiabilityOfBtc": "NumberString",
                  "totalNetAssetOfBtc": "NumberString"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "totalAssetOfBtc": "4.33333333",
              "totalLiabilityOfBtc": "2.11111112",
              "totalNetAssetOfBtc": "2.22222221",
              "subAccountList": [
                {
                  "email": "123@test.com",
                  "totalAssetOfBtc": "2.11111111",
                  "totalLiabilityOfBtc": "1.11111111",
                  "totalNetAssetOfBtc": "1.00000000"
                },
                {
                  "email": "345@test.com",
                  "totalAssetOfBtc": "2.22222222",
                  "totalLiabilityOfBtc": "1.00000001",
                  "totalNetAssetOfBtc": "1.22222221"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.get-summary-of-sub-account-39-s-margin-account-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-summary-of-sub-account-39-s-margin-account-for-master-account",
      "name": "Get Summary of Sub-account's Margin Account (For Master Account)"
    },
    {
      "securityType": "",
      "request": "POST /sapi/v1/sub-account/futures/enable",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/sub-account/futures/enable",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub-account email"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub-account email"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "email": "string",
              "isFuturesEnabled": "boolean" // true or false
            }
          ],
          "responseExamples": [
            {
              "email": "123@test.com",
              "isFuturesEnabled": true // true or false
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.enable-futures-for-sub-account-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#enable-futures-for-sub-account-for-master-account",
      "name": "Enable Futures for Sub-account (For Master Account)"
    },
    {
      "securityType": "",
      "request": "GET /sapi/v1/sub-account/futures/account",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/sub-account/futures/account",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub-account email"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub-account email"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "email": "string",
              "asset": "string",
              "assets": [
                {
                  "asset": "string",
                  "initialMargin": "NumberString",
                  "maintenanceMargin": "NumberString",
                  "marginBalance": "NumberString",
                  "maxWithdrawAmount": "NumberString",
                  "openOrderInitialMargin": "NumberString",
                  "positionInitialMargin": "NumberString",
                  "unrealizedProfit": "NumberString",
                  "walletBalance": "NumberString"
                }
              ],
              "canDeposit": "boolean",
              "canTrade": "boolean",
              "canWithdraw": "boolean",
              "feeTier": "number",
              "maxWithdrawAmount": "NumberString",
              "totalInitialMargin": "NumberString",
              "totalMaintenanceMargin": "NumberString",
              "totalMarginBalance": "NumberString",
              "totalOpenOrderInitialMargin": "NumberString",
              "totalPositionInitialMargin": "NumberString",
              "totalUnrealizedProfit": "NumberString",
              "totalWalletBalance": "NumberString",
              "updateTime": "number"
            }
          ],
          "responseExamples": [
            {
              "email": "abc@test.com",
              "asset": "USDT",
              "assets": [
                {
                  "asset": "USDT",
                  "initialMargin": "0.00000000",
                  "maintenanceMargin": "0.00000000",
                  "marginBalance": "0.88308000",
                  "maxWithdrawAmount": "0.88308000",
                  "openOrderInitialMargin": "0.00000000",
                  "positionInitialMargin": "0.00000000",
                  "unrealizedProfit": "0.00000000",
                  "walletBalance": "0.88308000"
                }
              ],
              "canDeposit": true,
              "canTrade": true,
              "canWithdraw": true,
              "feeTier": 2,
              "maxWithdrawAmount": "0.88308000",
              "totalInitialMargin": "0.00000000",
              "totalMaintenanceMargin": "0.00000000",
              "totalMarginBalance": "0.88308000",
              "totalOpenOrderInitialMargin": "0.00000000",
              "totalPositionInitialMargin": "0.00000000",
              "totalUnrealizedProfit": "0.00000000",
              "totalWalletBalance": "0.88308000",
              "updateTime": 1576756674610
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.get-detail-on-sub-account-39-s-futures-account-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-detail-on-sub-account-39-s-futures-account-for-master-account",
      "name": "Get Detail on Sub-account's Futures Account (For Master Account)"
    },
    {
      "securityType": "",
      "request": "GET /sapi/v1/sub-account/futures/accountSummary",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/sub-account/futures/accountSummary",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "totalInitialMargin": "NumberString",
              "totalMaintenanceMargin": "NumberString",
              "totalMarginBalance": "NumberString",
              "totalOpenOrderInitialMargin": "NumberString",
              "totalPositionInitialMargin": "NumberString",
              "totalUnrealizedProfit": "NumberString",
              "totalWalletBalance": "NumberString",
              "asset": "string",
              "subAccountList": [
                {
                  "email": "string",
                  "totalInitialMargin": "NumberString",
                  "totalMaintenanceMargin": "NumberString",
                  "totalMarginBalance": "NumberString",
                  "totalOpenOrderInitialMargin": "NumberString",
                  "totalPositionInitialMargin": "NumberString",
                  "totalUnrealizedProfit": "NumberString",
                  "totalWalletBalance": "NumberString",
                  "asset": "string"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "totalInitialMargin": "9.83137400",
              "totalMaintenanceMargin": "0.41568700",
              "totalMarginBalance": "23.03235621",
              "totalOpenOrderInitialMargin": "9.00000000",
              "totalPositionInitialMargin": "0.83137400",
              "totalUnrealizedProfit": "0.03219710",
              "totalWalletBalance": "22.15879444",
              "asset": "USD",
              "subAccountList": [
                {
                  "email": "123@test.com",
                  "totalInitialMargin": "9.00000000",
                  "totalMaintenanceMargin": "0.00000000",
                  "totalMarginBalance": "22.12659734",
                  "totalOpenOrderInitialMargin": "9.00000000",
                  "totalPositionInitialMargin": "0.00000000",
                  "totalUnrealizedProfit": "0.00000000",
                  "totalWalletBalance": "22.12659734",
                  "asset": "USD"
                },
                {
                  "email": "345@test.com",
                  "totalInitialMargin": "0.83137400",
                  "totalMaintenanceMargin": "0.41568700",
                  "totalMarginBalance": "0.90575887",
                  "totalOpenOrderInitialMargin": "0.00000000",
                  "totalPositionInitialMargin": "0.83137400",
                  "totalUnrealizedProfit": "0.03219710",
                  "totalWalletBalance": "0.87356177",
                  "asset": "USD"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.get-summary-of-sub-account-39-s-futures-account-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-summary-of-sub-account-39-s-futures-account-for-master-account",
      "name": "Get Summary of Sub-account's Futures Account (For Master Account)"
    },
    {
      "securityType": "",
      "request": "GET /sapi/v1/sub-account/futures/positionRisk",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/sub-account/futures/positionRisk",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub-account email"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub-account email"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "entryPrice": "NumberString",
                "leverage": "NumberString", // current initial leverage
                "maxNotional": "NumberString", // notional value limit of current initial leverage
                "liquidationPrice": "NumberString",
                "markPrice": "NumberString",
                "positionAmount": "NumberString",
                "symbol": "string",
                "unrealizedProfit": "NumberString"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "entryPrice": "9975.12000",
                "leverage": "50", // current initial leverage
                "maxNotional": "1000000", // notional value limit of current initial leverage
                "liquidationPrice": "7963.54",
                "markPrice": "9973.50770517",
                "positionAmount": "0.010",
                "symbol": "BTCUSDT",
                "unrealizedProfit": "-0.01612295"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.get-futures-position-risk-of-sub-account-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-futures-position-risk-of-sub-account-for-master-account",
      "name": "Get Futures Position-Risk of Sub-account (For Master Account)"
    },
    {
      "securityType": "",
      "request": "POST /sapi/v1/sub-account/futures/transfer",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/sub-account/futures/transfer",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub-account email"
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": "The asset being transferred, e.g., USDT"
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": "The amount to be transferred"
        },
        "type": {
          "name": "type",
          "type": "INT",
          "required": true,
          "description": "1: transfer from subaccount's spot account to its USDT-margined futures account 2: transfer from subaccount's USDT-margined futures account to its spot account 3: transfer from subaccount's spot account to its COIN-margined futures account 4:transfer from subaccount's COIN-margined futures account to its spot account"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub-account email"
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": "The asset being transferred, e.g., USDT"
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": "The amount to be transferred"
            },
            "type": {
              "name": "type",
              "type": "INT",
              "required": true,
              "description": "1: transfer from subaccount's spot account to its USDT-margined futures account 2: transfer from subaccount's USDT-margined futures account to its spot account 3: transfer from subaccount's spot account to its COIN-margined futures account 4:transfer from subaccount's COIN-margined futures account to its spot account"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "txnId": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "txnId": "2966662589"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.futures-transfer-for-sub-account-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#futures-transfer-for-sub-account-for-master-account",
      "name": "Futures Transfer for Sub-account (For Master Account)"
    },
    {
      "securityType": "",
      "request": "POST /sapi/v1/sub-account/margin/transfer",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/sub-account/margin/transfer",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub-account email"
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": "The asset being transferred, e.g., BTC"
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": "The amount to be transferred"
        },
        "type": {
          "name": "type",
          "type": "INT",
          "required": true,
          "description": "1: transfer from subaccount's  spot account to margin account 2: transfer from subaccount's margin account to its spot account"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub-account email"
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": "The asset being transferred, e.g., BTC"
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": "The amount to be transferred"
            },
            "type": {
              "name": "type",
              "type": "INT",
              "required": true,
              "description": "1: transfer from subaccount's  spot account to margin account 2: transfer from subaccount's margin account to its spot account"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "txnId": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "txnId": "2966662589"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.margin-transfer-for-sub-account-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#margin-transfer-for-sub-account-for-master-account",
      "name": "Margin Transfer for Sub-account (For Master Account)"
    },
    {
      "securityType": "",
      "request": "POST /sapi/v1/sub-account/transfer/subToSub",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/sub-account/transfer/subToSub",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "toEmail": {
          "name": "toEmail",
          "type": "string",
          "required": true,
          "description": "Sub-account email"
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "toEmail": {
              "name": "toEmail",
              "type": "string",
              "required": true,
              "description": "Sub-account email"
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "txnId": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "txnId": "2966662589"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.transfer-to-sub-account-of-same-master-for-sub-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#transfer-to-sub-account-of-same-master-for-sub-account",
      "name": "Transfer to Sub-account of Same Master (For Sub-account)"
    },
    {
      "securityType": "",
      "request": "POST /sapi/v1/sub-account/transfer/subToMaster",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/sub-account/transfer/subToMaster",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "txnId": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "txnId": "2966662589"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.transfer-to-master-for-sub-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#transfer-to-master-for-sub-account",
      "name": "Transfer to Master (For Sub-account)"
    },
    {
      "securityType": "",
      "request": "GET /sapi/v1/sub-account/transfer/subUserHistory",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/sub-account/transfer/subUserHistory",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": "If not sent, result of all assets will be returned"
        },
        "type": {
          "name": "type",
          "type": "INT",
          "required": false,
          "description": "1: transfer in, 2: transfer out"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500"
        },
        "returnFailHistory": {
          "name": "returnFailHistory",
          "type": "boolean",
          "required": false,
          "description": "Default False, return PROCESS and SUCCESS status history; If True,return PROCESS and SUCCESS and FAILURE status history"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": "If not sent, result of all assets will be returned"
            },
            "type": {
              "name": "type",
              "type": "INT",
              "required": false,
              "description": "1: transfer in, 2: transfer out"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500"
            },
            "returnFailHistory": {
              "name": "returnFailHistory",
              "type": "boolean",
              "required": false,
              "description": "Default False, return PROCESS and SUCCESS status history; If True,return PROCESS and SUCCESS and FAILURE status history"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "counterParty": "string",
                "email": "string",
                "type": "number", // 1 for transfer in, 2 for transfer out
                "asset": "string",
                "qty": "NumberString",
                "fromAccountType": "string",
                "toAccountType": "string",
                "status": "string", // status: PROCESS / SUCCESS / FAILURE
                "tranId": "number",
                "time": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "counterParty": "master",
                "email": "master@test.com",
                "type": 1, // 1 for transfer in, 2 for transfer out
                "asset": "BTC",
                "qty": "1",
                "fromAccountType": "SPOT",
                "toAccountType": "SPOT",
                "status": "SUCCESS", // status: PROCESS / SUCCESS / FAILURE
                "tranId": 11798835829,
                "time": 1544433325000
              },
              {
                "counterParty": "subAccount",
                "email": "sub2@test.com",
                "type": 1,
                "asset": "ETH",
                "qty": "2",
                "fromAccountType": "SPOT",
                "toAccountType": "COIN_FUTURE",
                "status": "SUCCESS",
                "tranId": 11798829519,
                "time": 1544433326000
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.sub-account-transfer-history-for-sub-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#sub-account-transfer-history-for-sub-account",
      "name": "Sub-account Transfer History (For Sub-account)"
    },
    {
      "securityType": "",
      "request": "POST /sapi/v1/sub-account/universalTransfer",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/sub-account/universalTransfer",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "fromEmail": {
          "name": "fromEmail",
          "type": "string",
          "required": false,
          "description": ""
        },
        "toEmail": {
          "name": "toEmail",
          "type": "string",
          "required": false,
          "description": ""
        },
        "fromAccountType": {
          "name": "fromAccountType",
          "type": "string",
          "required": true,
          "description": "\"SPOT\",\"USDT_FUTURE\",\"COIN_FUTURE\",\"MARGIN\"(Cross),\"ISOLATED_MARGIN\""
        },
        "toAccountType": {
          "name": "toAccountType",
          "type": "string",
          "required": true,
          "description": "\"SPOT\",\"USDT_FUTURE\",\"COIN_FUTURE\",\"MARGIN\"(Cross),\"ISOLATED_MARGIN\""
        },
        "clientTranId": {
          "name": "clientTranId",
          "type": "string",
          "required": false,
          "description": "Must be unique"
        },
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": "Only supported under ISOLATED_MARGIN type"
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "fromEmail": {
              "name": "fromEmail",
              "type": "string",
              "required": false,
              "description": ""
            },
            "toEmail": {
              "name": "toEmail",
              "type": "string",
              "required": false,
              "description": ""
            },
            "fromAccountType": {
              "name": "fromAccountType",
              "type": "string",
              "required": true,
              "description": "\"SPOT\",\"USDT_FUTURE\",\"COIN_FUTURE\",\"MARGIN\"(Cross),\"ISOLATED_MARGIN\""
            },
            "toAccountType": {
              "name": "toAccountType",
              "type": "string",
              "required": true,
              "description": "\"SPOT\",\"USDT_FUTURE\",\"COIN_FUTURE\",\"MARGIN\"(Cross),\"ISOLATED_MARGIN\""
            },
            "clientTranId": {
              "name": "clientTranId",
              "type": "string",
              "required": false,
              "description": "Must be unique"
            },
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": "Only supported under ISOLATED_MARGIN type"
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "tranId": "number",
              "clientTranId": "string"
            }
          ],
          "responseExamples": [
            {
              "tranId": 11945860693,
              "clientTranId": "test"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.universal-transfer-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#universal-transfer-for-master-account",
      "name": "Universal Transfer (For Master Account)"
    },
    {
      "securityType": "",
      "request": "GET /sapi/v1/sub-account/universalTransfer",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/sub-account/universalTransfer",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "fromEmail": {
          "name": "fromEmail",
          "type": "string",
          "required": false,
          "description": ""
        },
        "toEmail": {
          "name": "toEmail",
          "type": "string",
          "required": false,
          "description": ""
        },
        "clientTranId": {
          "name": "clientTranId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": "Default 1"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500, Max 500"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "fromEmail": {
              "name": "fromEmail",
              "type": "string",
              "required": false,
              "description": ""
            },
            "toEmail": {
              "name": "toEmail",
              "type": "string",
              "required": false,
              "description": ""
            },
            "clientTranId": {
              "name": "clientTranId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "Default 1"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500, Max 500"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "result": [
                {
                  "tranId": "number",
                  "fromEmail": "string",
                  "toEmail": "string",
                  "asset": "string",
                  "amount": "NumberString",
                  "createTimeStamp": "number",
                  "fromAccountType": "string",
                  "toAccountType": "string",
                  "status": "string",
                  "clientTranId": "string"
                }
              ],
              "totalCount": "number"
            }
          ],
          "responseExamples": [
            {
              "result": [
                {
                  "tranId": 92275823339,
                  "fromEmail": "abctest@gmail.com",
                  "toEmail": "deftest@gmail.com",
                  "asset": "BNB",
                  "amount": "0.01",
                  "createTimeStamp": 1640317374000,
                  "fromAccountType": "USDT_FUTURE",
                  "toAccountType": "SPOT",
                  "status": "SUCCESS",
                  "clientTranId": "test"
                }
              ],
              "totalCount": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.query-universal-transfer-history-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-universal-transfer-history-for-master-account",
      "name": "Query Universal Transfer History (For Master Account)"
    },
    {
      "securityType": "",
      "request": "GET /sapi/v2/sub-account/futures/account",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v2/sub-account/futures/account",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub-account email"
        },
        "futuresType": {
          "name": "futuresType",
          "type": "1|2",
          "required": true,
          "description": "1:USDT Margined Futures, 2:COIN Margined Futures"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub-account email"
            },
            "futuresType": {
              "name": "futuresType",
              "type": "1",
              "required": true,
              "description": "1:USDT Margined Futures, 2:COIN Margined Futures"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "USDT Margined Futures："
          ],
          "responseTypes": [
            {
              "futureAccountResp": {
                "email": "string",
                "assets": [
                  {
                    "asset": "string",
                    "initialMargin": "NumberString",
                    "maintenanceMargin": "NumberString",
                    "marginBalance": "NumberString",
                    "maxWithdrawAmount": "NumberString",
                    "openOrderInitialMargin": "NumberString",
                    "positionInitialMargin": "NumberString",
                    "unrealizedProfit": "NumberString",
                    "walletBalance": "NumberString"
                  }
                ],
                "canDeposit": "boolean",
                "canTrade": "boolean",
                "canWithdraw": "boolean",
                "feeTier": "number",
                "maxWithdrawAmount": "NumberString",
                "totalInitialMargin": "NumberString",
                "totalMaintenanceMargin": "NumberString",
                "totalMarginBalance": "NumberString",
                "totalOpenOrderInitialMargin": "NumberString",
                "totalPositionInitialMargin": "NumberString",
                "totalUnrealizedProfit": "NumberString",
                "totalWalletBalance": "NumberString",
                "updateTime": "number"
              }
            }
          ],
          "responseExamples": [
            {
              "futureAccountResp": {
                "email": "abc@test.com",
                "assets": [
                  {
                    "asset": "USDT",
                    "initialMargin": "0.00000000",
                    "maintenanceMargin": "0.00000000",
                    "marginBalance": "0.88308000",
                    "maxWithdrawAmount": "0.88308000",
                    "openOrderInitialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "unrealizedProfit": "0.00000000",
                    "walletBalance": "0.88308000"
                  }
                ],
                "canDeposit": true,
                "canTrade": true,
                "canWithdraw": true,
                "feeTier": 2,
                "maxWithdrawAmount": "0.88308000",
                "totalInitialMargin": "0.00000000",
                "totalMaintenanceMargin": "0.00000000",
                "totalMarginBalance": "0.88308000",
                "totalOpenOrderInitialMargin": "0.00000000",
                "totalPositionInitialMargin": "0.00000000",
                "totalUnrealizedProfit": "0.00000000",
                "totalWalletBalance": "0.88308000",
                "updateTime": 1576756674610
              }
            }
          ],
          "name": " (USDT Margined Futures：)",
          "isMinor": false
        },
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub-account email"
            },
            "futuresType": {
              "name": "futuresType",
              "type": "2",
              "required": true,
              "description": "1:USDT Margined Futures, 2:COIN Margined Futures"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "COIN Margined Futures："
          ],
          "responseTypes": [
            {
              "deliveryAccountResp": {
                "email": "string",
                "assets": [
                  {
                    "asset": "string",
                    "initialMargin": "NumberString",
                    "maintenanceMargin": "NumberString",
                    "marginBalance": "NumberString",
                    "maxWithdrawAmount": "NumberString",
                    "openOrderInitialMargin": "NumberString",
                    "positionInitialMargin": "NumberString",
                    "unrealizedProfit": "NumberString",
                    "walletBalance": "NumberString"
                  }
                ],
                "canDeposit": "boolean",
                "canTrade": "boolean",
                "canWithdraw": "boolean",
                "feeTier": "number",
                "updateTime": "number"
              }
            }
          ],
          "responseExamples": [
            {
              "deliveryAccountResp": {
                "email": "abc@test.com",
                "assets": [
                  {
                    "asset": "BTC",
                    "initialMargin": "0.00000000",
                    "maintenanceMargin": "0.00000000",
                    "marginBalance": "0.88308000",
                    "maxWithdrawAmount": "0.88308000",
                    "openOrderInitialMargin": "0.00000000",
                    "positionInitialMargin": "0.00000000",
                    "unrealizedProfit": "0.00000000",
                    "walletBalance": "0.88308000"
                  }
                ],
                "canDeposit": true,
                "canTrade": true,
                "canWithdraw": true,
                "feeTier": 2,
                "updateTime": 1598959682001
              }
            }
          ],
          "name": " (COIN Margined Futures：)",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.get-detail-on-sub-account-39-s-futures-account-v2-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-detail-on-sub-account-39-s-futures-account-v2-for-master-account",
      "name": "Get Detail on Sub-account's Futures Account V2 (For Master Account)"
    },
    {
      "securityType": "",
      "request": "GET /sapi/v2/sub-account/futures/accountSummary",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v2/sub-account/futures/accountSummary",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "futuresType": {
          "name": "futuresType",
          "type": "1|2",
          "required": true,
          "description": "1:USDT Margined Futures, 2:COIN Margined Futures"
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": "default:1"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "default:10, max:20"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "futuresType": {
              "name": "futuresType",
              "type": "1",
              "required": true,
              "description": "1:USDT Margined Futures, 2:COIN Margined Futures"
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "default:1"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "default:10, max:20"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "USDT Margined Futures："
          ],
          "responseTypes": [
            {
              "futureAccountSummaryResp": {
                "totalInitialMargin": "NumberString",
                "totalMaintenanceMargin": "NumberString",
                "totalMarginBalance": "NumberString",
                "totalOpenOrderInitialMargin": "NumberString",
                "totalPositionInitialMargin": "NumberString",
                "totalUnrealizedProfit": "NumberString",
                "totalWalletBalance": "NumberString",
                "asset": "string",
                "subAccountList": [
                  {
                    "email": "string",
                    "totalInitialMargin": "NumberString",
                    "totalMaintenanceMargin": "NumberString",
                    "totalMarginBalance": "NumberString",
                    "totalOpenOrderInitialMargin": "NumberString",
                    "totalPositionInitialMargin": "NumberString",
                    "totalUnrealizedProfit": "NumberString",
                    "totalWalletBalance": "NumberString",
                    "asset": "string"
                  },
                  null
                ]
              }
            }
          ],
          "responseExamples": [
            {
              "futureAccountSummaryResp": {
                "totalInitialMargin": "9.83137400",
                "totalMaintenanceMargin": "0.41568700",
                "totalMarginBalance": "23.03235621",
                "totalOpenOrderInitialMargin": "9.00000000",
                "totalPositionInitialMargin": "0.83137400",
                "totalUnrealizedProfit": "0.03219710",
                "totalWalletBalance": "22.15879444",
                "asset": "USD",
                "subAccountList": [
                  {
                    "email": "123@test.com",
                    "totalInitialMargin": "9.00000000",
                    "totalMaintenanceMargin": "0.00000000",
                    "totalMarginBalance": "22.12659734",
                    "totalOpenOrderInitialMargin": "9.00000000",
                    "totalPositionInitialMargin": "0.00000000",
                    "totalUnrealizedProfit": "0.00000000",
                    "totalWalletBalance": "22.12659734",
                    "asset": "USD"
                  },
                  {
                    "email": "345@test.com",
                    "totalInitialMargin": "0.83137400",
                    "totalMaintenanceMargin": "0.41568700",
                    "totalMarginBalance": "0.90575887",
                    "totalOpenOrderInitialMargin": "0.00000000",
                    "totalPositionInitialMargin": "0.83137400",
                    "totalUnrealizedProfit": "0.03219710",
                    "totalWalletBalance": "0.87356177",
                    "asset": "USD"
                  }
                ]
              }
            }
          ],
          "name": " (USDT Margined Futures：)",
          "isMinor": false
        },
        {
          "params": {
            "futuresType": {
              "name": "futuresType",
              "type": "2",
              "required": true,
              "description": "1:USDT Margined Futures, 2:COIN Margined Futures"
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "default:1"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "default:10, max:20"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "COIN Margined Futures："
          ],
          "responseTypes": [
            {
              "deliveryAccountSummaryResp": {
                "totalMarginBalanceOfBTC": "NumberString",
                "totalUnrealizedProfitOfBTC": "NumberString",
                "totalWalletBalanceOfBTC": "NumberString",
                "asset": "string",
                "subAccountList": [
                  {
                    "email": "string",
                    "totalMarginBalance": "NumberString",
                    "totalUnrealizedProfit": "NumberString",
                    "totalWalletBalance": "NumberString",
                    "asset": "string"
                  },
                  null
                ]
              }
            }
          ],
          "responseExamples": [
            {
              "deliveryAccountSummaryResp": {
                "totalMarginBalanceOfBTC": "25.03221121",
                "totalUnrealizedProfitOfBTC": "0.12233410",
                "totalWalletBalanceOfBTC": "22.15879444",
                "asset": "BTC",
                "subAccountList": [
                  {
                    "email": "123@test.com",
                    "totalMarginBalance": "22.12659734",
                    "totalUnrealizedProfit": "0.00000000",
                    "totalWalletBalance": "22.12659734",
                    "asset": "BTC"
                  },
                  {
                    "email": "345@test.com",
                    "totalMarginBalance": "0.90575887",
                    "totalUnrealizedProfit": "0.03219710",
                    "totalWalletBalance": "0.87356177",
                    "asset": "BTC"
                  }
                ]
              }
            }
          ],
          "name": " (COIN Margined Futures：)",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.get-summary-of-sub-account-39-s-futures-account-v2-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-summary-of-sub-account-39-s-futures-account-v2-for-master-account",
      "name": "Get Summary of Sub-account's Futures Account V2 (For Master Account)"
    },
    {
      "securityType": "",
      "request": "GET /sapi/v2/sub-account/futures/positionRisk",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v2/sub-account/futures/positionRisk",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub-account email"
        },
        "futuresType": {
          "name": "futuresType",
          "type": "1|2",
          "required": true,
          "description": "1:USDT Margined Futures, 2:COIN Margined Futures"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub-account email"
            },
            "futuresType": {
              "name": "futuresType",
              "type": "1",
              "required": true,
              "description": "1:USDT Margined Futures, 2:COIN Margined Futures"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "USDT Margined Futures："
          ],
          "responseTypes": [
            {
              "futurePositionRiskVos": [
                {
                  "entryPrice": "NumberString",
                  "leverage": "NumberString", // current initial leverage
                  "maxNotional": "NumberString", // notional value limit of current initial leverage
                  "liquidationPrice": "NumberString",
                  "markPrice": "NumberString",
                  "positionAmount": "NumberString",
                  "symbol": "string",
                  "unrealizedProfit": "NumberString"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "futurePositionRiskVos": [
                {
                  "entryPrice": "9975.12000",
                  "leverage": "50", // current initial leverage
                  "maxNotional": "1000000", // notional value limit of current initial leverage
                  "liquidationPrice": "7963.54",
                  "markPrice": "9973.50770517",
                  "positionAmount": "0.010",
                  "symbol": "BTCUSDT",
                  "unrealizedProfit": "-0.01612295"
                }
              ]
            }
          ],
          "name": " (USDT Margined Futures：)",
          "isMinor": false
        },
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub-account email"
            },
            "futuresType": {
              "name": "futuresType",
              "type": "2",
              "required": true,
              "description": "1:USDT Margined Futures, 2:COIN Margined Futures"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "COIN Margined Futures："
          ],
          "responseTypes": [
            {
              "deliveryPositionRiskVos": [
                {
                  "entryPrice": "NumberString",
                  "markPrice": "NumberString",
                  "leverage": "NumberString",
                  "isolated": "string",
                  "isolatedWallet": "NumberString",
                  "isolatedMargin": "NumberString",
                  "isAutoAddMargin": "string",
                  "positionSide": "PositionSide",
                  "positionAmount": "NumberString",
                  "symbol": "string",
                  "unrealizedProfit": "NumberString"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "deliveryPositionRiskVos": [
                {
                  "entryPrice": "9975.12000",
                  "markPrice": "9973.50770517",
                  "leverage": "20",
                  "isolated": "false",
                  "isolatedWallet": "9973.50770517",
                  "isolatedMargin": "0.00000000",
                  "isAutoAddMargin": "false",
                  "positionSide": "BOTH",
                  "positionAmount": "1.230",
                  "symbol": "BTCUSD_201225",
                  "unrealizedProfit": "-0.01612295"
                }
              ]
            }
          ],
          "name": " (COIN Margined Futures：)",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.get-futures-position-risk-of-sub-account-v2-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-futures-position-risk-of-sub-account-v2-for-master-account",
      "name": "Get Futures Position-Risk of Sub-account V2 (For Master Account)"
    },
    {
      "securityType": "",
      "request": "GET /sapi/v1/sub-account/subAccountApi/ipRestriction",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/sub-account/subAccountApi/ipRestriction",
      "hmacSHA256": false,
      "weights": {
        "UID": 3000,
        "UID_text": "3000"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub-account email"
        },
        "subAccountApiKey": {
          "name": "subAccountApiKey",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub-account email"
            },
            "subAccountApiKey": {
              "name": "subAccountApiKey",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "ipRestrict": "string",
              "ipList": [
                "string"
              ],
              "updateTime": "number",
              "apiKey": "string"
            }
          ],
          "responseExamples": [
            {
              "ipRestrict": "true",
              "ipList": [
                "69.210.67.14",
                "8.34.21.10"
              ],
              "updateTime": 1636371437000,
              "apiKey": "k5V49ldtn4tszj6W3hystegdfvmGbqDzjmkCtpTvC0G74WhK7yd4rfCTo4lShf"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.get-ip-restriction-for-a-sub-account-api-key-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-ip-restriction-for-a-sub-account-api-key-for-master-account",
      "name": "Get IP Restriction for a Sub-account API Key (For Master Account)"
    },
    {
      "securityType": "",
      "request": "DELETE /sapi/v1/sub-account/subAccountApi/ipRestriction/ipList",
      "requestMethod": "DELETE",
      "requestEndPoint": "/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList",
      "hmacSHA256": false,
      "weights": {
        "UID": 3000,
        "UID_text": "3000"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub-account email"
        },
        "subAccountApiKey": {
          "name": "subAccountApiKey",
          "type": "string",
          "required": true,
          "description": ""
        },
        "ipAddress": {
          "name": "ipAddress",
          "type": "string",
          "required": false,
          "description": "Can be added in batches, separated by commas"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub-account email"
            },
            "subAccountApiKey": {
              "name": "subAccountApiKey",
              "type": "string",
              "required": true,
              "description": ""
            },
            "ipAddress": {
              "name": "ipAddress",
              "type": "string",
              "required": false,
              "description": "Can be added in batches, separated by commas"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "ipRestrict": "string",
              "ipList": [
                "string"
              ],
              "updateTime": "number",
              "apiKey": "string"
            }
          ],
          "responseExamples": [
            {
              "ipRestrict": "true",
              "ipList": [
                "69.210.67.14",
                "8.34.21.10"
              ],
              "updateTime": 1636371437000,
              "apiKey": "k5V49ldtn4tszj6W3hystegdfvmGbqDzjmkCtpTvC0G74WhK7yd4rfCTo4lShf"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.delete-ip-list-for-a-sub-account-api-key-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#delete-ip-list-for-a-sub-account-api-key-for-master-account",
      "name": "Delete IP List For a Sub-account API Key (For Master Account)"
    },
    {
      "securityType": "",
      "request": "POST /sapi/v2/sub-account/subAccountApi/ipRestriction",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v2/sub-account/subAccountApi/ipRestriction",
      "hmacSHA256": false,
      "weights": {
        "UID": 3000,
        "UID_text": "3000"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub-account email"
        },
        "subAccountApiKey": {
          "name": "subAccountApiKey",
          "type": "string",
          "required": true,
          "description": ""
        },
        "status": {
          "name": "status",
          "type": "string",
          "required": true,
          "description": "IP Restriction status. 1 = IP Unrestricted. 2 = Restrict access to trusted IPs only."
        },
        "ipAddress": {
          "name": "ipAddress",
          "type": "string",
          "required": false,
          "description": "Insert static IP in batch, separated by commas."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub-account email"
            },
            "subAccountApiKey": {
              "name": "subAccountApiKey",
              "type": "string",
              "required": true,
              "description": ""
            },
            "status": {
              "name": "status",
              "type": "string",
              "required": true,
              "description": "IP Restriction status. 1 = IP Unrestricted. 2 = Restrict access to trusted IPs only."
            },
            "ipAddress": {
              "name": "ipAddress",
              "type": "string",
              "required": false,
              "description": "Insert static IP in batch, separated by commas."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "status": "NumberString",
              "ipList": [
                "string"
              ],
              "updateTime": "number",
              "apiKey": "string"
            }
          ],
          "responseExamples": [
            {
              "status": "2",
              "ipList": [
                "69.210.67.14",
                "8.34.21.10" //only return if you open IP restriction and input IP address.
              ],
              "updateTime": 1636371437000,
              "apiKey": "k5V49ldtn4tszj6W3hystegdfvmGbqDzjmkCtpTvC0G74WhK7yd4rfCTo4lShf"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.add-ip-restriction-for-sub-account-api-key-for-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#add-ip-restriction-for-sub-account-api-key-for-master-account",
      "name": "Add IP Restriction for Sub-Account API key (For Master Account)"
    },
    {
      "securityType": "",
      "request": "POST /sapi/v1/managed-subaccount/deposit",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/managed-subaccount/deposit",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "toEmail": {
          "name": "toEmail",
          "type": "string",
          "required": true,
          "description": ""
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "toEmail": {
              "name": "toEmail",
              "type": "string",
              "required": true,
              "description": ""
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "tranId": "number"
            }
          ],
          "responseExamples": [
            {
              "tranId": 66157362489
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.deposit-assets-into-the-managed-sub-account-for-investor-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#deposit-assets-into-the-managed-sub-account-for-investor-master-account",
      "name": "Deposit Assets Into The Managed Sub-account(For Investor Master Account)"
    },
    {
      "securityType": "",
      "request": "GET /sapi/v1/managed-subaccount/asset",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/managed-subaccount/asset",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "coin": "string",
                "name": "string",
                "totalBalance": "NumberString",
                "availableBalance": "NumberString",
                "inOrder": "NumberString",
                "btcValue": "NumberString"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "coin": "INJ",
                "name": "Injective Protocol",
                "totalBalance": "0",
                "availableBalance": "0",
                "inOrder": "0",
                "btcValue": "0"
              },
              {
                "coin": "FILDOWN",
                "name": "FILDOWN",
                "totalBalance": "0",
                "availableBalance": "0",
                "inOrder": "0",
                "btcValue": "0"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.query-managed-sub-account-asset-details-for-investor-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-managed-sub-account-asset-details-for-investor-master-account",
      "name": "Query Managed Sub-account Asset Details(For Investor Master Account)"
    },
    {
      "securityType": "",
      "request": "POST /sapi/v1/managed-subaccount/withdraw",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/managed-subaccount/withdraw",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "fromEmail": {
          "name": "fromEmail",
          "type": "string",
          "required": true,
          "description": ""
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "transferDate": {
          "name": "transferDate",
          "type": "LONG",
          "required": false,
          "description": "Withdrawals is automatically occur on the transfer date(UTC0). If a date is not selected, the withdrawal occurs right now"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "fromEmail": {
              "name": "fromEmail",
              "type": "string",
              "required": true,
              "description": ""
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "transferDate": {
              "name": "transferDate",
              "type": "LONG",
              "required": false,
              "description": "Withdrawals is automatically occur on the transfer date(UTC0). If a date is not selected, the withdrawal occurs right now"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "tranId": "number"
            }
          ],
          "responseExamples": [
            {
              "tranId": 66157362489
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.withdrawl-assets-from-the-managed-sub-account-for-investor-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#withdrawl-assets-from-the-managed-sub-account-for-investor-master-account",
      "name": "Withdrawl Assets From The Managed Sub-account(For Investor Master Account)"
    },
    {
      "securityType": "",
      "request": "GET /sapi/v1/managed-subaccount/accountSnapshot",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/managed-subaccount/accountSnapshot",
      "hmacSHA256": false,
      "weights": {
        "IP": 2400,
        "IP_text": "2400"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": ""
        },
        "type": {
          "name": "type",
          "type": "string",
          "required": true,
          "description": "\"SPOT\", \"MARGIN\"（cross）, \"FUTURES\"（UM）"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "min 7, max 30, default 7"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": ""
            },
            "type": {
              "name": "type",
              "type": "string",
              "required": true,
              "description": "\"SPOT\", \"MARGIN\"（cross）, \"FUTURES\"（UM）"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "min 7, max 30, default 7"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "",
            "",
            ""
          ],
          "responseTypes": [
            {
              "code": "number", // 200 for success; others are error codes
              "msg": "string", // error message
              "snapshotVos": [
                {
                  "data": {
                    "balances": [
                      {
                        "asset": "string",
                        "free": "NumberString",
                        "locked": "NumberString"
                      },
                      null
                    ],
                    "totalAssetOfBtc": "NumberString"
                  },
                  "type": "string",
                  "updateTime": "number"
                }
              ]
            },
            {
              "code": "number", // 200 for success; others are error codes
              "msg": "string", // error message
              "snapshotVos": [
                {
                  "data": {
                    "marginLevel": "NumberString",
                    "totalAssetOfBtc": "NumberString",
                    "totalLiabilityOfBtc": "NumberString",
                    "totalNetAssetOfBtc": "NumberString",
                    "userAssets": [
                      {
                        "asset": "string",
                        "borrowed": "NumberString",
                        "free": "NumberString",
                        "interest": "NumberString",
                        "locked": "NumberString",
                        "netAsset": "NumberString"
                      }
                    ]
                  },
                  "type": "string",
                  "updateTime": "number"
                }
              ]
            },
            {
              "code": "number", // 200 for success; others are error codes
              "msg": "string", // error message
              "snapshotVos": [
                {
                  "data": {
                    "assets": [
                      {
                        "asset": "string",
                        "marginBalance": "NumberString",
                        "walletBalance": "NumberString"
                      }
                    ],
                    "position": [
                      {
                        "entryPrice": "NumberString",
                        "markPrice": "NumberString",
                        "positionAmt": "NumberString",
                        "symbol": "string",
                        "unRealizedProfit": "NumberString" // Only show the value at the time of opening the position
                      }
                    ]
                  },
                  "type": "string",
                  "updateTime": "number"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "code": 200, // 200 for success; others are error codes
              "msg": "", // error message
              "snapshotVos": [
                {
                  "data": {
                    "balances": [
                      {
                        "asset": "BTC",
                        "free": "0.09905021",
                        "locked": "0.00000000"
                      },
                      {
                        "asset": "USDT",
                        "free": "1.89109409",
                        "locked": "0.00000000"
                      }
                    ],
                    "totalAssetOfBtc": "0.09942700"
                  },
                  "type": "spot",
                  "updateTime": 1576281599000
                }
              ]
            },
            {
              "code": 200, // 200 for success; others are error codes
              "msg": "", // error message
              "snapshotVos": [
                {
                  "data": {
                    "marginLevel": "2748.02909813",
                    "totalAssetOfBtc": "0.00274803",
                    "totalLiabilityOfBtc": "0.00000100",
                    "totalNetAssetOfBtc": "0.00274750",
                    "userAssets": [
                      {
                        "asset": "XRP",
                        "borrowed": "0.00000000",
                        "free": "1.00000000",
                        "interest": "0.00000000",
                        "locked": "0.00000000",
                        "netAsset": "1.00000000"
                      }
                    ]
                  },
                  "type": "margin",
                  "updateTime": 1576281599000
                }
              ]
            },
            {
              "code": 200, // 200 for success; others are error codes
              "msg": "", // error message
              "snapshotVos": [
                {
                  "data": {
                    "assets": [
                      {
                        "asset": "USDT",
                        "marginBalance": "118.99782335",
                        "walletBalance": "120.23811389"
                      }
                    ],
                    "position": [
                      {
                        "entryPrice": "7130.41000000",
                        "markPrice": "7257.66239673",
                        "positionAmt": "0.01000000",
                        "symbol": "BTCUSDT",
                        "unRealizedProfit": "1.24029054" // Only show the value at the time of opening the position
                      }
                    ]
                  },
                  "type": "futures",
                  "updateTime": 1576281599000
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.query-managed-sub-account-snapshot-for-investor-master-account",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-managed-sub-account-snapshot-for-investor-master-account",
      "name": "Query Managed Sub-account Snapshot(For Investor Master Account)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/managed-subaccount/queryTransLogForInvestor",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/managed-subaccount/queryTransLogForInvestor",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Managed Sub Account Email"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": true,
          "description": "Start Time"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": true,
          "description": "End Time (The start time and end time interval cannot exceed half a year)"
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": true,
          "description": "Page"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": true,
          "description": "Limit (Max: 500)"
        },
        "transfers": {
          "name": "transfers",
          "type": "string",
          "required": false,
          "description": "Transfer Direction (from/to)"
        },
        "transferFunctionAccountType": {
          "name": "transferFunctionAccountType",
          "type": "string",
          "required": false,
          "description": "Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)"
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Managed Sub Account Email"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": true,
              "description": "Start Time"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": true,
              "description": "End Time (The start time and end time interval cannot exceed half a year)"
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": true,
              "description": "Page"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": true,
              "description": "Limit (Max: 500)"
            },
            "transfers": {
              "name": "transfers",
              "type": "string",
              "required": false,
              "description": "Transfer Direction (from/to)"
            },
            "transferFunctionAccountType": {
              "name": "transferFunctionAccountType",
              "type": "string",
              "required": false,
              "description": "Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "managerSubTransferHistoryVos": [
                {
                  "fromEmail": "string",
                  "fromAccountType": "string",
                  "toEmail": "string",
                  "toAccountType": "string",
                  "asset": "string",
                  "amount": "NumberString",
                  "scheduledData": "number",
                  "createTime": "number",
                  "status": "string",
                  "tranId": "number"
                },
                null
              ],
              "count": "number"
            }
          ],
          "responseExamples": [
            {
              "managerSubTransferHistoryVos": [
                {
                  "fromEmail": "test_0_virtual@kq3kno9imanagedsub.com",
                  "fromAccountType": "SPOT",
                  "toEmail": "wdywl0lddakh@test.com",
                  "toAccountType": "SPOT",
                  "asset": "BNB",
                  "amount": "0.01",
                  "scheduledData": 1679416673000,
                  "createTime": 1679416673000,
                  "status": "SUCCESS",
                  "tranId": 91077779
                },
                {
                  "fromEmail": "wdywl0lddakh@test.com",
                  "fromAccountType": "SPOT",
                  "toEmail": "test_0_virtual@kq3kno9imanagedsub.com",
                  "toAccountType": "SPOT",
                  "asset": "BNB",
                  "amount": "1",
                  "scheduledData": 1679416616000,
                  "createTime": 1679416616000,
                  "status": "SUCCESS",
                  "tranId": 91077676
                }
              ],
              "count": 2
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.query-managed-sub-account-transfer-log-for-investor-master-account-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-managed-sub-account-transfer-log-for-investor-master-account-user_data",
      "name": "Query Managed Sub Account Transfer Log (For Investor Master Account) (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/managed-subaccount/queryTransLogForTradeParent",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/managed-subaccount/queryTransLogForTradeParent",
      "hmacSHA256": false,
      "weights": {
        "UID": 60,
        "UID_text": "60"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Managed Sub Account Email"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": true,
          "description": "Start Time"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": true,
          "description": "End Time (The start time and end time interval cannot exceed half a year)"
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": true,
          "description": "Page"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": true,
          "description": "Limit (Max: 500)"
        },
        "transfers": {
          "name": "transfers",
          "type": "string",
          "required": false,
          "description": "Transfer Direction (FROM/TO)"
        },
        "transferFunctionAccountType": {
          "name": "transferFunctionAccountType",
          "type": "string",
          "required": false,
          "description": "Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)"
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Managed Sub Account Email"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": true,
              "description": "Start Time"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": true,
              "description": "End Time (The start time and end time interval cannot exceed half a year)"
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": true,
              "description": "Page"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": true,
              "description": "Limit (Max: 500)"
            },
            "transfers": {
              "name": "transfers",
              "type": "string",
              "required": false,
              "description": "Transfer Direction (FROM/TO)"
            },
            "transferFunctionAccountType": {
              "name": "transferFunctionAccountType",
              "type": "string",
              "required": false,
              "description": "Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "managerSubTransferHistoryVos": [
                {
                  "fromEmail": "string",
                  "fromAccountType": "string",
                  "toEmail": "string",
                  "toAccountType": "string",
                  "asset": "string",
                  "amount": "NumberString",
                  "scheduledData": "number",
                  "createTime": "number",
                  "status": "string",
                  "tranId": "number"
                },
                null
              ],
              "count": "number"
            }
          ],
          "responseExamples": [
            {
              "managerSubTransferHistoryVos": [
                {
                  "fromEmail": "test_0_virtual@kq3kno9imanagedsub.com",
                  "fromAccountType": "SPOT",
                  "toEmail": "wdywl0lddakh@test.com",
                  "toAccountType": "SPOT",
                  "asset": "BNB",
                  "amount": "0.01",
                  "scheduledData": 1679416673000,
                  "createTime": 1679416673000,
                  "status": "SUCCESS",
                  "tranId": 91077779
                },
                {
                  "fromEmail": "wdywl0lddakh@test.com",
                  "fromAccountType": "SPOT",
                  "toEmail": "test_0_virtual@kq3kno9imanagedsub.com",
                  "toAccountType": "SPOT",
                  "asset": "BNB",
                  "amount": "1",
                  "scheduledData": 1679416616000,
                  "createTime": 1679416616000,
                  "status": "SUCCESS",
                  "tranId": 91077676
                }
              ],
              "count": 2
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.query-managed-sub-account-transfer-log-for-trading-team-master-account-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-managed-sub-account-transfer-log-for-trading-team-master-account-user_data",
      "name": "Query Managed Sub Account Transfer Log (For Trading Team Master Account) (USER_DATA)"
    },
    {
      "description": "Investor can use this api to query managed sub account futures asset details",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/managed-subaccount/fetch-future-asset",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/managed-subaccount/fetch-future-asset",
      "hmacSHA256": false,
      "weights": {
        "UID": 60,
        "UID_text": "60"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Managed Sub Account Email"
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Managed Sub Account Email"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "NumberString",
              "message": "string",
              "snapshotVos": [
                {
                  "type": "string",
                  "updateTime": "number",
                  "data": {
                    "assets": [
                      {
                        "asset": "string",
                        "marginBalance": "number",
                        "walletBalance": "number"
                      }
                    ],
                    "position": [
                      {
                        "symbol": "string",
                        "entryPrice": "number",
                        "markPrice": "number",
                        "positionAmt": "number"
                      }
                    ]
                  }
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "code": "200",
              "message": "OK",
              "snapshotVos": [
                {
                  "type": "FUTURES",
                  "updateTime": 1672893855394,
                  "data": {
                    "assets": [
                      {
                        "asset": "USDT",
                        "marginBalance": 100,
                        "walletBalance": 120
                      }
                    ],
                    "position": [
                      {
                        "symbol": "BTCUSDT",
                        "entryPrice": 17000,
                        "markPrice": 17000,
                        "positionAmt": 0.0001
                      }
                    ]
                  }
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.query-managed-sub-account-futures-asset-details-for-investor-master-account-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-managed-sub-account-futures-asset-details-for-investor-master-account-user_data",
      "name": "Query Managed Sub-account Futures Asset Details(For Investor Master Account)(USER_DATA)"
    },
    {
      "description": "Investor can use this api to query managed sub account margin asset details",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/managed-subaccount/marginAsset",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/managed-subaccount/marginAsset",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Managed Sub Account Email"
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Managed Sub Account Email"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "marginLevel": "NumberString",
              "totalAssetOfBtc": "NumberString",
              "totalLiabilityOfBtc": "NumberString",
              "totalNetAssetOfBtc": "NumberString",
              "userAssets": [
                {
                  "asset": "string",
                  "borrowed": "NumberString",
                  "free": "NumberString",
                  "interest": "NumberString",
                  "locked": "NumberString",
                  "netAsset": "NumberString"
                },
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "marginLevel": "999",
              "totalAssetOfBtc": "0",
              "totalLiabilityOfBtc": "0",
              "totalNetAssetOfBtc": "0",
              "userAssets": [
                {
                  "asset": "MATIC",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "VET",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "BAKE",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "SHIB",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "USDT",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "DOGE",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "AAVE",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "ONT",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "XRP",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "XLM",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "LINK",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "QTUM",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "ETHW",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "XTZ",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "LUNA",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "EUR",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "IOST",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "BCH",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "BTC",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "IOTA",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "CREAM",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "BAT",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "BNB",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "ETH",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "ZEC",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "USDC",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "LTC",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "BUSD",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "ZIL",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                },
                {
                  "asset": "THETA",
                  "borrowed": "0",
                  "free": "0",
                  "interest": "0",
                  "locked": "0",
                  "netAsset": "0"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.query-managed-sub-account-margin-asset-details-for-investor-master-account-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-managed-sub-account-margin-asset-details-for-investor-master-account-user_data",
      "name": "Query Managed Sub-account Margin Asset Details (For Investor Master Account) (USER_DATA)"
    },
    {
      "description": "Fetch sub-account assets",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v4/sub-account/assets",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v4/sub-account/assets",
      "hmacSHA256": false,
      "weights": {
        "UID": 60,
        "UID_text": "60"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Managed Sub Account Email"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Managed Sub Account Email"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "balances": [
                {
                  "asset": "string",
                  "free": "NumberString",
                  "locked": "NumberString"
                },
                null,
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "balances": [
                {
                  "asset": "ADA",
                  "free": "10000",
                  "locked": "0"
                },
                {
                  "asset": "BNB",
                  "free": "10003",
                  "locked": "0"
                },
                {
                  "asset": "BTC",
                  "free": "11467.6399",
                  "locked": "0"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.query-sub-account-assets-for-master-account-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-sub-account-assets-for-master-account-user_data",
      "name": "Query Sub-account Assets (For Master Account)(USER_DATA)"
    },
    {
      "description": "Get investor's managed sub-account list.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/managed-subaccount/info",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/managed-subaccount/info",
      "hmacSHA256": false,
      "weights": {
        "UID": 60,
        "UID_text": "60"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": false,
          "description": "Managed sub-account email"
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": "Default value: 1"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default value: 20, Max value: 20"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": false,
              "description": "Managed sub-account email"
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "Default value: 1"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default value: 20, Max value: 20"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number",
              "managerSubUserInfoVoList": [
                {
                  "rootUserId": "number",
                  "managersubUserId": "number",
                  "bindParentUserId": "number",
                  "email": "string",
                  "insertTimeStamp": "number",
                  "bindParentEmail": "string",
                  "isSubUserEnabled": "boolean",
                  "isUserActive": "boolean",
                  "isMarginEnabled": "boolean",
                  "isFutureEnabled": "boolean",
                  "isSignedLVTRiskAgreement": "boolean"
                },
                null,
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 3,
              "managerSubUserInfoVoList": [
                {
                  "rootUserId": 1000138475670,
                  "managersubUserId": 1000137842513,
                  "bindParentUserId": 1000138475669,
                  "email": "test_0_virtual@kq3kno9imanagedsub.com",
                  "insertTimeStamp": 1678435149000,
                  "bindParentEmail": "wdyw8xsh8pey@test.com",
                  "isSubUserEnabled": true,
                  "isUserActive": true,
                  "isMarginEnabled": false,
                  "isFutureEnabled": false,
                  "isSignedLVTRiskAgreement": false
                },
                {
                  "rootUserId": 1000138475670,
                  "managersubUserId": 1000137842514,
                  "bindParentUserId": 1000138475669,
                  "email": "test_1_virtual@4qd2u7zxmanagedsub.com",
                  "insertTimeStamp": 1678435152000,
                  "bindParentEmail": "wdyw8xsh8pey@test.com",
                  "isSubUserEnabled": true,
                  "isUserActive": true,
                  "isMarginEnabled": false,
                  "isFutureEnabled": false,
                  "isSignedLVTRiskAgreement": false
                },
                {
                  "rootUserId": 1000138475670,
                  "managersubUserId": 1000137842515,
                  "bindParentUserId": 1000138475669,
                  "email": "test_2_virtual@akc05o8hmanagedsub.com",
                  "insertTimeStamp": 1678435153000,
                  "bindParentEmail": "wdyw8xsh8pey@test.com",
                  "isSubUserEnabled": true,
                  "isUserActive": true,
                  "isMarginEnabled": false,
                  "isFutureEnabled": false,
                  "isSignedLVTRiskAgreement": false
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.query-managed-sub-account-list-for-investor-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-managed-sub-account-list-for-investor-user_data",
      "name": "Query Managed Sub-account List (For Investor)(USER_DATA)"
    },
    {
      "description": "Query Sub-account Transaction statistics (For Master Account).",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/sub-account/transaction-statistics",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/sub-account/transaction-statistics",
      "hmacSHA256": false,
      "weights": {
        "UID": 60,
        "UID_text": "60"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub user email"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub user email"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "recent30BtcTotal": "NumberString",
              "recent30BtcFuturesTotal": "NumberString",
              "recent30BtcMarginTotal": "NumberString",
              "recent30BusdTotal": "NumberString",
              "recent30BusdFuturesTotal": "NumberString",
              "recent30BusdMarginTotal": "NumberString",
              "tradeInfoVos": [
                {
                  "userId": "number",
                  "btc": "number",
                  "btcFutures": "number",
                  "btcMargin": "number",
                  "busd": "number",
                  "busdFutures": "number",
                  "busdMargin": "number",
                  "date": "number"
                },
                null,
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "recent30BtcTotal": "0",
              "recent30BtcFuturesTotal": "0",
              "recent30BtcMarginTotal": "0",
              "recent30BusdTotal": "0",
              "recent30BusdFuturesTotal": "0",
              "recent30BusdMarginTotal": "0",
              "tradeInfoVos": [
                {
                  "userId": 1000138138384,
                  "btc": 0,
                  "btcFutures": 0,
                  "btcMargin": 0,
                  "busd": 0,
                  "busdFutures": 0,
                  "busdMargin": 0,
                  "date": 1676851200000
                },
                {
                  "userId": 1000138138384,
                  "btc": 0,
                  "btcFutures": 0,
                  "btcMargin": 0,
                  "busd": 0,
                  "busdFutures": 0,
                  "busdMargin": 0,
                  "date": 1677110400000
                },
                {
                  "userId": 1000138138384,
                  "btc": 0,
                  "btcFutures": 0,
                  "btcMargin": 0,
                  "busd": 0,
                  "busdFutures": 0,
                  "busdMargin": 0,
                  "date": 1677369600000
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.query-sub-account-transaction-statistics-for-master-account-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-sub-account-transaction-statistics-for-master-account-user_data",
      "name": "Query Sub-account Transaction Statistics (For Master Account) (USER_DATA)"
    },
    {
      "description": "Get investor's managed sub-account deposit address.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/managed-subaccount/deposit/address",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/managed-subaccount/deposit/address",
      "hmacSHA256": false,
      "weights": {
        "UID": 1,
        "UID_text": "1"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub user email"
        },
        "coin": {
          "name": "coin",
          "type": "string",
          "required": true,
          "description": ""
        },
        "network": {
          "name": "network",
          "type": "string",
          "required": false,
          "description": "networks can be found in GET /sapi/v1/capital/deposit/address"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub user email"
            },
            "coin": {
              "name": "coin",
              "type": "string",
              "required": true,
              "description": ""
            },
            "network": {
              "name": "network",
              "type": "string",
              "required": false,
              "description": "networks can be found in GET /sapi/v1/capital/deposit/address"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "coin": "string",
              "address": "NumberString",
              "tag": "string",
              "url": "string"
            }
          ],
          "responseExamples": [
            {
              "coin": "USDT",
              "address": "0x206c22d833bb0bb2102da6b7c7d4c3eb14bcf73d",
              "tag": "",
              "url": "https://etherscan.io/address/0x206c22d833bb0bb2102da6b7c7d4c3eb14bcf73d"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.get-managed-sub-account-deposit-address-for-investor-master-account-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-managed-sub-account-deposit-address-for-investor-master-account-user_data",
      "name": "Get Managed Sub-account Deposit Address (For Investor Master Account) (USER_DATA)"
    },
    {
      "description": "Enable Options for Sub-account (For Master Account).",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/sub-account/eoptions/enable",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/sub-account/eoptions/enable",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "email": {
          "name": "email",
          "type": "string",
          "required": true,
          "description": "Sub user email"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "email": {
              "name": "email",
              "type": "string",
              "required": true,
              "description": "Sub user email"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "email": "string",
              "isEOptionsEnabled": "boolean" // true or false
            }
          ],
          "responseExamples": [
            {
              "email": "123@test.com",
              "isEOptionsEnabled": true // true or false
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.enable-options-for-sub-account-for-master-account-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#enable-options-for-sub-account-for-master-account-user_data",
      "name": "Enable Options for Sub-account (For Master Account)(USER_DATA)"
    },
    {
      "description": "Query Managed Sub Account Transfer Log (For Trading Team Sub Account)",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/managed-subaccount/query-trans-log",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/managed-subaccount/query-trans-log",
      "hmacSHA256": false,
      "weights": {
        "UID": 60,
        "UID_text": "60"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": true,
          "description": "Start Time"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": true,
          "description": "End Time (The start time and end time interval cannot exceed half a year)"
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": true,
          "description": "Page"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": true,
          "description": "Limit (Max: 500)"
        },
        "transfers": {
          "name": "transfers",
          "type": "string",
          "required": false,
          "description": "Transfer Direction (FROM/TO)"
        },
        "transferFunctionAccountType": {
          "name": "transferFunctionAccountType",
          "type": "string",
          "required": false,
          "description": "Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": true,
              "description": "Start Time"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": true,
              "description": "End Time (The start time and end time interval cannot exceed half a year)"
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": true,
              "description": "Page"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": true,
              "description": "Limit (Max: 500)"
            },
            "transfers": {
              "name": "transfers",
              "type": "string",
              "required": false,
              "description": "Transfer Direction (FROM/TO)"
            },
            "transferFunctionAccountType": {
              "name": "transferFunctionAccountType",
              "type": "string",
              "required": false,
              "description": "Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "managerSubTransferHistoryVos": [
                {
                  "fromEmail": "string",
                  "fromAccountType": "string",
                  "toEmail": "string",
                  "toAccountType": "string",
                  "asset": "string",
                  "amount": "NumberString",
                  "scheduledData": "number",
                  "createTime": "number",
                  "status": "string",
                  "tranId": "number"
                },
                null
              ],
              "count": "number"
            }
          ],
          "responseExamples": [
            {
              "managerSubTransferHistoryVos": [
                {
                  "fromEmail": "test_0_virtual@kq3kno9imanagedsub.com",
                  "fromAccountType": "SPOT",
                  "toEmail": "wdywl0lddakh@test.com",
                  "toAccountType": "SPOT",
                  "asset": "BNB",
                  "amount": "0.01",
                  "scheduledData": 1679416673000,
                  "createTime": 1679416673000,
                  "status": "SUCCESS",
                  "tranId": 91077779
                },
                {
                  "fromEmail": "wdywl0lddakh@test.com",
                  "fromAccountType": "SPOT",
                  "toEmail": "test_0_virtual@kq3kno9imanagedsub.com",
                  "toAccountType": "SPOT",
                  "asset": "BNB",
                  "amount": "1",
                  "scheduledData": 1679416616000,
                  "createTime": 1679416616000,
                  "status": "SUCCESS",
                  "tranId": 91077676
                }
              ],
              "count": 2
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Sub-Account Endpoints",
      "path": "toc.sub-account-endpoints.query-managed-sub-account-transfer-log-for-trading-team-sub-account-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-managed-sub-account-transfer-log-for-trading-team-sub-account-user_data",
      "name": "Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)"
    },
    {
      "description": "Test connectivity to the Rest API.",
      "securityType": "MARKET_DATA",
      "request": "GET /api/v3/ping",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/ping",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.test-connectivity",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#test-connectivity",
      "name": "Test Connectivity"
    },
    {
      "description": "Test connectivity to the Rest API and get the current server time.",
      "securityType": "MARKET_DATA",
      "request": "GET /api/v3/time",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/time",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "serverTime": "number"
            }
          ],
          "responseExamples": [
            {
              "serverTime": 1499827319559
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.check-server-time",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#check-server-time",
      "name": "Check Server Time"
    },
    {
      "description": "Current exchange trading rules and symbol information",
      "securityType": "MARKET_DATA",
      "request": "GET /api/v3/exchangeInfo",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/exchangeInfo",
      "hmacSHA256": false,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "symbols": {
          "name": "symbols",
          "type": "string[]",
          "required": false,
          "description": ""
        },
        "permissions": {
          "name": "permissions",
          "type": "Permission[]",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "symbols": {
              "name": "symbols",
              "type": "string[]",
              "required": false,
              "description": ""
            },
            "permissions": {
              "name": "permissions",
              "type": "Permission[]",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "timezone": "string",
              "serverTime": "number",
              "rateLimits": [
                {
                  //These are defined in the `ENUM definitions` section under `Rate Limiters (rateLimitType)`.
                  //All limits are optional
                }
              ],
              "exchangeFilters": [
                //These are the defined filters in the `Filters` section.
                //All filters are optional.
              ],
              "symbols": [
                {
                  "symbol": "string",
                  "status": "string",
                  "baseAsset": "string",
                  "baseAssetPrecision": "number",
                  "quoteAsset": "string",
                  "quotePrecision": "number",
                  "quoteAssetPrecision": "number",
                  "orderTypes": [
                    "OrderType"
                  ],
                  "icebergAllowed": "boolean",
                  "ocoAllowed": "boolean",
                  "quoteOrderQtyMarketAllowed": "boolean",
                  "allowTrailingStop": "boolean",
                  "cancelReplaceAllowed": "boolean",
                  "isSpotTradingAllowed": "boolean",
                  "isMarginTradingAllowed": "boolean",
                  "filters": [
                    //These are defined in the Filters section.
                    //All filters are optional
                  ],
                  "permissions": [
                    "Permission"
                  ],
                  "permissionSets": [
                    [
                      "string"
                    ]
                  ],
                  "defaultSelfTradePreventionMode": "string",
                  "allowedSelfTradePreventionModes": [
                    "string"
                  ]
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "timezone": "UTC",
              "serverTime": 1565246363776,
              "rateLimits": [
                {
                  //These are defined in the `ENUM definitions` section under `Rate Limiters (rateLimitType)`.
                  //All limits are optional
                }
              ],
              "exchangeFilters": [
                //These are the defined filters in the `Filters` section.
                //All filters are optional.
              ],
              "symbols": [
                {
                  "symbol": "ETHBTC",
                  "status": "TRADING",
                  "baseAsset": "ETH",
                  "baseAssetPrecision": 8,
                  "quoteAsset": "BTC",
                  "quotePrecision": 8,
                  "quoteAssetPrecision": 8,
                  "orderTypes": [
                    "LIMIT",
                    "LIMIT_MAKER",
                    "MARKET",
                    "STOP_LOSS",
                    "STOP_LOSS_LIMIT",
                    "TAKE_PROFIT",
                    "TAKE_PROFIT_LIMIT"
                  ],
                  "icebergAllowed": true,
                  "ocoAllowed": true,
                  "quoteOrderQtyMarketAllowed": true,
                  "allowTrailingStop": false,
                  "cancelReplaceAllowed": false,
                  "isSpotTradingAllowed": true,
                  "isMarginTradingAllowed": true,
                  "filters": [
                    //These are defined in the Filters section.
                    //All filters are optional
                  ],
                  "permissions": [],
                  "permissionSets": [
                    [
                      "SPOT",
                      "MARGIN"
                    ]
                  ],
                  "defaultSelfTradePreventionMode": "NONE",
                  "allowedSelfTradePreventionModes": [
                    "NONE"
                  ]
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.exchange-information",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#exchange-information",
      "name": "Exchange Information"
    },
    {
      "description": "Adjusted based on the limit:",
      "securityType": "MARKET_DATA",
      "request": "GET /api/v3/depth",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/depth",
      "hmacSHA256": false,
      "weights": {
        "IP": "\n(params :QueryStruct) =>\n    typeof(params[\"limit\"])==\"number\"\n        ? [[1001,250],[501,50],[101,25],[1,5]].find((item,i)=> (params[\"limit\"] as number)>=item[0] || i==0)! [1]\n        : (()=>{throw new Error(\"Parameter 'limit' is not a number\")})()",
        "IP_text": "Adjusted based on the limit:\nLimit     Weight\n1-100     5     \n101-500   25    \n501-1000  50    \n1001-5000 250   "
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 100; max 5000.  If limit > 5000, then the response will truncate to 5000."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 100; max 5000.  If limit > 5000, then the response will truncate to 5000."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "lastUpdateId": "number",
              "bids": [
                [
                  "NumberString" // PRICE
                ]
              ],
              "asks": [
                [
                  "NumberString"
                ]
              ]
            }
          ],
          "responseExamples": [
            {
              "lastUpdateId": 1027024,
              "bids": [
                [
                  "4.00000000", // PRICE
                  "431.00000000" // QTY
                ]
              ],
              "asks": [
                [
                  "4.00000200",
                  "12.00000000"
                ]
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.order-book",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#order-book",
      "name": "Order Book"
    },
    {
      "description": "Get recent trades.",
      "securityType": "MARKET_DATA",
      "request": "GET /api/v3/trades",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/trades",
      "hmacSHA256": false,
      "weights": {
        "IP": 25,
        "IP_text": "25"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "id": "number",
                "price": "NumberString",
                "qty": "NumberString",
                "quoteQty": "NumberString",
                "time": "number",
                "isBuyerMaker": "boolean",
                "isBestMatch": "boolean"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "id": 28457,
                "price": "4.00000100",
                "qty": "12.00000000",
                "quoteQty": "48.000012",
                "time": 1499865549590,
                "isBuyerMaker": true,
                "isBestMatch": true
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.recent-trades-list",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#recent-trades-list",
      "name": "Recent Trades List"
    },
    {
      "description": "Get older market trades.",
      "securityType": "MARKET_DATA",
      "request": "GET /api/v3/historicalTrades",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/historicalTrades",
      "hmacSHA256": false,
      "weights": {
        "IP": 25,
        "IP_text": "25"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        },
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "Trade id to fetch from. Default gets most recent trades."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            },
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "Trade id to fetch from. Default gets most recent trades."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "id": "number",
                "price": "NumberString",
                "qty": "NumberString",
                "quoteQty": "NumberString",
                "time": "number", // Trade executed timestamp, as same as `T` in the stream
                "isBuyerMaker": "boolean",
                "isBestMatch": "boolean"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "id": 28457,
                "price": "4.00000100",
                "qty": "12.00000000",
                "quoteQty": "48.000012",
                "time": 1499865549590, // Trade executed timestamp, as same as `T` in the stream
                "isBuyerMaker": true,
                "isBestMatch": true
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.old-trade-lookup",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#old-trade-lookup",
      "name": "Old Trade Lookup"
    },
    {
      "description": "Get compressed, aggregate trades. Trades that fill at the time, from the same\norder, with the same price will have the quantity aggregated.",
      "securityType": "MARKET_DATA",
      "request": "GET /api/v3/aggTrades",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/aggTrades",
      "hmacSHA256": false,
      "weights": {
        "IP": 2,
        "IP_text": "2"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "id to get aggregate trades from INCLUSIVE."
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get aggregate trades from INCLUSIVE."
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get aggregate trades until INCLUSIVE."
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "id to get aggregate trades from INCLUSIVE."
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get aggregate trades from INCLUSIVE."
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get aggregate trades until INCLUSIVE."
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "a": "number", // Aggregate tradeId
                "p": "NumberString", // Price
                "q": "NumberString", // Quantity
                "f": "number", // First tradeId
                "l": "number", // Last tradeId
                "T": "number", // Timestamp
                "m": "boolean", // Was the buyer the maker?
                "M": "boolean" // Was the trade the best price match?
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "a": 26129, // Aggregate tradeId
                "p": "0.01633102", // Price
                "q": "4.70443515", // Quantity
                "f": 27781, // First tradeId
                "l": 27781, // Last tradeId
                "T": 1498793709153, // Timestamp
                "m": true, // Was the buyer the maker?
                "M": true // Was the trade the best price match?
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.compressed-aggregate-trades-list",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#compressed-aggregate-trades-list",
      "name": "Compressed/Aggregate Trades List"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /api/v3/klines",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/klines",
      "hmacSHA256": false,
      "weights": {
        "IP": 2,
        "IP_text": "2"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "interval": {
          "name": "interval",
          "type": "RateLimitInterval",
          "required": true,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timeZone": {
          "name": "timeZone",
          "type": "string",
          "required": false,
          "description": "Default: 0 (UTC)"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "interval": {
              "name": "interval",
              "type": "RateLimitInterval",
              "required": true,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timeZone": {
              "name": "timeZone",
              "type": "string",
              "required": false,
              "description": "Default: 0 (UTC)"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              [
                "number", // Kline open time
                "NumberString", // Open price
                "NumberString", // High price
                "NumberString", // Low price
                "NumberString", // Close price
                "NumberString", // Volume
                "number", // Kline Close time
                "NumberString", // Quote asset volume
                "number", // Number of trades
                "NumberString", // Taker buy base asset volume
                "NumberString", // Taker buy quote asset volume
                "NumberString" // Unused field, ignore.
              ]
            ]
          ],
          "responseExamples": [
            [
              [
                1499040000000, // Kline open time
                "0.01634790", // Open price
                "0.80000000", // High price
                "0.01575800", // Low price
                "0.01577100", // Close price
                "148976.11427815", // Volume
                1499644799999, // Kline Close time
                "2434.19055334", // Quote asset volume
                308, // Number of trades
                "1756.87402397", // Taker buy base asset volume
                "28.46694368", // Taker buy quote asset volume
                "0" // Unused field, ignore.
              ]
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.kline-candlestick-data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#kline-candlestick-data",
      "name": "Kline/Candlestick Data"
    },
    {
      "description": "The request is similar to klines having the same parameters and response.",
      "securityType": "MARKET_DATA",
      "request": "GET /api/v3/uiKlines",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/uiKlines",
      "hmacSHA256": false,
      "weights": {
        "IP": 2,
        "IP_text": "2"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "interval": {
          "name": "interval",
          "type": "RateLimitInterval",
          "required": true,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timeZone": {
          "name": "timeZone",
          "type": "string",
          "required": false,
          "description": "Default: 0 (UTC)"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "interval": {
              "name": "interval",
              "type": "RateLimitInterval",
              "required": true,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timeZone": {
              "name": "timeZone",
              "type": "string",
              "required": false,
              "description": "Default: 0 (UTC)"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              [
                "number", // Kline open time
                "NumberString", // Open price
                "NumberString", // High price
                "NumberString", // Low price
                "NumberString", // Close price
                "NumberString", // Volume
                "number", // Kline close time
                "NumberString", // Quote asset volume
                "number", // Number of trades
                "NumberString", // Taker buy base asset volume
                "NumberString", // Taker buy quote asset volume
                "NumberString" // Unused field. Ignore.
              ]
            ]
          ],
          "responseExamples": [
            [
              [
                1499040000000, // Kline open time
                "0.01634790", // Open price
                "0.80000000", // High price
                "0.01575800", // Low price
                "0.01577100", // Close price
                "148976.11427815", // Volume
                1499644799999, // Kline close time
                "2434.19055334", // Quote asset volume
                308, // Number of trades
                "1756.87402397", // Taker buy base asset volume
                "28.46694368", // Taker buy quote asset volume
                "0" // Unused field. Ignore.
              ]
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.uiklines",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#uiklines",
      "name": "UIKlines"
    },
    {
      "description": "Current average price for a symbol.",
      "securityType": "MARKET_DATA",
      "request": "GET /api/v3/avgPrice",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/avgPrice",
      "hmacSHA256": false,
      "weights": {
        "IP": 2,
        "IP_text": "2"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "mins": "number", // Average price interval (in minutes)
              "price": "NumberString", // Average price
              "closeTime": "number" // Last trade time
            }
          ],
          "responseExamples": [
            {
              "mins": 5, // Average price interval (in minutes)
              "price": "9.35751834", // Average price
              "closeTime": 1694061154503 // Last trade time
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.current-average-price",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#current-average-price",
      "name": "Current Average Price"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /api/v3/ticker/24hr",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/ticker/24hr",
      "hmacSHA256": false,
      "weights": {
        "IP": "\n(params :QueryStruct) =>\n    Array.isArray(params[\"symbols\"]) \n    ? [[101,80],[21,40],[1,2]].find((item, i)=> (params[\"symbols\"] as []).length >= item[0] || i==0)! [1]\n    : params[\"symbol\"] ? 2 : 80",
        "IP_text": "Adjusted based on the number of symbols:\nParameter Symbols Provided             Weight\nsymbol    1                            2     \nsymbol    symbol parameter is omitted  80    \nsymbols   1-20                         2     \nsymbols   21-100                       40    \nsymbols   101 or more                  80    \nsymbols   symbols parameter is omitted 80    "
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "Parameter symbol and symbols cannot be used in combination.  If neither parameter is sent, tickers for all symbols will be returned in an array. \n         "
        },
        "symbols": {
          "name": "symbols",
          "type": "string[]",
          "required": false,
          "description": "Examples of accepted format for the symbols parameter:\n         [\"BTCUSDT\",\"BNBUSDT\"] \n         or \n         %5B%22BTCUSDT%22,%22BNBUSDT%22%5D"
        },
        "type": {
          "name": "type",
          "type": "\"FULL\"|\"MINI\"",
          "required": false,
          "description": "Supported values: FULL or MINI. If none provided, the default is FULL"
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Parameter symbol and symbols cannot be used in combination.  If neither parameter is sent, tickers for all symbols will be returned in an array. \n         "
            },
            "type": {
              "name": "type",
              "type": "\"FULL\"",
              "required": false,
              "description": "Supported values: FULL or MINI. If none provided, the default is FULL"
            }
          },
          "responseNames": [
            "- FULL"
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "priceChange": "NumberString",
              "priceChangePercent": "NumberString",
              "weightedAvgPrice": "NumberString",
              "prevClosePrice": "NumberString",
              "lastPrice": "NumberString",
              "lastQty": "NumberString",
              "bidPrice": "NumberString",
              "bidQty": "NumberString",
              "askPrice": "NumberString",
              "askQty": "NumberString",
              "openPrice": "NumberString",
              "highPrice": "NumberString",
              "lowPrice": "NumberString",
              "volume": "NumberString",
              "quoteVolume": "NumberString",
              "openTime": "number",
              "closeTime": "number",
              "firstId": "number", // First tradeId
              "lastId": "number", // Last tradeId
              "count": "number" // Trade count
            }
          ],
          "responseExamples": [
            {
              "symbol": "BNBBTC",
              "priceChange": "-94.99999800",
              "priceChangePercent": "-95.960",
              "weightedAvgPrice": "0.29628482",
              "prevClosePrice": "0.10002000",
              "lastPrice": "4.00000200",
              "lastQty": "200.00000000",
              "bidPrice": "4.00000000",
              "bidQty": "100.00000000",
              "askPrice": "4.00000200",
              "askQty": "100.00000000",
              "openPrice": "99.00000000",
              "highPrice": "100.00000000",
              "lowPrice": "0.10000000",
              "volume": "8913.30000000",
              "quoteVolume": "15.30000000",
              "openTime": 1499783499040,
              "closeTime": 1499869899040,
              "firstId": 28385, // First tradeId
              "lastId": 28460, // Last tradeId
              "count": 76 // Trade count
            }
          ],
          "name": "(single symbol)",
          "isMinor": false
        },
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Parameter symbol and symbols cannot be used in combination.  If neither parameter is sent, tickers for all symbols will be returned in an array. \n         "
            },
            "type": {
              "name": "type",
              "type": "\"MINI\"",
              "required": true,
              "description": "Supported values: FULL or MINI. If none provided, the default is FULL"
            }
          },
          "responseNames": [
            "- MINI"
          ],
          "responseTypes": [
            {
              "symbol": "string", // Symbol Name
              "openPrice": "NumberString", // Opening price of the Interval
              "highPrice": "NumberString", // Highest price in the interval
              "lowPrice": "NumberString", // Lowest  price in the interval
              "lastPrice": "NumberString", // Closing price of the interval
              "volume": "NumberString", // Total trade volume (in base asset)
              "quoteVolume": "NumberString", // Total trade volume (in quote asset)
              "openTime": "number", // Start of the ticker interval
              "closeTime": "number", // End of the ticker interval
              "firstId": "number", // First tradeId considered
              "lastId": "number", // Last tradeId considered
              "count": "number" // Total trade count
            }
          ],
          "responseExamples": [
            {
              "symbol": "BNBBTC", // Symbol Name
              "openPrice": "99.00000000", // Opening price of the Interval
              "highPrice": "100.00000000", // Highest price in the interval
              "lowPrice": "0.10000000", // Lowest  price in the interval
              "lastPrice": "4.00000200", // Closing price of the interval
              "volume": "8913.30000000", // Total trade volume (in base asset)
              "quoteVolume": "15.30000000", // Total trade volume (in quote asset)
              "openTime": 1499783499040, // Start of the ticker interval
              "closeTime": 1499869899040, // End of the ticker interval
              "firstId": 28385, // First tradeId considered
              "lastId": 28460, // Last tradeId considered
              "count": 76 // Total trade count
            }
          ],
          "name": "(single symbol) (MINI)",
          "isMinor": true
        },
        {
          "params": {
            "symbols": {
              "name": "symbols",
              "type": "string[]",
              "required": false,
              "description": "Examples of accepted format for the symbols parameter:\n         [\"BTCUSDT\",\"BNBUSDT\"] \n         or \n         %5B%22BTCUSDT%22,%22BNBUSDT%22%5D"
            },
            "type": {
              "name": "type",
              "type": "\"FULL\"",
              "required": false,
              "description": "Supported values: FULL or MINI. If none provided, the default is FULL"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "priceChange": "NumberString",
                "priceChangePercent": "NumberString",
                "weightedAvgPrice": "NumberString",
                "prevClosePrice": "NumberString",
                "lastPrice": "NumberString",
                "lastQty": "NumberString",
                "bidPrice": "NumberString",
                "bidQty": "NumberString",
                "askPrice": "NumberString",
                "askQty": "NumberString",
                "openPrice": "NumberString",
                "highPrice": "NumberString",
                "lowPrice": "NumberString",
                "volume": "NumberString",
                "quoteVolume": "NumberString",
                "openTime": "number",
                "closeTime": "number",
                "firstId": "number", // First tradeId
                "lastId": "number", // Last tradeId
                "count": "number" // Trade count
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BNBBTC",
                "priceChange": "-94.99999800",
                "priceChangePercent": "-95.960",
                "weightedAvgPrice": "0.29628482",
                "prevClosePrice": "0.10002000",
                "lastPrice": "4.00000200",
                "lastQty": "200.00000000",
                "bidPrice": "4.00000000",
                "bidQty": "100.00000000",
                "askPrice": "4.00000200",
                "askQty": "100.00000000",
                "openPrice": "99.00000000",
                "highPrice": "100.00000000",
                "lowPrice": "0.10000000",
                "volume": "8913.30000000",
                "quoteVolume": "15.30000000",
                "openTime": 1499783499040,
                "closeTime": 1499869899040,
                "firstId": 28385, // First tradeId
                "lastId": 28460, // Last tradeId
                "count": 76 // Trade count
              }
            ]
          ],
          "name": "(multi symbols)",
          "isMinor": false
        },
        {
          "params": {
            "symbols": {
              "name": "symbols",
              "type": "string[]",
              "required": false,
              "description": "Examples of accepted format for the symbols parameter:\n         [\"BTCUSDT\",\"BNBUSDT\"] \n         or \n         %5B%22BTCUSDT%22,%22BNBUSDT%22%5D"
            },
            "type": {
              "name": "type",
              "type": "\"MINI\"",
              "required": true,
              "description": "Supported values: FULL or MINI. If none provided, the default is FULL"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "openPrice": "NumberString",
                "highPrice": "NumberString",
                "lowPrice": "NumberString",
                "lastPrice": "NumberString",
                "volume": "NumberString",
                "quoteVolume": "NumberString",
                "openTime": "number",
                "closeTime": "number",
                "firstId": "number",
                "lastId": "number",
                "count": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BNBBTC",
                "openPrice": "99.00000000",
                "highPrice": "100.00000000",
                "lowPrice": "0.10000000",
                "lastPrice": "4.00000200",
                "volume": "8913.30000000",
                "quoteVolume": "15.30000000",
                "openTime": 1499783499040,
                "closeTime": 1499869899040,
                "firstId": 28385,
                "lastId": 28460,
                "count": 76
              },
              {
                "symbol": "LTCBTC",
                "openPrice": "0.07000000",
                "highPrice": "0.07000000",
                "lowPrice": "0.07000000",
                "lastPrice": "0.07000000",
                "volume": "11.00000000",
                "quoteVolume": "0.77000000",
                "openTime": 1656908192899,
                "closeTime": 1656994592899,
                "firstId": 0,
                "lastId": 10,
                "count": 11
              }
            ]
          ],
          "name": "(multi symbols) (MINI)",
          "isMinor": true
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.24hr-ticker-price-change-statistics",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#24hr-ticker-price-change-statistics",
      "name": "24hr Ticker Price Change Statistics"
    },
    {
      "description": "Price change statistics for a trading day.",
      "securityType": "MARKET_DATA",
      "request": "GET /api/v3/ticker/tradingDay",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/ticker/tradingDay",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "4 for each requested symbol.  The weight for this request will cap at 200 once the number of symbols in the request is more than 50."
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "Either symbol or symbols must be provided.\n    "
        },
        "symbols": {
          "name": "symbols",
          "type": "string[]",
          "required": true,
          "description": "Examples of accepted format for the symbols parameter:  [\"BTCUSDT\",\"BNBUSDT\"] \n    or\n    %5B%22BTCUSDT%22,%22BNBUSDT%22%5D\n    The maximum number of symbols allowed in a request is 100."
        },
        "timeZone": {
          "name": "timeZone",
          "type": "string",
          "required": false,
          "description": "Default: 0 (UTC)"
        },
        "type": {
          "name": "type",
          "type": "\"FULL\"|\"MINI\"",
          "required": false,
          "description": "Supported values: FULL or MINI.\n    If none provided, the default is FULL."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Either symbol or symbols must be provided.\n    "
            },
            "timeZone": {
              "name": "timeZone",
              "type": "string",
              "required": false,
              "description": "Default: 0 (UTC)"
            },
            "type": {
              "name": "type",
              "type": "\"FULL\"",
              "required": false,
              "description": "Supported values: FULL or MINI.\n    If none provided, the default is FULL."
            }
          },
          "responseNames": [
            "- FULL"
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "priceChange": "NumberString", // Absolute price change
              "priceChangePercent": "NumberString", // Relative price change in percent
              "weightedAvgPrice": "NumberString", // quoteVolume / volume
              "openPrice": "NumberString",
              "highPrice": "NumberString",
              "lowPrice": "NumberString",
              "lastPrice": "NumberString",
              "volume": "NumberString", // Volume in base asset
              "quoteVolume": "NumberString", // Volume in quote asset
              "openTime": "number",
              "closeTime": "number",
              "firstId": "number", // Trade ID of the first trade in the interval
              "lastId": "number", // Trade ID of the last trade in the interval
              "count": "number" // Number of trades in the interval
            }
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSDT",
              "priceChange": "-83.13000000", // Absolute price change
              "priceChangePercent": "-0.317", // Relative price change in percent
              "weightedAvgPrice": "26234.58803036", // quoteVolume / volume
              "openPrice": "26304.80000000",
              "highPrice": "26397.46000000",
              "lowPrice": "26088.34000000",
              "lastPrice": "26221.67000000",
              "volume": "18495.35066000", // Volume in base asset
              "quoteVolume": "485217905.04210480", // Volume in quote asset
              "openTime": 1695686400000,
              "closeTime": 1695772799999,
              "firstId": 3220151555, // Trade ID of the first trade in the interval
              "lastId": 3220849281, // Trade ID of the last trade in the interval
              "count": 697727 // Number of trades in the interval
            }
          ],
          "name": "(single symbol)",
          "isMinor": false
        },
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Either symbol or symbols must be provided.\n    "
            },
            "timeZone": {
              "name": "timeZone",
              "type": "string",
              "required": false,
              "description": "Default: 0 (UTC)"
            },
            "type": {
              "name": "type",
              "type": "\"MINI\"",
              "required": true,
              "description": "Supported values: FULL or MINI.\n    If none provided, the default is FULL."
            }
          },
          "responseNames": [
            "- MINI"
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "openPrice": "NumberString",
              "highPrice": "NumberString",
              "lowPrice": "NumberString",
              "lastPrice": "NumberString",
              "volume": "NumberString", // Volume in base asset
              "quoteVolume": "NumberString", // Volume in quote asset
              "openTime": "number",
              "closeTime": "number",
              "firstId": "number", // Trade ID of the first trade in the interval
              "lastId": "number", // Trade ID of the last trade in the interval
              "count": "number" // Number of trades in the interval
            }
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSDT",
              "openPrice": "26304.80000000",
              "highPrice": "26397.46000000",
              "lowPrice": "26088.34000000",
              "lastPrice": "26221.67000000",
              "volume": "18495.35066000", // Volume in base asset
              "quoteVolume": "485217905.04210480", // Volume in quote asset
              "openTime": 1695686400000,
              "closeTime": 1695772799999,
              "firstId": 3220151555, // Trade ID of the first trade in the interval
              "lastId": 3220849281, // Trade ID of the last trade in the interval
              "count": 697727 // Number of trades in the interval
            }
          ],
          "name": "(single symbol) (MINI)",
          "isMinor": true
        },
        {
          "params": {
            "symbols": {
              "name": "symbols",
              "type": "string[]",
              "required": true,
              "description": "Examples of accepted format for the symbols parameter:  [\"BTCUSDT\",\"BNBUSDT\"] \n    or\n    %5B%22BTCUSDT%22,%22BNBUSDT%22%5D\n    The maximum number of symbols allowed in a request is 100."
            },
            "timeZone": {
              "name": "timeZone",
              "type": "string",
              "required": false,
              "description": "Default: 0 (UTC)"
            },
            "type": {
              "name": "type",
              "type": "\"FULL\"",
              "required": false,
              "description": "Supported values: FULL or MINI.\n    If none provided, the default is FULL."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "priceChange": "NumberString",
                "priceChangePercent": "NumberString",
                "weightedAvgPrice": "NumberString",
                "openPrice": "NumberString",
                "highPrice": "NumberString",
                "lowPrice": "NumberString",
                "lastPrice": "NumberString",
                "volume": "NumberString",
                "quoteVolume": "NumberString",
                "openTime": "number",
                "closeTime": "number",
                "firstId": "number",
                "lastId": "number",
                "count": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSDT",
                "priceChange": "-83.13000000",
                "priceChangePercent": "-0.317",
                "weightedAvgPrice": "26234.58803036",
                "openPrice": "26304.80000000",
                "highPrice": "26397.46000000",
                "lowPrice": "26088.34000000",
                "lastPrice": "26221.67000000",
                "volume": "18495.35066000",
                "quoteVolume": "485217905.04210480",
                "openTime": 1695686400000,
                "closeTime": 1695772799999,
                "firstId": 3220151555,
                "lastId": 3220849281,
                "count": 697727
              },
              {
                "symbol": "BNBUSDT",
                "priceChange": "2.60000000",
                "priceChangePercent": "1.238",
                "weightedAvgPrice": "211.92276958",
                "openPrice": "210.00000000",
                "highPrice": "213.70000000",
                "lowPrice": "209.70000000",
                "lastPrice": "212.60000000",
                "volume": "280709.58900000",
                "quoteVolume": "59488753.54750000",
                "openTime": 1695686400000,
                "closeTime": 1695772799999,
                "firstId": 672397461,
                "lastId": 672496158,
                "count": 98698
              }
            ]
          ],
          "name": "(multi symbols)",
          "isMinor": false
        },
        {
          "params": {
            "symbols": {
              "name": "symbols",
              "type": "string[]",
              "required": true,
              "description": "Examples of accepted format for the symbols parameter:  [\"BTCUSDT\",\"BNBUSDT\"] \n    or\n    %5B%22BTCUSDT%22,%22BNBUSDT%22%5D\n    The maximum number of symbols allowed in a request is 100."
            },
            "timeZone": {
              "name": "timeZone",
              "type": "string",
              "required": false,
              "description": "Default: 0 (UTC)"
            },
            "type": {
              "name": "type",
              "type": "\"MINI\"",
              "required": true,
              "description": "Supported values: FULL or MINI.\n    If none provided, the default is FULL."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "openPrice": "NumberString",
                "highPrice": "NumberString",
                "lowPrice": "NumberString",
                "lastPrice": "NumberString",
                "volume": "NumberString",
                "quoteVolume": "NumberString",
                "openTime": "number",
                "closeTime": "number",
                "firstId": "number",
                "lastId": "number",
                "count": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSDT",
                "openPrice": "26304.80000000",
                "highPrice": "26397.46000000",
                "lowPrice": "26088.34000000",
                "lastPrice": "26221.67000000",
                "volume": "18495.35066000",
                "quoteVolume": "485217905.04210480",
                "openTime": 1695686400000,
                "closeTime": 1695772799999,
                "firstId": 3220151555,
                "lastId": 3220849281,
                "count": 697727
              },
              {
                "symbol": "BNBUSDT",
                "openPrice": "210.00000000",
                "highPrice": "213.70000000",
                "lowPrice": "209.70000000",
                "lastPrice": "212.60000000",
                "volume": "280709.58900000",
                "quoteVolume": "59488753.54750000",
                "openTime": 1695686400000,
                "closeTime": 1695772799999,
                "firstId": 672397461,
                "lastId": 672496158,
                "count": 98698
              }
            ]
          ],
          "name": "(multi symbols) (MINI)",
          "isMinor": true
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.trading-day-ticker",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#trading-day-ticker",
      "name": "Trading Day Ticker"
    },
    {
      "description": "Latest price for a symbol or symbols.",
      "securityType": "MARKET_DATA",
      "request": "GET /api/v3/ticker/price",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/ticker/price",
      "hmacSHA256": false,
      "weights": {
        "IP": "\n(params :QueryStruct) =>\n    Array.isArray(params[\"symbols\"]) ? 4 : params[\"symbol\"] ? 2 : 4",
        "IP_text": "Adjusted based on the number of symbols:\nParameter Symbols Provided            Weight\nsymbol    1                           2     \nsymbol    symbol parameter is omitted 4     \nsymbols   Any                         4     "
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": " Parameter symbol and symbols cannot be used in combination.  If neither parameter is sent, prices for all symbols will be returned in an array.   "
        },
        "symbols": {
          "name": "symbols",
          "type": "string[]",
          "required": false,
          "description": "Examples of accepted format for the symbols parameter:\n         [\"BTCUSDT\",\"BNBUSDT\"] \n         or \n         %5B%22BTCUSDT%22,%22BNBUSDT%22%5D"
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": " Parameter symbol and symbols cannot be used in combination.  If neither parameter is sent, prices for all symbols will be returned in an array.   "
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "price": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "symbol": "LTCBTC",
              "price": "4.00000200"
            }
          ],
          "name": "(single symbol)",
          "weightsStr": {
            "IP_text": "Adjusted based on the number of symbols:\nParameter Symbols Provided            Weight\nsymbol    1                           2     \nsymbol    symbol parameter is omitted 4     "
          }
        },
        {
          "params": {
            "symbols": {
              "name": "symbols",
              "type": "string[]",
              "required": false,
              "description": "Examples of accepted format for the symbols parameter:\n         [\"BTCUSDT\",\"BNBUSDT\"] \n         or \n         %5B%22BTCUSDT%22,%22BNBUSDT%22%5D"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "price": "NumberString"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "LTCBTC",
                "price": "4.00000200"
              },
              {
                "symbol": "ETHBTC",
                "price": "0.07946600"
              }
            ]
          ],
          "name": "(multi symbols)",
          "weightsStr": {
            "IP_text": "Adjusted based on the number of symbols:\nParameter Symbols Provided            Weight\nsymbols   Any                         4     "
          }
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.symbol-price-ticker",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#symbol-price-ticker",
      "name": "Symbol Price Ticker"
    },
    {
      "description": "Best price/qty on the order book for a symbol or symbols.",
      "securityType": "MARKET_DATA",
      "request": "GET /api/v3/ticker/bookTicker",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/ticker/bookTicker",
      "hmacSHA256": false,
      "weights": {
        "IP": "\n(params :QueryStruct) =>\n    Array.isArray(params[\"symbols\"]) ? 4 : params[\"symbol\"] ? 2 : 4",
        "IP_text": "Adjusted based on the number of symbols:\nParameter Symbols Provided            Weight\nsymbol    1                           2     \nsymbol    symbol parameter is omitted 4     \nsymbols   Any                         4     "
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": " Parameter symbol and symbols cannot be used in combination.  If neither parameter is sent, bookTickers for all symbols will be returned in an array.   "
        },
        "symbols": {
          "name": "symbols",
          "type": "string[]",
          "required": false,
          "description": "Examples of accepted format for the symbols parameter:\n         [\"BTCUSDT\",\"BNBUSDT\"] \n         or \n         %5B%22BTCUSDT%22,%22BNBUSDT%22%5D"
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": " Parameter symbol and symbols cannot be used in combination.  If neither parameter is sent, bookTickers for all symbols will be returned in an array.   "
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "bidPrice": "NumberString",
              "bidQty": "NumberString",
              "askPrice": "NumberString",
              "askQty": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "symbol": "LTCBTC",
              "bidPrice": "4.00000000",
              "bidQty": "431.00000000",
              "askPrice": "4.00000200",
              "askQty": "9.00000000"
            }
          ],
          "name": "(single symbol)",
          "weightsStr": {
            "IP_text": "Adjusted based on the number of symbols:\nParameter Symbols Provided            Weight\nsymbol    1                           2     \nsymbol    symbol parameter is omitted 4     "
          }
        },
        {
          "params": {
            "symbols": {
              "name": "symbols",
              "type": "string[]",
              "required": false,
              "description": "Examples of accepted format for the symbols parameter:\n         [\"BTCUSDT\",\"BNBUSDT\"] \n         or \n         %5B%22BTCUSDT%22,%22BNBUSDT%22%5D"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "bidPrice": "NumberString",
                "bidQty": "NumberString",
                "askPrice": "NumberString",
                "askQty": "NumberString"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "LTCBTC",
                "bidPrice": "4.00000000",
                "bidQty": "431.00000000",
                "askPrice": "4.00000200",
                "askQty": "9.00000000"
              },
              {
                "symbol": "ETHBTC",
                "bidPrice": "0.07946700",
                "bidQty": "9.00000000",
                "askPrice": "100000.00000000",
                "askQty": "1000.00000000"
              }
            ]
          ],
          "name": "(multi symbols)",
          "weightsStr": {
            "IP_text": "Adjusted based on the number of symbols:\nParameter Symbols Provided            Weight\nsymbols   Any                         4     "
          }
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.symbol-order-book-ticker",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#symbol-order-book-ticker",
      "name": "Symbol Order Book Ticker"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /api/v3/ticker",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/ticker",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "4 for each requested symbol regardless of windowSize  The weight for this request will cap at 200 once the number of symbols in the request is more than 50."
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "Either symbol or symbols must be provided.\n    "
        },
        "symbols": {
          "name": "symbols",
          "type": "string[]",
          "required": true,
          "description": "Examples of accepted format for the symbols parameter:  [\"BTCUSDT\",\"BNBUSDT\"] \n    or\n    %5B%22BTCUSDT%22,%22BNBUSDT%22%5D\n    The maximum number of symbols allowed in a request is 100."
        },
        "windowSize": {
          "name": "windowSize",
          "type": "ENUM",
          "required": false,
          "description": "Defaults to 1d if no parameter provided. Supported windowSize values:\n    1m,2m....59m for minutes\n    1h, 2h....23h - for hours \n    1d...7d - for days \n    Units cannot be combined (e.g. 1d2h is not allowed)."
        },
        "type": {
          "name": "type",
          "type": "\"FULL\"|\"MINI\"",
          "required": false,
          "description": "Supported values: FULL or MINI.\n    If none provided, the default is FULL."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Either symbol or symbols must be provided.\n    "
            },
            "windowSize": {
              "name": "windowSize",
              "type": "ENUM",
              "required": false,
              "description": "Defaults to 1d if no parameter provided. Supported windowSize values:\n    1m,2m....59m for minutes\n    1h, 2h....23h - for hours \n    1d...7d - for days \n    Units cannot be combined (e.g. 1d2h is not allowed)."
            },
            "type": {
              "name": "type",
              "type": "\"FULL\"",
              "required": false,
              "description": "Supported values: FULL or MINI.\n    If none provided, the default is FULL."
            }
          },
          "responseNames": [
            "- FULL"
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "priceChange": "NumberString", // Absolute price change
              "priceChangePercent": "NumberString", // Relative price change in percent
              "weightedAvgPrice": "NumberString", // QuoteVolume / Volume
              "openPrice": "NumberString",
              "highPrice": "NumberString",
              "lowPrice": "NumberString",
              "lastPrice": "NumberString",
              "volume": "NumberString",
              "quoteVolume": "NumberString", // Sum of (price * volume) for all trades
              "openTime": "number", // Open time for ticker window
              "closeTime": "number", // Current Time of the Request
              "firstId": "number", // Trade IDs
              "lastId": "number",
              "count": "number" // Number of trades in the interval
            }
          ],
          "responseExamples": [
            {
              "symbol": "BNBBTC",
              "priceChange": "-8.00000000", // Absolute price change
              "priceChangePercent": "-88.889", // Relative price change in percent
              "weightedAvgPrice": "2.60427807", // QuoteVolume / Volume
              "openPrice": "9.00000000",
              "highPrice": "9.00000000",
              "lowPrice": "1.00000000",
              "lastPrice": "1.00000000",
              "volume": "187.00000000",
              "quoteVolume": "487.00000000", // Sum of (price * volume) for all trades
              "openTime": 1641859200000, // Open time for ticker window
              "closeTime": 1642031999999, // Current Time of the Request
              "firstId": 0, // Trade IDs
              "lastId": 60,
              "count": 61 // Number of trades in the interval
            }
          ],
          "name": "(single symbol)",
          "isMinor": false
        },
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Either symbol or symbols must be provided.\n    "
            },
            "windowSize": {
              "name": "windowSize",
              "type": "ENUM",
              "required": false,
              "description": "Defaults to 1d if no parameter provided. Supported windowSize values:\n    1m,2m....59m for minutes\n    1h, 2h....23h - for hours \n    1d...7d - for days \n    Units cannot be combined (e.g. 1d2h is not allowed)."
            },
            "type": {
              "name": "type",
              "type": "\"MINI\"",
              "required": true,
              "description": "Supported values: FULL or MINI.\n    If none provided, the default is FULL."
            }
          },
          "responseNames": [
            "- MINI"
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "openPrice": "NumberString",
              "highPrice": "NumberString",
              "lowPrice": "NumberString",
              "lastPrice": "NumberString",
              "volume": "NumberString",
              "quoteVolume": "NumberString", // Sum of (price * volume) for all trades
              "openTime": "number", // Open time for ticker window
              "closeTime": "number", // Close time for ticker window
              "firstId": "number", // Trade IDs
              "lastId": "number",
              "count": "number" // Number of trades in the interval
            }
          ],
          "responseExamples": [
            {
              "symbol": "LTCBTC",
              "openPrice": "0.10000000",
              "highPrice": "2.00000000",
              "lowPrice": "0.10000000",
              "lastPrice": "2.00000000",
              "volume": "39.00000000",
              "quoteVolume": "13.40000000", // Sum of (price * volume) for all trades
              "openTime": 1656986580000, // Open time for ticker window
              "closeTime": 1657001016795, // Close time for ticker window
              "firstId": 0, // Trade IDs
              "lastId": 34,
              "count": 35 // Number of trades in the interval
            }
          ],
          "name": "(single symbol) (MINI)",
          "isMinor": true
        },
        {
          "params": {
            "symbols": {
              "name": "symbols",
              "type": "string[]",
              "required": true,
              "description": "Examples of accepted format for the symbols parameter:  [\"BTCUSDT\",\"BNBUSDT\"] \n    or\n    %5B%22BTCUSDT%22,%22BNBUSDT%22%5D\n    The maximum number of symbols allowed in a request is 100."
            },
            "windowSize": {
              "name": "windowSize",
              "type": "ENUM",
              "required": false,
              "description": "Defaults to 1d if no parameter provided. Supported windowSize values:\n    1m,2m....59m for minutes\n    1h, 2h....23h - for hours \n    1d...7d - for days \n    Units cannot be combined (e.g. 1d2h is not allowed)."
            },
            "type": {
              "name": "type",
              "type": "\"FULL\"",
              "required": false,
              "description": "Supported values: FULL or MINI.\n    If none provided, the default is FULL."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "priceChange": "NumberString", // Absolute price change
                "priceChangePercent": "NumberString", // Relative price change in percent
                "weightedAvgPrice": "NumberString", // QuoteVolume / Volume
                "openPrice": "NumberString",
                "highPrice": "NumberString",
                "lowPrice": "NumberString",
                "lastPrice": "NumberString",
                "volume": "NumberString",
                "quoteVolume": "NumberString", // Sum of (price * volume) for all trades
                "openTime": "number", // Open time for ticker window
                "closeTime": "number", // Close time for ticker window
                "firstId": "number", // Trade IDs
                "lastId": "number",
                "count": "number" // Number of trades in the interval
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSDT",
                "priceChange": "-154.13000000", // Absolute price change
                "priceChangePercent": "-0.740", // Relative price change in percent
                "weightedAvgPrice": "20677.46305250", // QuoteVolume / Volume
                "openPrice": "20825.27000000",
                "highPrice": "20972.46000000",
                "lowPrice": "20327.92000000",
                "lastPrice": "20671.14000000",
                "volume": "72.65112300",
                "quoteVolume": "1502240.91155513", // Sum of (price * volume) for all trades
                "openTime": 1655432400000, // Open time for ticker window
                "closeTime": 1655446835460, // Close time for ticker window
                "firstId": 11147809, // Trade IDs
                "lastId": 11149775,
                "count": 1967 // Number of trades in the interval
              },
              {
                "symbol": "BNBBTC",
                "priceChange": "0.00008530",
                "priceChangePercent": "0.823",
                "weightedAvgPrice": "0.01043129",
                "openPrice": "0.01036170",
                "highPrice": "0.01049850",
                "lowPrice": "0.01033870",
                "lastPrice": "0.01044700",
                "volume": "166.67000000",
                "quoteVolume": "1.73858301",
                "openTime": 1655432400000,
                "closeTime": 1655446835460,
                "firstId": 2351674,
                "lastId": 2352034,
                "count": 361
              }
            ]
          ],
          "name": "(multi symbols)",
          "isMinor": false
        },
        {
          "params": {
            "symbols": {
              "name": "symbols",
              "type": "string[]",
              "required": true,
              "description": "Examples of accepted format for the symbols parameter:  [\"BTCUSDT\",\"BNBUSDT\"] \n    or\n    %5B%22BTCUSDT%22,%22BNBUSDT%22%5D\n    The maximum number of symbols allowed in a request is 100."
            },
            "windowSize": {
              "name": "windowSize",
              "type": "ENUM",
              "required": false,
              "description": "Defaults to 1d if no parameter provided. Supported windowSize values:\n    1m,2m....59m for minutes\n    1h, 2h....23h - for hours \n    1d...7d - for days \n    Units cannot be combined (e.g. 1d2h is not allowed)."
            },
            "type": {
              "name": "type",
              "type": "\"MINI\"",
              "required": true,
              "description": "Supported values: FULL or MINI.\n    If none provided, the default is FULL."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "openPrice": "NumberString",
                "highPrice": "NumberString",
                "lowPrice": "NumberString",
                "lastPrice": "NumberString",
                "volume": "NumberString",
                "quoteVolume": "NumberString", // Sum of (price * volume) for all trades
                "openTime": "number", // Open time for ticker window
                "closeTime": "number", // Close time for ticker window
                "firstId": "number", // Trade IDs
                "lastId": "number",
                "count": "number" // Number of trades in the interval
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BNBBTC",
                "openPrice": "0.10000000",
                "highPrice": "2.00000000",
                "lowPrice": "0.10000000",
                "lastPrice": "2.00000000",
                "volume": "39.00000000",
                "quoteVolume": "13.40000000", // Sum of (price * volume) for all trades
                "openTime": 1656986880000, // Open time for ticker window
                "closeTime": 1657001297799, // Close time for ticker window
                "firstId": 0, // Trade IDs
                "lastId": 34,
                "count": 35 // Number of trades in the interval
              },
              {
                "symbol": "LTCBTC",
                "openPrice": "0.07000000",
                "highPrice": "0.07000000",
                "lowPrice": "0.07000000",
                "lastPrice": "0.07000000",
                "volume": "33.00000000",
                "quoteVolume": "2.31000000",
                "openTime": 1656986880000,
                "closeTime": 1657001297799,
                "firstId": 0,
                "lastId": 32,
                "count": 33
              }
            ]
          ],
          "name": "(multi symbols) (MINI)",
          "isMinor": true
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.rolling-window-price-change-statistics",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#rolling-window-price-change-statistics",
      "name": "Rolling window price change statistics"
    },
    {
      "description": "Test new order creation and signature/recvWindow long.\nCreates and validates a new order but does not send it into the matching engine.",
      "securityType": "TRADE",
      "request": "POST /api/v3/order/test",
      "requestMethod": "POST",
      "requestEndPoint": "/api/v3/order/test",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "\nCondition                      Request Weight\nWithout computeCommissionRates 1             \nWith computeCommissionRates    20            "
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": ""
        },
        "type": {
          "name": "type",
          "type": "OrderType",
          "required": true,
          "description": ""
        },
        "timeInForce": {
          "name": "timeInForce",
          "type": "TimeInForce",
          "required": false,
          "description": ""
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "quoteOrderQty": {
          "name": "quoteOrderQty",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "newClientOrderId": {
          "name": "newClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique id among open orders. Automatically generated if not sent."
        },
        "strategyId": {
          "name": "strategyId",
          "type": "INT",
          "required": false,
          "description": ""
        },
        "strategyType": {
          "name": "strategyType",
          "type": "INT",
          "required": false,
          "description": "The value cannot be less than 1000000."
        },
        "stopPrice": {
          "name": "stopPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders."
        },
        "trailingDelta": {
          "name": "trailingDelta",
          "type": "LONG",
          "required": false,
          "description": "Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.  For more details on SPOT implementation on trailing stops, please refer to Trailing Stop FAQ"
        },
        "icebergQty": {
          "name": "icebergQty",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order."
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "OrderResponseType",
          "required": false,
          "description": "Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK."
        },
        "selfTradePreventionMode": {
          "name": "selfTradePreventionMode",
          "type": "\"EXPIRE_TAKER\"|\"EXPIRE_MAKER\"|\"EXPIRE_BOTH\"|\"NONE\"",
          "required": false,
          "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "computeCommissionRates": {
          "name": "computeCommissionRates",
          "type": "boolean",
          "required": false,
          "description": "Default: false"
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": ""
            },
            "type": {
              "name": "type",
              "type": "OrderType",
              "required": true,
              "description": ""
            },
            "timeInForce": {
              "name": "timeInForce",
              "type": "TimeInForce",
              "required": false,
              "description": ""
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "quoteOrderQty": {
              "name": "quoteOrderQty",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "newClientOrderId": {
              "name": "newClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique id among open orders. Automatically generated if not sent."
            },
            "strategyId": {
              "name": "strategyId",
              "type": "INT",
              "required": false,
              "description": ""
            },
            "strategyType": {
              "name": "strategyType",
              "type": "INT",
              "required": false,
              "description": "The value cannot be less than 1000000."
            },
            "stopPrice": {
              "name": "stopPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders."
            },
            "trailingDelta": {
              "name": "trailingDelta",
              "type": "LONG",
              "required": false,
              "description": "Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.  For more details on SPOT implementation on trailing stops, please refer to Trailing Stop FAQ"
            },
            "icebergQty": {
              "name": "icebergQty",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order."
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "OrderResponseType",
              "required": false,
              "description": "Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK."
            },
            "selfTradePreventionMode": {
              "name": "selfTradePreventionMode",
              "type": "\"EXPIRE_TAKER\"|\"EXPIRE_MAKER\"|\"EXPIRE_BOTH\"|\"NONE\"",
              "required": false,
              "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "computeCommissionRates": {
              "name": "computeCommissionRates",
              "type": "boolean",
              "required": false,
              "description": "Default: false"
            }
          },
          "responseNames": [
            "",
            ""
          ],
          "responseTypes": [
            {},
            {
              "standardCommissionForOrder": { //Standard commission rates on trades from the order.
                "maker": "NumberString",
                "taker": "NumberString"
              },
              "taxCommissionForOrder": { //Tax commission rates for trades from the order.
                "maker": "NumberString",
                "taker": "NumberString"
              },
              "discount": { //Discount on standard commissions when paying in BNB.
                "enabledForAccount": "boolean",
                "enabledForSymbol": "boolean",
                "discountAsset": "string",
                "discount": "NumberString" //Standard commission is reduced by this rate when paying commission in BNB.
              }
            }
          ],
          "responseExamples": [
            {},
            {
              "standardCommissionForOrder": { //Standard commission rates on trades from the order.
                "maker": "0.00000112",
                "taker": "0.00000114"
              },
              "taxCommissionForOrder": { //Tax commission rates for trades from the order.
                "maker": "0.00000112",
                "taker": "0.00000114"
              },
              "discount": { //Discount on standard commissions when paying in BNB.
                "enabledForAccount": true,
                "enabledForSymbol": true,
                "discountAsset": "BNB",
                "discount": "0.25000000" //Standard commission is reduced by this rate when paying commission in BNB.
              }
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Trading Endpoints",
      "path": "toc.spot-trading-endpoints.test-new-order-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#test-new-order-trade",
      "name": "Test New Order (TRADE)"
    },
    {
      "description": "Send in a new order.",
      "securityType": "TRADE",
      "request": "POST /api/v3/order",
      "requestMethod": "POST",
      "requestEndPoint": "/api/v3/order",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "UID": 1,
        "UID_text": "1",
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": ""
        },
        "type": {
          "name": "type",
          "type": "OrderType",
          "required": true,
          "description": ""
        },
        "timeInForce": {
          "name": "timeInForce",
          "type": "TimeInForce",
          "required": false,
          "description": ""
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "quoteOrderQty": {
          "name": "quoteOrderQty",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "newClientOrderId": {
          "name": "newClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique id among open orders. Automatically generated if not sent."
        },
        "strategyId": {
          "name": "strategyId",
          "type": "INT",
          "required": false,
          "description": ""
        },
        "strategyType": {
          "name": "strategyType",
          "type": "INT",
          "required": false,
          "description": "The value cannot be less than 1000000."
        },
        "stopPrice": {
          "name": "stopPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders."
        },
        "trailingDelta": {
          "name": "trailingDelta",
          "type": "LONG",
          "required": false,
          "description": "Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.  For more details on SPOT implementation on trailing stops, please refer to Trailing Stop FAQ"
        },
        "icebergQty": {
          "name": "icebergQty",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order."
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "OrderResponseType",
          "required": false,
          "description": "Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK."
        },
        "selfTradePreventionMode": {
          "name": "selfTradePreventionMode",
          "type": "\"EXPIRE_TAKER\"|\"EXPIRE_MAKER\"|\"EXPIRE_BOTH\"|\"NONE\"",
          "required": false,
          "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": ""
            },
            "type": {
              "name": "type",
              "type": "OrderType",
              "required": true,
              "description": ""
            },
            "timeInForce": {
              "name": "timeInForce",
              "type": "TimeInForce",
              "required": false,
              "description": ""
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "quoteOrderQty": {
              "name": "quoteOrderQty",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "newClientOrderId": {
              "name": "newClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique id among open orders. Automatically generated if not sent."
            },
            "strategyId": {
              "name": "strategyId",
              "type": "INT",
              "required": false,
              "description": ""
            },
            "strategyType": {
              "name": "strategyType",
              "type": "INT",
              "required": false,
              "description": "The value cannot be less than 1000000."
            },
            "stopPrice": {
              "name": "stopPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders."
            },
            "trailingDelta": {
              "name": "trailingDelta",
              "type": "LONG",
              "required": false,
              "description": "Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.  For more details on SPOT implementation on trailing stops, please refer to Trailing Stop FAQ"
            },
            "icebergQty": {
              "name": "icebergQty",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order."
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "OrderResponseType",
              "required": false,
              "description": "Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK."
            },
            "selfTradePreventionMode": {
              "name": "selfTradePreventionMode",
              "type": "\"EXPIRE_TAKER\"|\"EXPIRE_MAKER\"|\"EXPIRE_BOTH\"|\"NONE\"",
              "required": false,
              "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "ACK:",
            "RESULT:",
            "FULL:"
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "orderId": "number",
              "orderListId": "number", //Unless an order list, value will be -1
              "clientOrderId": "string",
              "transactTime": "number"
            },
            {
              "symbol": "string",
              "orderId": "number",
              "orderListId": "number", //Unless an order list, value will be -1
              "clientOrderId": "string",
              "transactTime": "number",
              "price": "NumberString",
              "origQty": "NumberString",
              "executedQty": "NumberString",
              "cummulativeQuoteQty": "NumberString",
              "status": "string",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "side": "OrderSide",
              "workingTime": "number",
              "selfTradePreventionMode": "string"
            },
            {
              "symbol": "string",
              "orderId": "number",
              "orderListId": "number", //Unless an order list, value will be -1
              "clientOrderId": "string",
              "transactTime": "number",
              "price": "NumberString",
              "origQty": "NumberString",
              "executedQty": "NumberString",
              "cummulativeQuoteQty": "NumberString",
              "status": "string",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "side": "OrderSide",
              "workingTime": "number",
              "selfTradePreventionMode": "string",
              "fills": [
                {
                  "price": "NumberString",
                  "qty": "NumberString",
                  "commission": "NumberString",
                  "commissionAsset": "string",
                  "tradeId": "number"
                },
                null,
                null,
                null,
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSDT",
              "orderId": 28,
              "orderListId": -1, //Unless an order list, value will be -1
              "clientOrderId": "6gCrw2kRUAF9CvJDGP16IP",
              "transactTime": 1507725176595
            },
            {
              "symbol": "BTCUSDT",
              "orderId": 28,
              "orderListId": -1, //Unless an order list, value will be -1
              "clientOrderId": "6gCrw2kRUAF9CvJDGP16IP",
              "transactTime": 1507725176595,
              "price": "0.00000000",
              "origQty": "10.00000000",
              "executedQty": "10.00000000",
              "cummulativeQuoteQty": "10.00000000",
              "status": "FILLED",
              "timeInForce": "GTC",
              "type": "MARKET",
              "side": "SELL",
              "workingTime": 1507725176595,
              "selfTradePreventionMode": "NONE"
            },
            {
              "symbol": "BTCUSDT",
              "orderId": 28,
              "orderListId": -1, //Unless an order list, value will be -1
              "clientOrderId": "6gCrw2kRUAF9CvJDGP16IP",
              "transactTime": 1507725176595,
              "price": "0.00000000",
              "origQty": "10.00000000",
              "executedQty": "10.00000000",
              "cummulativeQuoteQty": "10.00000000",
              "status": "FILLED",
              "timeInForce": "GTC",
              "type": "MARKET",
              "side": "SELL",
              "workingTime": 1507725176595,
              "selfTradePreventionMode": "NONE",
              "fills": [
                {
                  "price": "4000.00000000",
                  "qty": "1.00000000",
                  "commission": "4.00000000",
                  "commissionAsset": "USDT",
                  "tradeId": 56
                },
                {
                  "price": "3999.00000000",
                  "qty": "5.00000000",
                  "commission": "19.99500000",
                  "commissionAsset": "USDT",
                  "tradeId": 57
                },
                {
                  "price": "3998.00000000",
                  "qty": "2.00000000",
                  "commission": "7.99600000",
                  "commissionAsset": "USDT",
                  "tradeId": 58
                },
                {
                  "price": "3997.00000000",
                  "qty": "1.00000000",
                  "commission": "3.99700000",
                  "commissionAsset": "USDT",
                  "tradeId": 59
                },
                {
                  "price": "3995.00000000",
                  "qty": "1.00000000",
                  "commission": "3.99500000",
                  "commissionAsset": "USDT",
                  "tradeId": 60
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Trading Endpoints",
      "path": "toc.spot-trading-endpoints.new-order-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#new-order-trade",
      "name": "New Order  (TRADE)"
    },
    {
      "description": "Cancel an active order.",
      "securityType": "TRADE",
      "request": "DELETE /api/v3/order",
      "requestMethod": "DELETE",
      "requestEndPoint": "/api/v3/order",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "newClientOrderId": {
          "name": "newClientOrderId",
          "type": "string",
          "required": false,
          "description": "Used to uniquely identify this cancel. Automatically generated by default."
        },
        "cancelRestrictions": {
          "name": "cancelRestrictions",
          "type": "ENUM",
          "required": false,
          "description": "Supported values: ONLY_NEW - Cancel will succeed if the order status is NEW. ONLY_PARTIALLY_FILLED - Cancel will succeed if order status is PARTIALLY_FILLED."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "newClientOrderId": {
              "name": "newClientOrderId",
              "type": "string",
              "required": false,
              "description": "Used to uniquely identify this cancel. Automatically generated by default."
            },
            "cancelRestrictions": {
              "name": "cancelRestrictions",
              "type": "ENUM",
              "required": false,
              "description": "Supported values: ONLY_NEW - Cancel will succeed if the order status is NEW. ONLY_PARTIALLY_FILLED - Cancel will succeed if order status is PARTIALLY_FILLED."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "origClientOrderId": "string",
              "orderId": "number",
              "orderListId": "number", //Unless part of an order list, the value will always be -1.
              "clientOrderId": "string",
              "transactTime": "number",
              "price": "NumberString",
              "origQty": "NumberString",
              "executedQty": "NumberString",
              "cummulativeQuoteQty": "NumberString",
              "status": "string",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "side": "OrderSide",
              "selfTradePreventionMode": "string"
            }
          ],
          "responseExamples": [
            {
              "symbol": "LTCBTC",
              "origClientOrderId": "myOrder1",
              "orderId": 4,
              "orderListId": -1, //Unless part of an order list, the value will always be -1.
              "clientOrderId": "cancelMyOrder1",
              "transactTime": 1684804350068,
              "price": "2.00000000",
              "origQty": "1.00000000",
              "executedQty": "0.00000000",
              "cummulativeQuoteQty": "0.00000000",
              "status": "CANCELED",
              "timeInForce": "GTC",
              "type": "LIMIT",
              "side": "BUY",
              "selfTradePreventionMode": "NONE"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Trading Endpoints",
      "path": "toc.spot-trading-endpoints.cancel-order-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#cancel-order-trade",
      "name": "Cancel Order (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "DELETE /api/v3/openOrders",
      "requestMethod": "DELETE",
      "requestEndPoint": "/api/v3/openOrders",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "origClientOrderId": "string",
                "orderId": "number",
                "orderListId": "number",
                "clientOrderId": "string",
                "transactTime": "number",
                "price": "NumberString",
                "origQty": "NumberString",
                "executedQty": "NumberString",
                "cummulativeQuoteQty": "NumberString",
                "status": "string",
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "side": "OrderSide",
                "selfTradePreventionMode": "string"
              },
              null,
              {
                "orderListId": "number",
                "contingencyType": "string",
                "listStatusType": "OCOStatus",
                "listOrderStatus": "OCOOrderStatus",
                "listClientOrderId": "string",
                "transactionTime": "number",
                "symbol": "string",
                "orders": [
                  {
                    "symbol": "string",
                    "orderId": "number",
                    "clientOrderId": "string"
                  },
                  null
                ],
                "orderReports": [
                  {
                    "symbol": "string",
                    "origClientOrderId": "string",
                    "orderId": "number",
                    "orderListId": "number",
                    "clientOrderId": "string",
                    "transactTime": "number",
                    "price": "NumberString",
                    "origQty": "NumberString",
                    "executedQty": "NumberString",
                    "cummulativeQuoteQty": "NumberString",
                    "status": "string",
                    "timeInForce": "TimeInForce",
                    "type": "OrderType",
                    "side": "OrderSide",
                    "stopPrice": "NumberString",
                    "icebergQty": "NumberString",
                    "selfTradePreventionMode": "string"
                  },
                  {
                    "symbol": "string",
                    "origClientOrderId": "string",
                    "orderId": "number",
                    "orderListId": "number",
                    "clientOrderId": "string",
                    "transactTime": "number",
                    "price": "NumberString",
                    "origQty": "NumberString",
                    "executedQty": "NumberString",
                    "cummulativeQuoteQty": "NumberString",
                    "status": "string",
                    "timeInForce": "TimeInForce",
                    "type": "OrderType",
                    "side": "OrderSide",
                    "icebergQty": "NumberString",
                    "selfTradePreventionMode": "string"
                  }
                ]
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSDT",
                "origClientOrderId": "E6APeyTJvkMvLMYMqu1KQ4",
                "orderId": 11,
                "orderListId": -1,
                "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                "transactTime": 1684804350068,
                "price": "0.089853",
                "origQty": "0.178622",
                "executedQty": "0.000000",
                "cummulativeQuoteQty": "0.000000",
                "status": "CANCELED",
                "timeInForce": "GTC",
                "type": "LIMIT",
                "side": "BUY",
                "selfTradePreventionMode": "NONE"
              },
              {
                "symbol": "BTCUSDT",
                "origClientOrderId": "A3EF2HCwxgZPFMrfwbgrhv",
                "orderId": 13,
                "orderListId": -1,
                "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                "transactTime": 1684804350069,
                "price": "0.090430",
                "origQty": "0.178622",
                "executedQty": "0.000000",
                "cummulativeQuoteQty": "0.000000",
                "status": "CANCELED",
                "timeInForce": "GTC",
                "type": "LIMIT",
                "side": "BUY",
                "selfTradePreventionMode": "NONE"
              },
              {
                "orderListId": 1929,
                "contingencyType": "OCO",
                "listStatusType": "ALL_DONE",
                "listOrderStatus": "ALL_DONE",
                "listClientOrderId": "2inzWQdDvZLHbbAmAozX2N",
                "transactionTime": 1585230948299,
                "symbol": "BTCUSDT",
                "orders": [
                  {
                    "symbol": "BTCUSDT",
                    "orderId": 20,
                    "clientOrderId": "CwOOIPHSmYywx6jZX77TdL"
                  },
                  {
                    "symbol": "BTCUSDT",
                    "orderId": 21,
                    "clientOrderId": "461cPg51vQjV3zIMOXNz39"
                  }
                ],
                "orderReports": [
                  {
                    "symbol": "BTCUSDT",
                    "origClientOrderId": "CwOOIPHSmYywx6jZX77TdL",
                    "orderId": 20,
                    "orderListId": 1929,
                    "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                    "transactTime": 1688005070874,
                    "price": "0.668611",
                    "origQty": "0.690354",
                    "executedQty": "0.000000",
                    "cummulativeQuoteQty": "0.000000",
                    "status": "CANCELED",
                    "timeInForce": "GTC",
                    "type": "STOP_LOSS_LIMIT",
                    "side": "BUY",
                    "stopPrice": "0.378131",
                    "icebergQty": "0.017083",
                    "selfTradePreventionMode": "NONE"
                  },
                  {
                    "symbol": "BTCUSDT",
                    "origClientOrderId": "461cPg51vQjV3zIMOXNz39",
                    "orderId": 21,
                    "orderListId": 1929,
                    "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                    "transactTime": 1688005070874,
                    "price": "0.008791",
                    "origQty": "0.690354",
                    "executedQty": "0.000000",
                    "cummulativeQuoteQty": "0.000000",
                    "status": "CANCELED",
                    "timeInForce": "GTC",
                    "type": "LIMIT_MAKER",
                    "side": "BUY",
                    "icebergQty": "0.639962",
                    "selfTradePreventionMode": "NONE"
                  }
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Trading Endpoints",
      "path": "toc.spot-trading-endpoints.cancel-all-open-orders-on-a-symbol-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#cancel-all-open-orders-on-a-symbol-trade",
      "name": "Cancel all Open Orders on a Symbol (TRADE)"
    },
    {
      "description": "Check an order's status.",
      "securityType": "USER_DATA",
      "request": "GET /api/v3/order",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/order",
      "hmacSHA256": false,
      "weights": {
        "IP": 4,
        "IP_text": "4"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "orderId": "number",
              "orderListId": "number", //Unless an order list, value will be -1
              "clientOrderId": "string",
              "price": "NumberString",
              "origQty": "NumberString",
              "executedQty": "NumberString",
              "cummulativeQuoteQty": "NumberString",
              "status": "string",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "side": "OrderSide",
              "stopPrice": "NumberString",
              "icebergQty": "NumberString",
              "time": "number",
              "updateTime": "number",
              "isWorking": "boolean",
              "workingTime": "number",
              "origQuoteOrderQty": "NumberString",
              "selfTradePreventionMode": "string"
            }
          ],
          "responseExamples": [
            {
              "symbol": "LTCBTC",
              "orderId": 1,
              "orderListId": -1, //Unless an order list, value will be -1
              "clientOrderId": "myOrder1",
              "price": "0.1",
              "origQty": "1.0",
              "executedQty": "0.0",
              "cummulativeQuoteQty": "0.0",
              "status": "NEW",
              "timeInForce": "GTC",
              "type": "LIMIT",
              "side": "BUY",
              "stopPrice": "0.0",
              "icebergQty": "0.0",
              "time": 1499827319559,
              "updateTime": 1499827319559,
              "isWorking": true,
              "workingTime": 1499827319559,
              "origQuoteOrderQty": "0.000000",
              "selfTradePreventionMode": "NONE"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Trading Endpoints",
      "path": "toc.spot-trading-endpoints.query-order-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-order-user_data",
      "name": "Query Order (USER_DATA)"
    },
    {
      "description": "Cancels an existing order and places a new order on the same symbol.",
      "securityType": "TRADE",
      "request": "POST /api/v3/order/cancelReplace",
      "requestMethod": "POST",
      "requestEndPoint": "/api/v3/order/cancelReplace",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": ""
        },
        "type": {
          "name": "type",
          "type": "OrderType",
          "required": true,
          "description": ""
        },
        "cancelReplaceMode": {
          "name": "cancelReplaceMode",
          "type": "ENUM",
          "required": true,
          "description": "The allowed values are:  STOP_ON_FAILURE - If the cancel request fails, the new order placement will not be attempted.  ALLOW_FAILURE - new order placement will be attempted even if cancel request fails."
        },
        "timeInForce": {
          "name": "timeInForce",
          "type": "TimeInForce",
          "required": false,
          "description": ""
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "quoteOrderQty": {
          "name": "quoteOrderQty",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "cancelNewClientOrderId": {
          "name": "cancelNewClientOrderId",
          "type": "string",
          "required": false,
          "description": "Used to uniquely identify this cancel. Automatically generated by default."
        },
        "cancelOrigClientOrderId": {
          "name": "cancelOrigClientOrderId",
          "type": "string",
          "required": false,
          "description": "Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence."
        },
        "cancelOrderId": {
          "name": "cancelOrderId",
          "type": "LONG",
          "required": false,
          "description": "Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence."
        },
        "newClientOrderId": {
          "name": "newClientOrderId",
          "type": "string",
          "required": false,
          "description": "Used to identify the new order."
        },
        "strategyId": {
          "name": "strategyId",
          "type": "INT",
          "required": false,
          "description": ""
        },
        "strategyType": {
          "name": "strategyType",
          "type": "INT",
          "required": false,
          "description": "The value cannot be less than 1000000."
        },
        "stopPrice": {
          "name": "stopPrice",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "trailingDelta": {
          "name": "trailingDelta",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "icebergQty": {
          "name": "icebergQty",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "OrderResponseType",
          "required": false,
          "description": "Allowed values:  ACK, RESULT, FULL  MARKET and LIMIT orders types default to FULL; all other orders default to ACK"
        },
        "selfTradePreventionMode": {
          "name": "selfTradePreventionMode",
          "type": "ENUM",
          "required": false,
          "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE."
        },
        "cancelRestrictions": {
          "name": "cancelRestrictions",
          "type": "ENUM",
          "required": false,
          "description": "Supported values: ONLY_NEW - Cancel will succeed if the order status is NEW. ONLY_PARTIALLY_FILLED - Cancel will succeed if order status is PARTIALLY_FILLED. For more information please refer to Regarding cancelRestrictions"
        },
        "orderRateLimitExceededMode": {
          "name": "orderRateLimitExceededMode",
          "type": "ENUM",
          "required": false,
          "description": "Supported values:  DO_NOTHING (default)- will only attempt to cancel the order if account has not exceeded the unfilled order rate limit CANCEL_ONLY - will always cancel the order"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": ""
            },
            "type": {
              "name": "type",
              "type": "OrderType",
              "required": true,
              "description": ""
            },
            "cancelReplaceMode": {
              "name": "cancelReplaceMode",
              "type": "ENUM",
              "required": true,
              "description": "The allowed values are:  STOP_ON_FAILURE - If the cancel request fails, the new order placement will not be attempted.  ALLOW_FAILURE - new order placement will be attempted even if cancel request fails."
            },
            "timeInForce": {
              "name": "timeInForce",
              "type": "TimeInForce",
              "required": false,
              "description": ""
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "quoteOrderQty": {
              "name": "quoteOrderQty",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "cancelNewClientOrderId": {
              "name": "cancelNewClientOrderId",
              "type": "string",
              "required": false,
              "description": "Used to uniquely identify this cancel. Automatically generated by default."
            },
            "cancelOrigClientOrderId": {
              "name": "cancelOrigClientOrderId",
              "type": "string",
              "required": false,
              "description": "Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence."
            },
            "cancelOrderId": {
              "name": "cancelOrderId",
              "type": "LONG",
              "required": false,
              "description": "Either the cancelOrigClientOrderId or cancelOrderId must be provided. If both are provided, cancelOrderId takes precedence."
            },
            "newClientOrderId": {
              "name": "newClientOrderId",
              "type": "string",
              "required": false,
              "description": "Used to identify the new order."
            },
            "strategyId": {
              "name": "strategyId",
              "type": "INT",
              "required": false,
              "description": ""
            },
            "strategyType": {
              "name": "strategyType",
              "type": "INT",
              "required": false,
              "description": "The value cannot be less than 1000000."
            },
            "stopPrice": {
              "name": "stopPrice",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "trailingDelta": {
              "name": "trailingDelta",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "icebergQty": {
              "name": "icebergQty",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "OrderResponseType",
              "required": false,
              "description": "Allowed values:  ACK, RESULT, FULL  MARKET and LIMIT orders types default to FULL; all other orders default to ACK"
            },
            "selfTradePreventionMode": {
              "name": "selfTradePreventionMode",
              "type": "ENUM",
              "required": false,
              "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE."
            },
            "cancelRestrictions": {
              "name": "cancelRestrictions",
              "type": "ENUM",
              "required": false,
              "description": "Supported values: ONLY_NEW - Cancel will succeed if the order status is NEW. ONLY_PARTIALLY_FILLED - Cancel will succeed if order status is PARTIALLY_FILLED. For more information please refer to Regarding cancelRestrictions"
            },
            "orderRateLimitExceededMode": {
              "name": "orderRateLimitExceededMode",
              "type": "ENUM",
              "required": false,
              "description": "Supported values:  DO_NOTHING (default)- will only attempt to cancel the order if account has not exceeded the unfilled order rate limit CANCEL_ONLY - will always cancel the order"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "SUCCESS and account has not exceeded the order rate limit:",
            "when Cancel Order Fails with STOP_ON_FAILURE:",
            "when Cancel Order Succeeds but New Order Placement Fails and account has not exceeded the order rate limit:",
            "when Cancel Order fails with ALLOW_FAILURE and account has not exceeded the order rate limit:",
            "when both Cancel Order and New Order Placement fail using cancelReplaceMode=ALLOW_FAILURE and account has not exceeded the order rate limit:",
            "when using orderRateLimitExceededMode=DO_NOTHING and account's order rate limit has been exceeded:",
            "when using orderRateLimitExceededMode=CANCEL_ONLY and account's order rate limit has been exceeded:"
          ],
          "responseTypes": [
            {
              "cancelResult": "string",
              "newOrderResult": "string",
              "cancelResponse": {
                "symbol": "string",
                "origClientOrderId": "string",
                "orderId": "number",
                "orderListId": "number",
                "clientOrderId": "string",
                "transactTime": "number",
                "price": "NumberString",
                "origQty": "NumberString",
                "executedQty": "NumberString",
                "cummulativeQuoteQty": "NumberString",
                "status": "string",
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "side": "OrderSide",
                "selfTradePreventionMode": "string"
              },
              "newOrderResponse": {
                "symbol": "string",
                "orderId": "number",
                "orderListId": "number",
                "clientOrderId": "string",
                "transactTime": "number",
                "price": "NumberString",
                "origQty": "NumberString",
                "executedQty": "NumberString",
                "cummulativeQuoteQty": "NumberString",
                "status": "string",
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "side": "OrderSide",
                "workingTime": "number",
                "fills": [],
                "selfTradePreventionMode": "string"
              }
            },
            {
              "code": "number",
              "msg": "string",
              "data": {
                "cancelResult": "string",
                "newOrderResult": "string",
                "cancelResponse": {
                  "code": "number",
                  "msg": "string"
                },
                "newOrderResponse": "null"
              }
            },
            {
              "code": "number",
              "msg": "string",
              "data": {
                "cancelResult": "string",
                "newOrderResult": "string",
                "cancelResponse": {
                  "symbol": "string",
                  "origClientOrderId": "string",
                  "orderId": "number",
                  "orderListId": "number",
                  "clientOrderId": "string",
                  "transactTime": "number",
                  "price": "NumberString",
                  "origQty": "NumberString",
                  "executedQty": "NumberString",
                  "cummulativeQuoteQty": "NumberString",
                  "status": "string",
                  "timeInForce": "TimeInForce",
                  "type": "OrderType",
                  "side": "OrderSide",
                  "selfTradePreventionMode": "string"
                },
                "newOrderResponse": {
                  "code": "number",
                  "msg": "string"
                }
              }
            },
            {
              "code": "number",
              "msg": "string",
              "data": {
                "cancelResult": "string",
                "newOrderResult": "string",
                "cancelResponse": {
                  "code": "number",
                  "msg": "string"
                },
                "newOrderResponse": {
                  "symbol": "string",
                  "orderId": "number",
                  "orderListId": "number",
                  "clientOrderId": "string",
                  "transactTime": "number"
                }
              }
            },
            {
              "code": "number",
              "msg": "string",
              "data": {
                "cancelResult": "string",
                "newOrderResult": "string",
                "cancelResponse": {
                  "code": "number",
                  "msg": "string"
                },
                "newOrderResponse": {
                  "code": "number",
                  "msg": "string"
                }
              }
            },
            {
              "code": "number",
              "msg": "string"
            },
            null
          ],
          "responseExamples": [
            {
              "cancelResult": "SUCCESS",
              "newOrderResult": "SUCCESS",
              "cancelResponse": {
                "symbol": "BTCUSDT",
                "origClientOrderId": "DnLo3vTAQcjha43lAZhZ0y",
                "orderId": 9,
                "orderListId": -1,
                "clientOrderId": "osxN3JXAtJvKvCqGeMWMVR",
                "transactTime": 1684804350068,
                "price": "0.01000000",
                "origQty": "0.000100",
                "executedQty": "0.00000000",
                "cummulativeQuoteQty": "0.00000000",
                "status": "CANCELED",
                "timeInForce": "GTC",
                "type": "LIMIT",
                "side": "SELL",
                "selfTradePreventionMode": "NONE"
              },
              "newOrderResponse": {
                "symbol": "BTCUSDT",
                "orderId": 10,
                "orderListId": -1,
                "clientOrderId": "wOceeeOzNORyLiQfw7jd8S",
                "transactTime": 1652928801803,
                "price": "0.02000000",
                "origQty": "0.040000",
                "executedQty": "0.00000000",
                "cummulativeQuoteQty": "0.00000000",
                "status": "NEW",
                "timeInForce": "GTC",
                "type": "LIMIT",
                "side": "BUY",
                "workingTime": 1669277163808,
                "fills": [],
                "selfTradePreventionMode": "NONE"
              }
            },
            {
              "code": -2022,
              "msg": "Order cancel-replace failed.",
              "data": {
                "cancelResult": "FAILURE",
                "newOrderResult": "NOT_ATTEMPTED",
                "cancelResponse": {
                  "code": -2011,
                  "msg": "Unknown order sent."
                },
                "newOrderResponse": null
              }
            },
            {
              "code": -2021,
              "msg": "Order cancel-replace partially failed.",
              "data": {
                "cancelResult": "SUCCESS",
                "newOrderResult": "FAILURE",
                "cancelResponse": {
                  "symbol": "BTCUSDT",
                  "origClientOrderId": "86M8erehfExV8z2RC8Zo8k",
                  "orderId": 3,
                  "orderListId": -1,
                  "clientOrderId": "G1kLo6aDv2KGNTFcjfTSFq",
                  "transactTime": 1684804350068,
                  "price": "0.006123",
                  "origQty": "10000.000000",
                  "executedQty": "0.000000",
                  "cummulativeQuoteQty": "0.000000",
                  "status": "CANCELED",
                  "timeInForce": "GTC",
                  "type": "LIMIT_MAKER",
                  "side": "SELL",
                  "selfTradePreventionMode": "NONE"
                },
                "newOrderResponse": {
                  "code": -2010,
                  "msg": "Order would immediately match and take."
                }
              }
            },
            {
              "code": -2021,
              "msg": "Order cancel-replace partially failed.",
              "data": {
                "cancelResult": "FAILURE",
                "newOrderResult": "SUCCESS",
                "cancelResponse": {
                  "code": -2011,
                  "msg": "Unknown order sent."
                },
                "newOrderResponse": {
                  "symbol": "BTCUSDT",
                  "orderId": 11,
                  "orderListId": -1,
                  "clientOrderId": "pfojJMg6IMNDKuJqDxvoxN",
                  "transactTime": 1648540168818
                }
              }
            },
            {
              "code": -2022,
              "msg": "Order cancel-replace failed.",
              "data": {
                "cancelResult": "FAILURE",
                "newOrderResult": "FAILURE",
                "cancelResponse": {
                  "code": -2011,
                  "msg": "Unknown order sent."
                },
                "newOrderResponse": {
                  "code": -2010,
                  "msg": "Order would immediately match and take."
                }
              }
            },
            {
              "code": -1015,
              "msg": "Too many new orders; current limit is 1 orders per 10 SECOND."
            },
            {
              "code": -2021,
              "msg": "Order cancel-replace partially failed.",
              "data": {
                "cancelResult": "SUCCESS",
                "newOrderResult": "FAILURE",
                "cancelResponse": {
                  "symbol": "LTCBNB",
                  "origClientOrderId": "GKt5zzfOxRDSQLveDYCTkc",
                  "orderId": 64,
                  "orderListId": -1,
                  "clientOrderId": "loehOJF3FjoreUBDmv739R",
                  "transactTime": 1715779007228,
                  "price": "1.00",
                  "origQty": "10.00000000",
                  "executedQty": "0.00000000",
                  "cummulativeQuoteQty": "0.00",
                  "status": "CANCELED",
                  "timeInForce": "GTC",
                  "type": "LIMIT",
                  "side": "SELL",
                  "selfTradePreventionMode": "NONE"
                },
                "newOrderResponse": {
                  "code": -1015,
                  "msg": "Too many new orders; current limit is 1 orders per 10 SECOND."
                }
              }
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Trading Endpoints",
      "path": "toc.spot-trading-endpoints.cancel-an-existing-order-and-send-a-new-order-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#cancel-an-existing-order-and-send-a-new-order-trade",
      "name": "Cancel an Existing Order and Send a New Order (TRADE)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /api/v3/openOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/openOrders",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "6 for a single symbol;\n80 when the symbol parameter is omitted;"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "orderId": "number",
                "orderListId": "number", //Unless an order list, the value will always be -1
                "clientOrderId": "string",
                "price": "NumberString",
                "origQty": "NumberString",
                "executedQty": "NumberString",
                "cummulativeQuoteQty": "NumberString",
                "status": "string",
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "side": "OrderSide",
                "stopPrice": "NumberString",
                "icebergQty": "NumberString",
                "time": "number",
                "updateTime": "number",
                "isWorking": "boolean",
                "workingTime": "number",
                "origQuoteOrderQty": "NumberString",
                "selfTradePreventionMode": "string"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "LTCBTC",
                "orderId": 1,
                "orderListId": -1, //Unless an order list, the value will always be -1
                "clientOrderId": "myOrder1",
                "price": "0.1",
                "origQty": "1.0",
                "executedQty": "0.0",
                "cummulativeQuoteQty": "0.0",
                "status": "NEW",
                "timeInForce": "GTC",
                "type": "LIMIT",
                "side": "BUY",
                "stopPrice": "0.0",
                "icebergQty": "0.0",
                "time": 1499827319559,
                "updateTime": 1499827319559,
                "isWorking": true,
                "workingTime": 1499827319559,
                "origQuoteOrderQty": "0.000000",
                "selfTradePreventionMode": "NONE"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Trading Endpoints",
      "path": "toc.spot-trading-endpoints.current-open-orders-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#current-open-orders-user_data",
      "name": "Current Open Orders (USER_DATA)"
    },
    {
      "description": "Get all account orders; active, canceled, or filled.",
      "securityType": "USER_DATA",
      "request": "GET /api/v3/allOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/allOrders",
      "hmacSHA256": false,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "orderId": "number",
                "orderListId": "number", //Unless an order list, the value will always be -1
                "clientOrderId": "string",
                "price": "NumberString",
                "origQty": "NumberString",
                "executedQty": "NumberString",
                "cummulativeQuoteQty": "NumberString",
                "status": "string",
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "side": "OrderSide",
                "stopPrice": "NumberString",
                "icebergQty": "NumberString",
                "time": "number",
                "updateTime": "number",
                "isWorking": "boolean",
                "origQuoteOrderQty": "NumberString",
                "workingTime": "number",
                "selfTradePreventionMode": "string"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "LTCBTC",
                "orderId": 1,
                "orderListId": -1, //Unless an order list, the value will always be -1
                "clientOrderId": "myOrder1",
                "price": "0.1",
                "origQty": "1.0",
                "executedQty": "0.0",
                "cummulativeQuoteQty": "0.0",
                "status": "NEW",
                "timeInForce": "GTC",
                "type": "LIMIT",
                "side": "BUY",
                "stopPrice": "0.0",
                "icebergQty": "0.0",
                "time": 1499827319559,
                "updateTime": 1499827319559,
                "isWorking": true,
                "origQuoteOrderQty": "0.000000",
                "workingTime": 1499827319559,
                "selfTradePreventionMode": "NONE"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Trading Endpoints",
      "path": "toc.spot-trading-endpoints.all-orders-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#all-orders-user_data",
      "name": "All Orders (USER_DATA)"
    },
    {
      "description": "Send in a new OCO",
      "securityType": "TRADE",
      "request": "POST /api/v3/order/oco",
      "requestMethod": "POST",
      "requestEndPoint": "/api/v3/order/oco",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "UID": 2,
        "UID_text": "2",
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "listClientOrderId": {
          "name": "listClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique Id for the entire orderList"
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": ""
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "limitClientOrderId": {
          "name": "limitClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique Id for the limit order"
        },
        "limitStrategyId": {
          "name": "limitStrategyId",
          "type": "INT",
          "required": false,
          "description": ""
        },
        "limitStrategyType": {
          "name": "limitStrategyType",
          "type": "INT",
          "required": false,
          "description": "The value cannot be less than 1000000."
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "limitIcebergQty": {
          "name": "limitIcebergQty",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "trailingDelta": {
          "name": "trailingDelta",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "stopClientOrderId": {
          "name": "stopClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique Id for the stop loss/stop loss limit leg"
        },
        "stopPrice": {
          "name": "stopPrice",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "stopStrategyId": {
          "name": "stopStrategyId",
          "type": "INT",
          "required": false,
          "description": ""
        },
        "stopStrategyType": {
          "name": "stopStrategyType",
          "type": "INT",
          "required": false,
          "description": "The value cannot be less than 1000000."
        },
        "stopLimitPrice": {
          "name": "stopLimitPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "If provided, stopLimitTimeInForce is required."
        },
        "stopIcebergQty": {
          "name": "stopIcebergQty",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "stopLimitTimeInForce": {
          "name": "stopLimitTimeInForce",
          "type": "ENUM",
          "required": false,
          "description": "Valid values are GTC/FOK/IOC"
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "OrderResponseType",
          "required": false,
          "description": "Set the response JSON."
        },
        "selfTradePreventionMode": {
          "name": "selfTradePreventionMode",
          "type": "ENUM",
          "required": false,
          "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "listClientOrderId": {
              "name": "listClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique Id for the entire orderList"
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": ""
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "limitClientOrderId": {
              "name": "limitClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique Id for the limit order"
            },
            "limitStrategyId": {
              "name": "limitStrategyId",
              "type": "INT",
              "required": false,
              "description": ""
            },
            "limitStrategyType": {
              "name": "limitStrategyType",
              "type": "INT",
              "required": false,
              "description": "The value cannot be less than 1000000."
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "limitIcebergQty": {
              "name": "limitIcebergQty",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "trailingDelta": {
              "name": "trailingDelta",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "stopClientOrderId": {
              "name": "stopClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique Id for the stop loss/stop loss limit leg"
            },
            "stopPrice": {
              "name": "stopPrice",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "stopStrategyId": {
              "name": "stopStrategyId",
              "type": "INT",
              "required": false,
              "description": ""
            },
            "stopStrategyType": {
              "name": "stopStrategyType",
              "type": "INT",
              "required": false,
              "description": "The value cannot be less than 1000000."
            },
            "stopLimitPrice": {
              "name": "stopLimitPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "If provided, stopLimitTimeInForce is required."
            },
            "stopIcebergQty": {
              "name": "stopIcebergQty",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "stopLimitTimeInForce": {
              "name": "stopLimitTimeInForce",
              "type": "ENUM",
              "required": false,
              "description": "Valid values are GTC/FOK/IOC"
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "OrderResponseType",
              "required": false,
              "description": "Set the response JSON."
            },
            "selfTradePreventionMode": {
              "name": "selfTradePreventionMode",
              "type": "ENUM",
              "required": false,
              "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderListId": "number",
              "contingencyType": "string",
              "listStatusType": "OCOStatus",
              "listOrderStatus": "OCOOrderStatus",
              "listClientOrderId": "string",
              "transactionTime": "number",
              "symbol": "string",
              "orders": [
                {
                  "symbol": "string",
                  "orderId": "number",
                  "clientOrderId": "string"
                },
                null
              ],
              "orderReports": [
                {
                  "symbol": "string",
                  "orderId": "number",
                  "orderListId": "number",
                  "clientOrderId": "string",
                  "transactTime": "number",
                  "price": "NumberString",
                  "origQty": "NumberString",
                  "executedQty": "NumberString",
                  "cummulativeQuoteQty": "NumberString",
                  "status": "string",
                  "timeInForce": "TimeInForce",
                  "type": "OrderType",
                  "side": "OrderSide",
                  "stopPrice": "NumberString",
                  "workingTime": "number",
                  "selfTradePreventionMode": "string"
                },
                {
                  "symbol": "string",
                  "orderId": "number",
                  "orderListId": "number",
                  "clientOrderId": "string",
                  "transactTime": "number",
                  "price": "NumberString",
                  "origQty": "NumberString",
                  "executedQty": "NumberString",
                  "cummulativeQuoteQty": "NumberString",
                  "status": "string",
                  "timeInForce": "TimeInForce",
                  "type": "OrderType",
                  "side": "OrderSide",
                  "workingTime": "number",
                  "selfTradePreventionMode": "string"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "orderListId": 0,
              "contingencyType": "OCO",
              "listStatusType": "EXEC_STARTED",
              "listOrderStatus": "EXECUTING",
              "listClientOrderId": "JYVpp3F0f5CAG15DhtrqLp",
              "transactionTime": 1563417480525,
              "symbol": "LTCBTC",
              "orders": [
                {
                  "symbol": "LTCBTC",
                  "orderId": 2,
                  "clientOrderId": "Kk7sqHb9J6mJWTMDVW7Vos"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 3,
                  "clientOrderId": "xTXKaGYd4bluPVp78IVRvl"
                }
              ],
              "orderReports": [
                {
                  "symbol": "LTCBTC",
                  "orderId": 2,
                  "orderListId": 0,
                  "clientOrderId": "Kk7sqHb9J6mJWTMDVW7Vos",
                  "transactTime": 1563417480525,
                  "price": "0.000000",
                  "origQty": "0.624363",
                  "executedQty": "0.000000",
                  "cummulativeQuoteQty": "0.000000",
                  "status": "NEW",
                  "timeInForce": "GTC",
                  "type": "STOP_LOSS",
                  "side": "BUY",
                  "stopPrice": "0.960664",
                  "workingTime": -1,
                  "selfTradePreventionMode": "NONE"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 3,
                  "orderListId": 0,
                  "clientOrderId": "xTXKaGYd4bluPVp78IVRvl",
                  "transactTime": 1563417480525,
                  "price": "0.036435",
                  "origQty": "0.624363",
                  "executedQty": "0.000000",
                  "cummulativeQuoteQty": "0.000000",
                  "status": "NEW",
                  "timeInForce": "GTC",
                  "type": "LIMIT_MAKER",
                  "side": "BUY",
                  "workingTime": 1563417480525,
                  "selfTradePreventionMode": "NONE"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Trading Endpoints",
      "path": "toc.spot-trading-endpoints.new-oco-deprecated-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#new-oco-deprecated-trade",
      "name": "New OCO - Deprecated (TRADE)"
    },
    {
      "description": "Send in an one-cancels-the-other (OCO) pair, where activation of one order immediately cancels the other.",
      "securityType": "TRADE",
      "request": "POST /api/v3/orderList/oco",
      "requestMethod": "POST",
      "requestEndPoint": "/api/v3/orderList/oco",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "listClientOrderId": {
          "name": "listClientOrderId",
          "type": "string",
          "required": false,
          "description": "Arbitrary unique ID among open order lists. Automatically generated if not sent.  A new order list with the same listClientOrderId is accepted only when the previous one is filled or completely expired.  listClientOrderId is distinct from the aboveClientOrderId and the belowCLientOrderId."
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": "BUY or SELL"
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": true,
          "description": "Quantity for both legs of the order list."
        },
        "aboveType": {
          "name": "aboveType",
          "type": "ENUM",
          "required": true,
          "description": "Supported values : STOP_LOSS_LIMIT, STOP_LOSS, LIMIT_MAKER"
        },
        "aboveClientOrderId": {
          "name": "aboveClientOrderId",
          "type": "string",
          "required": false,
          "description": "Arbitrary unique ID among open orders for the above leg order. Automatically generated if not sent"
        },
        "aboveIcebergQty": {
          "name": "aboveIcebergQty",
          "type": "LONG",
          "required": false,
          "description": "Note that this can only be used if aboveTimeInForce is GTC."
        },
        "abovePrice": {
          "name": "abovePrice",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "aboveStopPrice": {
          "name": "aboveStopPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Can be used if aboveType is STOP_LOSS or STOP_LOSS_LIMIT. Either aboveStopPrice or aboveTrailingDelta or both, must be specified."
        },
        "aboveTrailingDelta": {
          "name": "aboveTrailingDelta",
          "type": "LONG",
          "required": false,
          "description": "See Trailing Stop order FAQ."
        },
        "aboveTimeInForce": {
          "name": "aboveTimeInForce",
          "type": "DECIMAL",
          "required": false,
          "description": "Required if the aboveType is STOP_LOSS_LIMIT."
        },
        "aboveStrategyId": {
          "name": "aboveStrategyId",
          "type": "INT",
          "required": false,
          "description": "Arbitrary numeric value identifying the above leg order within an order strategy."
        },
        "aboveStrategyType": {
          "name": "aboveStrategyType",
          "type": "INT",
          "required": false,
          "description": "Arbitrary numeric value identifying the above leg order strategy. Values smaller than 1000000 are reserved and cannot be used."
        },
        "belowType": {
          "name": "belowType",
          "type": "ENUM",
          "required": true,
          "description": "Supported values : STOP_LOSS_LIMIT, STOP_LOSS, LIMIT_MAKER"
        },
        "belowClientOrderId": {
          "name": "belowClientOrderId",
          "type": "string",
          "required": false,
          "description": "Arbitrary unique ID among open orders for the below leg order. Automatically generated if not sent"
        },
        "belowIcebergQty": {
          "name": "belowIcebergQty",
          "type": "LONG",
          "required": false,
          "description": "Note that this can only be used if belowTimeInForce is GTC."
        },
        "belowPrice": {
          "name": "belowPrice",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "belowStopPrice": {
          "name": "belowStopPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Can be used if belowType is STOP_LOSS or STOP_LOSS_LIMIT. Either belowStopPrice or belowTrailingDelta or both, must be specified."
        },
        "belowTrailingDelta": {
          "name": "belowTrailingDelta",
          "type": "LONG",
          "required": false,
          "description": "See Trailing Stop order FAQ."
        },
        "belowTimeInForce": {
          "name": "belowTimeInForce",
          "type": "ENUM",
          "required": false,
          "description": "Required if the belowType is STOP_LOSS_LIMIT."
        },
        "belowStrategyId": {
          "name": "belowStrategyId",
          "type": "INT",
          "required": false,
          "description": "Arbitrary numeric value identifying the below leg order within an order strategy."
        },
        "belowStrategyType": {
          "name": "belowStrategyType",
          "type": "INT",
          "required": false,
          "description": "Arbitrary numeric value identifying the below leg order strategy. Values smaller than 1000000 are reserved and cannot be used."
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "OrderResponseType",
          "required": false,
          "description": "Select response format: ACK, RESULT, FULL"
        },
        "selfTradePreventionMode": {
          "name": "selfTradePreventionMode",
          "type": "ENUM",
          "required": false,
          "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000."
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "listClientOrderId": {
              "name": "listClientOrderId",
              "type": "string",
              "required": false,
              "description": "Arbitrary unique ID among open order lists. Automatically generated if not sent.  A new order list with the same listClientOrderId is accepted only when the previous one is filled or completely expired.  listClientOrderId is distinct from the aboveClientOrderId and the belowCLientOrderId."
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": "BUY or SELL"
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": true,
              "description": "Quantity for both legs of the order list."
            },
            "aboveType": {
              "name": "aboveType",
              "type": "ENUM",
              "required": true,
              "description": "Supported values : STOP_LOSS_LIMIT, STOP_LOSS, LIMIT_MAKER"
            },
            "aboveClientOrderId": {
              "name": "aboveClientOrderId",
              "type": "string",
              "required": false,
              "description": "Arbitrary unique ID among open orders for the above leg order. Automatically generated if not sent"
            },
            "aboveIcebergQty": {
              "name": "aboveIcebergQty",
              "type": "LONG",
              "required": false,
              "description": "Note that this can only be used if aboveTimeInForce is GTC."
            },
            "abovePrice": {
              "name": "abovePrice",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "aboveStopPrice": {
              "name": "aboveStopPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Can be used if aboveType is STOP_LOSS or STOP_LOSS_LIMIT. Either aboveStopPrice or aboveTrailingDelta or both, must be specified."
            },
            "aboveTrailingDelta": {
              "name": "aboveTrailingDelta",
              "type": "LONG",
              "required": false,
              "description": "See Trailing Stop order FAQ."
            },
            "aboveTimeInForce": {
              "name": "aboveTimeInForce",
              "type": "DECIMAL",
              "required": false,
              "description": "Required if the aboveType is STOP_LOSS_LIMIT."
            },
            "aboveStrategyId": {
              "name": "aboveStrategyId",
              "type": "INT",
              "required": false,
              "description": "Arbitrary numeric value identifying the above leg order within an order strategy."
            },
            "aboveStrategyType": {
              "name": "aboveStrategyType",
              "type": "INT",
              "required": false,
              "description": "Arbitrary numeric value identifying the above leg order strategy. Values smaller than 1000000 are reserved and cannot be used."
            },
            "belowType": {
              "name": "belowType",
              "type": "ENUM",
              "required": true,
              "description": "Supported values : STOP_LOSS_LIMIT, STOP_LOSS, LIMIT_MAKER"
            },
            "belowClientOrderId": {
              "name": "belowClientOrderId",
              "type": "string",
              "required": false,
              "description": "Arbitrary unique ID among open orders for the below leg order. Automatically generated if not sent"
            },
            "belowIcebergQty": {
              "name": "belowIcebergQty",
              "type": "LONG",
              "required": false,
              "description": "Note that this can only be used if belowTimeInForce is GTC."
            },
            "belowPrice": {
              "name": "belowPrice",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "belowStopPrice": {
              "name": "belowStopPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Can be used if belowType is STOP_LOSS or STOP_LOSS_LIMIT. Either belowStopPrice or belowTrailingDelta or both, must be specified."
            },
            "belowTrailingDelta": {
              "name": "belowTrailingDelta",
              "type": "LONG",
              "required": false,
              "description": "See Trailing Stop order FAQ."
            },
            "belowTimeInForce": {
              "name": "belowTimeInForce",
              "type": "ENUM",
              "required": false,
              "description": "Required if the belowType is STOP_LOSS_LIMIT."
            },
            "belowStrategyId": {
              "name": "belowStrategyId",
              "type": "INT",
              "required": false,
              "description": "Arbitrary numeric value identifying the below leg order within an order strategy."
            },
            "belowStrategyType": {
              "name": "belowStrategyType",
              "type": "INT",
              "required": false,
              "description": "Arbitrary numeric value identifying the below leg order strategy. Values smaller than 1000000 are reserved and cannot be used."
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "OrderResponseType",
              "required": false,
              "description": "Select response format: ACK, RESULT, FULL"
            },
            "selfTradePreventionMode": {
              "name": "selfTradePreventionMode",
              "type": "ENUM",
              "required": false,
              "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000."
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderListId": "number",
              "contingencyType": "string",
              "listStatusType": "OCOStatus",
              "listOrderStatus": "OCOOrderStatus",
              "listClientOrderId": "string",
              "transactionTime": "number",
              "symbol": "string",
              "orders": [
                {
                  "symbol": "string",
                  "orderId": "number",
                  "clientOrderId": "string"
                },
                null
              ],
              "orderReports": [
                {
                  "symbol": "string",
                  "orderId": "number",
                  "orderListId": "number",
                  "clientOrderId": "string",
                  "transactTime": "number",
                  "price": "NumberString",
                  "origQty": "NumberString",
                  "executedQty": "NumberString",
                  "cummulativeQuoteQty": "NumberString",
                  "status": "string",
                  "timeInForce": "TimeInForce",
                  "type": "OrderType",
                  "side": "OrderSide",
                  "stopPrice": "NumberString",
                  "workingTime": "number",
                  "icebergQty": "NumberString",
                  "selfTradePreventionMode": "string"
                },
                {
                  "symbol": "string",
                  "orderId": "number",
                  "orderListId": "number",
                  "clientOrderId": "string",
                  "transactTime": "number",
                  "price": "NumberString",
                  "origQty": "NumberString",
                  "executedQty": "NumberString",
                  "cummulativeQuoteQty": "NumberString",
                  "status": "string",
                  "timeInForce": "TimeInForce",
                  "type": "OrderType",
                  "side": "OrderSide",
                  "workingTime": "number",
                  "selfTradePreventionMode": "string"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "orderListId": 1,
              "contingencyType": "OCO",
              "listStatusType": "EXEC_STARTED",
              "listOrderStatus": "EXECUTING",
              "listClientOrderId": "lH1YDkuQKWiXVXHPSKYEIp",
              "transactionTime": 1710485608839,
              "symbol": "LTCBTC",
              "orders": [
                {
                  "symbol": "LTCBTC",
                  "orderId": 10,
                  "clientOrderId": "44nZvqpemY7sVYgPYbvPih"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 11,
                  "clientOrderId": "NuMp0nVYnciDiFmVqfpBqK"
                }
              ],
              "orderReports": [
                {
                  "symbol": "LTCBTC",
                  "orderId": 10,
                  "orderListId": 1,
                  "clientOrderId": "44nZvqpemY7sVYgPYbvPih",
                  "transactTime": 1710485608839,
                  "price": "1.00000000",
                  "origQty": "5.00000000",
                  "executedQty": "0.00000000",
                  "cummulativeQuoteQty": "0.00000000",
                  "status": "NEW",
                  "timeInForce": "GTC",
                  "type": "STOP_LOSS_LIMIT",
                  "side": "SELL",
                  "stopPrice": "1.00000000",
                  "workingTime": -1,
                  "icebergQty": "1.00000000",
                  "selfTradePreventionMode": "NONE"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 11,
                  "orderListId": 1,
                  "clientOrderId": "NuMp0nVYnciDiFmVqfpBqK",
                  "transactTime": 1710485608839,
                  "price": "3.00000000",
                  "origQty": "5.00000000",
                  "executedQty": "0.00000000",
                  "cummulativeQuoteQty": "0.00000000",
                  "status": "NEW",
                  "timeInForce": "GTC",
                  "type": "LIMIT_MAKER",
                  "side": "SELL",
                  "workingTime": 1710485608839,
                  "selfTradePreventionMode": "NONE"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Trading Endpoints",
      "path": "toc.spot-trading-endpoints.new-order-list-oco-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#new-order-list-oco-trade",
      "name": "New Order List - OCO (TRADE)"
    },
    {
      "description": "Matching Engine",
      "securityType": "TRADE",
      "request": "POST /api/v3/orderList/oto",
      "requestMethod": "POST",
      "requestEndPoint": "/api/v3/orderList/oto",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "listClientOrderId": {
          "name": "listClientOrderId",
          "type": "string",
          "required": false,
          "description": "Arbitrary unique ID among open order lists. Automatically generated if not sent. A new order list with the same listClientOrderId is accepted only when the previous one is filled or completely expired.  listClientOrderId is distinct from the workingClientOrderId and the pendingClientOrderId."
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "OrderResponseType",
          "required": false,
          "description": "Format of the JSON response. Supported values: ACK, FULL, RESULT"
        },
        "selfTradePreventionMode": {
          "name": "selfTradePreventionMode",
          "type": "ENUM",
          "required": false,
          "description": "The allowed values are dependent on what is configured on the symbol."
        },
        "workingType": {
          "name": "workingType",
          "type": "WorkingType",
          "required": true,
          "description": "Supported values: LIMIT,LIMIT_MAKER"
        },
        "workingSide": {
          "name": "workingSide",
          "type": "ENUM",
          "required": true,
          "description": "Supported values: BUY, SELL"
        },
        "workingClientOrderId": {
          "name": "workingClientOrderId",
          "type": "string",
          "required": false,
          "description": "Arbitrary unique ID among open orders for the working order. Automatically generated if not sent."
        },
        "workingPrice": {
          "name": "workingPrice",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "workingQuantity": {
          "name": "workingQuantity",
          "type": "DECIMAL",
          "required": true,
          "description": "Sets the quantity for the working order."
        },
        "workingIcebergQty": {
          "name": "workingIcebergQty",
          "type": "DECIMAL",
          "required": true,
          "description": "This can only be used if workingTimeInForce is GTC or if workingType is LIMIT_MAKER."
        },
        "workingTimeInForce": {
          "name": "workingTimeInForce",
          "type": "ENUM",
          "required": false,
          "description": "Supported values: FOK, IOC, GTC"
        },
        "workingStrategyId": {
          "name": "workingStrategyId",
          "type": "INT",
          "required": false,
          "description": "Arbitrary numeric value identifying the working order within an order strategy."
        },
        "workingStrategyType": {
          "name": "workingStrategyType",
          "type": "INT",
          "required": false,
          "description": "Arbitrary numeric value identifying the working order strategy.  Values smaller than 1000000 are reserved and cannot be used."
        },
        "pendingType": {
          "name": "pendingType",
          "type": "ENUM",
          "required": true,
          "description": "Note that MARKET orders using quoteOrderQty are not supported."
        },
        "pendingSide": {
          "name": "pendingSide",
          "type": "ENUM",
          "required": true,
          "description": "Supported values: BUY, SELL"
        },
        "pendingClientOrderId": {
          "name": "pendingClientOrderId",
          "type": "string",
          "required": false,
          "description": "Arbitrary unique ID among open orders for the pending order. Automatically generated if not sent."
        },
        "pendingPrice": {
          "name": "pendingPrice",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "pendingStopPrice": {
          "name": "pendingStopPrice",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "pendingTrailingDelta": {
          "name": "pendingTrailingDelta",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "pendingQuantity": {
          "name": "pendingQuantity",
          "type": "DECIMAL",
          "required": true,
          "description": "Sets the quantity for the pending order."
        },
        "pendingIcebergQty": {
          "name": "pendingIcebergQty",
          "type": "DECIMAL",
          "required": false,
          "description": "This can only be used if pendingTimeInForce is GTC or if pendingType is LIMIT_MAKER."
        },
        "pendingTimeInForce": {
          "name": "pendingTimeInForce",
          "type": "ENUM",
          "required": false,
          "description": "Supported values: GTC, FOK, IOC"
        },
        "pendingStrategyId": {
          "name": "pendingStrategyId",
          "type": "INT",
          "required": false,
          "description": "Arbitrary numeric value identifying the pending order within an order strategy."
        },
        "pendingStrategyType": {
          "name": "pendingStrategyType",
          "type": "INT",
          "required": false,
          "description": "Arbitrary numeric value identifying the pending order strategy.  Values smaller than 1000000 are reserved and cannot be used."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000."
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "listClientOrderId": {
              "name": "listClientOrderId",
              "type": "string",
              "required": false,
              "description": "Arbitrary unique ID among open order lists. Automatically generated if not sent. A new order list with the same listClientOrderId is accepted only when the previous one is filled or completely expired.  listClientOrderId is distinct from the workingClientOrderId and the pendingClientOrderId."
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "OrderResponseType",
              "required": false,
              "description": "Format of the JSON response. Supported values: ACK, FULL, RESULT"
            },
            "selfTradePreventionMode": {
              "name": "selfTradePreventionMode",
              "type": "ENUM",
              "required": false,
              "description": "The allowed values are dependent on what is configured on the symbol."
            },
            "workingType": {
              "name": "workingType",
              "type": "WorkingType",
              "required": true,
              "description": "Supported values: LIMIT,LIMIT_MAKER"
            },
            "workingSide": {
              "name": "workingSide",
              "type": "ENUM",
              "required": true,
              "description": "Supported values: BUY, SELL"
            },
            "workingClientOrderId": {
              "name": "workingClientOrderId",
              "type": "string",
              "required": false,
              "description": "Arbitrary unique ID among open orders for the working order. Automatically generated if not sent."
            },
            "workingPrice": {
              "name": "workingPrice",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "workingQuantity": {
              "name": "workingQuantity",
              "type": "DECIMAL",
              "required": true,
              "description": "Sets the quantity for the working order."
            },
            "workingIcebergQty": {
              "name": "workingIcebergQty",
              "type": "DECIMAL",
              "required": true,
              "description": "This can only be used if workingTimeInForce is GTC or if workingType is LIMIT_MAKER."
            },
            "workingTimeInForce": {
              "name": "workingTimeInForce",
              "type": "ENUM",
              "required": false,
              "description": "Supported values: FOK, IOC, GTC"
            },
            "workingStrategyId": {
              "name": "workingStrategyId",
              "type": "INT",
              "required": false,
              "description": "Arbitrary numeric value identifying the working order within an order strategy."
            },
            "workingStrategyType": {
              "name": "workingStrategyType",
              "type": "INT",
              "required": false,
              "description": "Arbitrary numeric value identifying the working order strategy.  Values smaller than 1000000 are reserved and cannot be used."
            },
            "pendingType": {
              "name": "pendingType",
              "type": "ENUM",
              "required": true,
              "description": "Note that MARKET orders using quoteOrderQty are not supported."
            },
            "pendingSide": {
              "name": "pendingSide",
              "type": "ENUM",
              "required": true,
              "description": "Supported values: BUY, SELL"
            },
            "pendingClientOrderId": {
              "name": "pendingClientOrderId",
              "type": "string",
              "required": false,
              "description": "Arbitrary unique ID among open orders for the pending order. Automatically generated if not sent."
            },
            "pendingPrice": {
              "name": "pendingPrice",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "pendingStopPrice": {
              "name": "pendingStopPrice",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "pendingTrailingDelta": {
              "name": "pendingTrailingDelta",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "pendingQuantity": {
              "name": "pendingQuantity",
              "type": "DECIMAL",
              "required": true,
              "description": "Sets the quantity for the pending order."
            },
            "pendingIcebergQty": {
              "name": "pendingIcebergQty",
              "type": "DECIMAL",
              "required": false,
              "description": "This can only be used if pendingTimeInForce is GTC or if pendingType is LIMIT_MAKER."
            },
            "pendingTimeInForce": {
              "name": "pendingTimeInForce",
              "type": "ENUM",
              "required": false,
              "description": "Supported values: GTC, FOK, IOC"
            },
            "pendingStrategyId": {
              "name": "pendingStrategyId",
              "type": "INT",
              "required": false,
              "description": "Arbitrary numeric value identifying the pending order within an order strategy."
            },
            "pendingStrategyType": {
              "name": "pendingStrategyType",
              "type": "INT",
              "required": false,
              "description": "Arbitrary numeric value identifying the pending order strategy.  Values smaller than 1000000 are reserved and cannot be used."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000."
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderListId": "number",
              "contingencyType": "string",
              "listStatusType": "OCOStatus",
              "listOrderStatus": "OCOOrderStatus",
              "listClientOrderId": "string",
              "transactionTime": "number",
              "symbol": "string",
              "orders": [
                {
                  "symbol": "string",
                  "orderId": "number",
                  "clientOrderId": "string"
                },
                null
              ],
              "orderReports": [
                {
                  "symbol": "string",
                  "orderId": "number",
                  "orderListId": "number",
                  "clientOrderId": "string",
                  "transactTime": "number",
                  "price": "NumberString",
                  "origQty": "NumberString",
                  "executedQty": "NumberString",
                  "cummulativeQuoteQty": "NumberString",
                  "status": "string",
                  "timeInForce": "TimeInForce",
                  "type": "OrderType",
                  "side": "OrderSide",
                  "workingTime": "number",
                  "selfTradePreventionMode": "string"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "orderListId": 0,
              "contingencyType": "OTO",
              "listStatusType": "EXEC_STARTED",
              "listOrderStatus": "EXECUTING",
              "listClientOrderId": "yl2ERtcar1o25zcWtqVBTC",
              "transactionTime": 1712289389158,
              "symbol": "ABCDEF",
              "orders": [
                {
                  "symbol": "LTCBTC",
                  "orderId": 4,
                  "clientOrderId": "Bq17mn9fP6vyCn75Jw1xya"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 5,
                  "clientOrderId": "arLFo0zGJVDE69cvGBaU0d"
                }
              ],
              "orderReports": [
                {
                  "symbol": "LTCBTC",
                  "orderId": 4,
                  "orderListId": 0,
                  "clientOrderId": "Bq17mn9fP6vyCn75Jw1xya",
                  "transactTime": 1712289389158,
                  "price": "1.00000000",
                  "origQty": "1.00000000",
                  "executedQty": "0.00000000",
                  "cummulativeQuoteQty": "0.00000000",
                  "status": "NEW",
                  "timeInForce": "GTC",
                  "type": "LIMIT",
                  "side": "SELL",
                  "workingTime": 1712289389158,
                  "selfTradePreventionMode": "NONE"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 5,
                  "orderListId": 0,
                  "clientOrderId": "arLFo0zGJVDE69cvGBaU0d",
                  "transactTime": 1712289389158,
                  "price": "0.00000000",
                  "origQty": "5.00000000",
                  "executedQty": "0.00000000",
                  "cummulativeQuoteQty": "0.00000000",
                  "status": "PENDING_NEW",
                  "timeInForce": "GTC",
                  "type": "MARKET",
                  "side": "BUY",
                  "workingTime": -1,
                  "selfTradePreventionMode": "NONE"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Trading Endpoints",
      "path": "toc.spot-trading-endpoints.new-order-list-oto-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#new-order-list-oto-trade",
      "name": "New Order List - OTO (TRADE)"
    },
    {
      "description": "Place an OTOCO.",
      "securityType": "TRADE",
      "request": "POST /api/v3/orderList/otoco",
      "requestMethod": "POST",
      "requestEndPoint": "/api/v3/orderList/otoco",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "listClientOrderId": {
          "name": "listClientOrderId",
          "type": "string",
          "required": false,
          "description": "Arbitrary unique ID among open order lists. Automatically generated if not sent. A new order list with the same listClientOrderId is accepted only when the previous one is filled or completely expired.  listClientOrderId is distinct from the workingClientOrderId, pendingAboveClientOrderId, and the pendingBelowClientOrderId."
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "OrderResponseType",
          "required": false,
          "description": "Format the JSON response. Supported values: ACK, FULL, RESPONSE"
        },
        "selfTradePreventionMode": {
          "name": "selfTradePreventionMode",
          "type": "ENUM",
          "required": false,
          "description": "The allowed values are dependent on what is configured on the symbol."
        },
        "workingType": {
          "name": "workingType",
          "type": "WorkingType",
          "required": true,
          "description": "Supported values: LIMIT, LIMIT_MAKER"
        },
        "workingSide": {
          "name": "workingSide",
          "type": "ENUM",
          "required": true,
          "description": "Supported values: BUY, SELL"
        },
        "workingClientOrderId": {
          "name": "workingClientOrderId",
          "type": "string",
          "required": false,
          "description": "Arbitrary unique ID among open orders for the working order. Automatically generated if not sent."
        },
        "workingPrice": {
          "name": "workingPrice",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "workingQuantity": {
          "name": "workingQuantity",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "workingIcebergQty": {
          "name": "workingIcebergQty",
          "type": "DECIMAL",
          "required": false,
          "description": "This can only be used if workingTimeInForce is GTC or if workingType is LIMIT_MAKER."
        },
        "workingTimeInForce": {
          "name": "workingTimeInForce",
          "type": "ENUM",
          "required": false,
          "description": "Supported values: GTC, IOC, FOK"
        },
        "workingStrategyId": {
          "name": "workingStrategyId",
          "type": "INT",
          "required": false,
          "description": "Arbitrary numeric value identifying the working order within an order strategy."
        },
        "workingStrategyType": {
          "name": "workingStrategyType",
          "type": "INT",
          "required": false,
          "description": "Arbitrary numeric value identifying the working order strategy.  Values smaller than 1000000 are reserved and cannot be used."
        },
        "pendingSide": {
          "name": "pendingSide",
          "type": "ENUM",
          "required": true,
          "description": "Supported values: BUY, SELL"
        },
        "pendingQuantity": {
          "name": "pendingQuantity",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "pendingAboveType": {
          "name": "pendingAboveType",
          "type": "ENUM",
          "required": true,
          "description": "Supported values: LIMIT_MAKER, STOP_LOSS, and STOP_LOSS_LIMIT"
        },
        "pendingAboveClientOrderId": {
          "name": "pendingAboveClientOrderId",
          "type": "string",
          "required": false,
          "description": "Arbitrary unique ID among open orders for the pending above order. Automatically generated if not sent."
        },
        "pendingAbovePrice": {
          "name": "pendingAbovePrice",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "pendingAboveStopPrice": {
          "name": "pendingAboveStopPrice",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "pendingAboveTrailingDelta": {
          "name": "pendingAboveTrailingDelta",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "pendingAboveIcebergQty": {
          "name": "pendingAboveIcebergQty",
          "type": "DECIMAL",
          "required": false,
          "description": "This can only be used if pendingAboveTimeInForce is GTC or if pendingAboveType is LIMIT_MAKER."
        },
        "pendingAboveTimeInForce": {
          "name": "pendingAboveTimeInForce",
          "type": "ENUM",
          "required": false,
          "description": ""
        },
        "pendingAboveStrategyId": {
          "name": "pendingAboveStrategyId",
          "type": "INT",
          "required": false,
          "description": "Arbitrary numeric value identifying the pending above order within an order strategy."
        },
        "pendingAboveStrategyType": {
          "name": "pendingAboveStrategyType",
          "type": "INT",
          "required": false,
          "description": "Arbitrary numeric value identifying the pending above order strategy.  Values smaller than 1000000 are reserved and cannot be used."
        },
        "pendingBelowType": {
          "name": "pendingBelowType",
          "type": "ENUM",
          "required": false,
          "description": "Supported values: LIMIT_MAKER, STOP_LOSS, and STOP_LOSS_LIMIT"
        },
        "pendingBelowClientOrderId": {
          "name": "pendingBelowClientOrderId",
          "type": "string",
          "required": false,
          "description": "Arbitrary unique ID among open orders for the pending below order. Automatically generated if not sent."
        },
        "pendingBelowPrice": {
          "name": "pendingBelowPrice",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "pendingBelowStopPrice": {
          "name": "pendingBelowStopPrice",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "pendingBelowTrailingDelta": {
          "name": "pendingBelowTrailingDelta",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "pendingBelowIcebergQty": {
          "name": "pendingBelowIcebergQty",
          "type": "DECIMAL",
          "required": false,
          "description": "This can only be used if pendingBelowTimeInForce is GTC or if pendingBelowType is LIMIT_MAKER."
        },
        "pendingBelowTimeInForce": {
          "name": "pendingBelowTimeInForce",
          "type": "ENUM",
          "required": false,
          "description": ""
        },
        "pendingBelowStrategyId": {
          "name": "pendingBelowStrategyId",
          "type": "INT",
          "required": false,
          "description": "Arbitrary numeric value identifying the pending below order within an order strategy."
        },
        "pendingBelowStrategyType": {
          "name": "pendingBelowStrategyType",
          "type": "INT",
          "required": false,
          "description": "Arbitrary numeric value identifying the pending below order strategy.  Values smaller than 1000000 are reserved and cannot be used."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000."
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "listClientOrderId": {
              "name": "listClientOrderId",
              "type": "string",
              "required": false,
              "description": "Arbitrary unique ID among open order lists. Automatically generated if not sent. A new order list with the same listClientOrderId is accepted only when the previous one is filled or completely expired.  listClientOrderId is distinct from the workingClientOrderId, pendingAboveClientOrderId, and the pendingBelowClientOrderId."
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "OrderResponseType",
              "required": false,
              "description": "Format the JSON response. Supported values: ACK, FULL, RESPONSE"
            },
            "selfTradePreventionMode": {
              "name": "selfTradePreventionMode",
              "type": "ENUM",
              "required": false,
              "description": "The allowed values are dependent on what is configured on the symbol."
            },
            "workingType": {
              "name": "workingType",
              "type": "WorkingType",
              "required": true,
              "description": "Supported values: LIMIT, LIMIT_MAKER"
            },
            "workingSide": {
              "name": "workingSide",
              "type": "ENUM",
              "required": true,
              "description": "Supported values: BUY, SELL"
            },
            "workingClientOrderId": {
              "name": "workingClientOrderId",
              "type": "string",
              "required": false,
              "description": "Arbitrary unique ID among open orders for the working order. Automatically generated if not sent."
            },
            "workingPrice": {
              "name": "workingPrice",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "workingQuantity": {
              "name": "workingQuantity",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "workingIcebergQty": {
              "name": "workingIcebergQty",
              "type": "DECIMAL",
              "required": false,
              "description": "This can only be used if workingTimeInForce is GTC or if workingType is LIMIT_MAKER."
            },
            "workingTimeInForce": {
              "name": "workingTimeInForce",
              "type": "ENUM",
              "required": false,
              "description": "Supported values: GTC, IOC, FOK"
            },
            "workingStrategyId": {
              "name": "workingStrategyId",
              "type": "INT",
              "required": false,
              "description": "Arbitrary numeric value identifying the working order within an order strategy."
            },
            "workingStrategyType": {
              "name": "workingStrategyType",
              "type": "INT",
              "required": false,
              "description": "Arbitrary numeric value identifying the working order strategy.  Values smaller than 1000000 are reserved and cannot be used."
            },
            "pendingSide": {
              "name": "pendingSide",
              "type": "ENUM",
              "required": true,
              "description": "Supported values: BUY, SELL"
            },
            "pendingQuantity": {
              "name": "pendingQuantity",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "pendingAboveType": {
              "name": "pendingAboveType",
              "type": "ENUM",
              "required": true,
              "description": "Supported values: LIMIT_MAKER, STOP_LOSS, and STOP_LOSS_LIMIT"
            },
            "pendingAboveClientOrderId": {
              "name": "pendingAboveClientOrderId",
              "type": "string",
              "required": false,
              "description": "Arbitrary unique ID among open orders for the pending above order. Automatically generated if not sent."
            },
            "pendingAbovePrice": {
              "name": "pendingAbovePrice",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "pendingAboveStopPrice": {
              "name": "pendingAboveStopPrice",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "pendingAboveTrailingDelta": {
              "name": "pendingAboveTrailingDelta",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "pendingAboveIcebergQty": {
              "name": "pendingAboveIcebergQty",
              "type": "DECIMAL",
              "required": false,
              "description": "This can only be used if pendingAboveTimeInForce is GTC or if pendingAboveType is LIMIT_MAKER."
            },
            "pendingAboveTimeInForce": {
              "name": "pendingAboveTimeInForce",
              "type": "ENUM",
              "required": false,
              "description": ""
            },
            "pendingAboveStrategyId": {
              "name": "pendingAboveStrategyId",
              "type": "INT",
              "required": false,
              "description": "Arbitrary numeric value identifying the pending above order within an order strategy."
            },
            "pendingAboveStrategyType": {
              "name": "pendingAboveStrategyType",
              "type": "INT",
              "required": false,
              "description": "Arbitrary numeric value identifying the pending above order strategy.  Values smaller than 1000000 are reserved and cannot be used."
            },
            "pendingBelowType": {
              "name": "pendingBelowType",
              "type": "ENUM",
              "required": false,
              "description": "Supported values: LIMIT_MAKER, STOP_LOSS, and STOP_LOSS_LIMIT"
            },
            "pendingBelowClientOrderId": {
              "name": "pendingBelowClientOrderId",
              "type": "string",
              "required": false,
              "description": "Arbitrary unique ID among open orders for the pending below order. Automatically generated if not sent."
            },
            "pendingBelowPrice": {
              "name": "pendingBelowPrice",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "pendingBelowStopPrice": {
              "name": "pendingBelowStopPrice",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "pendingBelowTrailingDelta": {
              "name": "pendingBelowTrailingDelta",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "pendingBelowIcebergQty": {
              "name": "pendingBelowIcebergQty",
              "type": "DECIMAL",
              "required": false,
              "description": "This can only be used if pendingBelowTimeInForce is GTC or if pendingBelowType is LIMIT_MAKER."
            },
            "pendingBelowTimeInForce": {
              "name": "pendingBelowTimeInForce",
              "type": "ENUM",
              "required": false,
              "description": ""
            },
            "pendingBelowStrategyId": {
              "name": "pendingBelowStrategyId",
              "type": "INT",
              "required": false,
              "description": "Arbitrary numeric value identifying the pending below order within an order strategy."
            },
            "pendingBelowStrategyType": {
              "name": "pendingBelowStrategyType",
              "type": "INT",
              "required": false,
              "description": "Arbitrary numeric value identifying the pending below order strategy.  Values smaller than 1000000 are reserved and cannot be used."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000."
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderListId": "number",
              "contingencyType": "string",
              "listStatusType": "OCOStatus",
              "listOrderStatus": "OCOOrderStatus",
              "listClientOrderId": "string",
              "transactionTime": "number",
              "symbol": "string",
              "orders": [
                {
                  "symbol": "string",
                  "orderId": "number",
                  "clientOrderId": "string"
                },
                null,
                null
              ],
              "orderReports": [
                {
                  "symbol": "string",
                  "orderId": "number",
                  "orderListId": "number",
                  "clientOrderId": "string",
                  "transactTime": "number",
                  "price": "NumberString",
                  "origQty": "NumberString",
                  "executedQty": "NumberString",
                  "cummulativeQuoteQty": "NumberString",
                  "status": "string",
                  "timeInForce": "TimeInForce",
                  "type": "OrderType",
                  "side": "OrderSide",
                  "workingTime": "number",
                  "selfTradePreventionMode": "string"
                },
                {
                  "symbol": "string",
                  "orderId": "number",
                  "orderListId": "number",
                  "clientOrderId": "string",
                  "transactTime": "number",
                  "price": "NumberString",
                  "origQty": "NumberString",
                  "executedQty": "NumberString",
                  "cummulativeQuoteQty": "NumberString",
                  "status": "string",
                  "timeInForce": "TimeInForce",
                  "type": "OrderType",
                  "side": "OrderSide",
                  "stopPrice": "NumberString",
                  "workingTime": "number",
                  "selfTradePreventionMode": "string"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "orderListId": 1,
              "contingencyType": "OTO",
              "listStatusType": "EXEC_STARTED",
              "listOrderStatus": "EXECUTING",
              "listClientOrderId": "RumwQpBaDctlUu5jyG5rs0",
              "transactionTime": 1712291372842,
              "symbol": "ABCDEF",
              "orders": [
                {
                  "symbol": "LTCBTC",
                  "orderId": 6,
                  "clientOrderId": "fM9Y4m23IFJVCQmIrlUmMK"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 7,
                  "clientOrderId": "6pcQbFIzTXGZQ1e2MkGDq4"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 8,
                  "clientOrderId": "r4JMv9cwAYYUwwBZfbussx"
                }
              ],
              "orderReports": [
                {
                  "symbol": "LTCBTC",
                  "orderId": 6,
                  "orderListId": 1,
                  "clientOrderId": "fM9Y4m23IFJVCQmIrlUmMK",
                  "transactTime": 1712291372842,
                  "price": "1.00000000",
                  "origQty": "1.00000000",
                  "executedQty": "0.00000000",
                  "cummulativeQuoteQty": "0.00000000",
                  "status": "NEW",
                  "timeInForce": "GTC",
                  "type": "LIMIT",
                  "side": "SELL",
                  "workingTime": 1712291372842,
                  "selfTradePreventionMode": "NONE"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 7,
                  "orderListId": 1,
                  "clientOrderId": "6pcQbFIzTXGZQ1e2MkGDq4",
                  "transactTime": 1712291372842,
                  "price": "1.00000000",
                  "origQty": "5.00000000",
                  "executedQty": "0.00000000",
                  "cummulativeQuoteQty": "0.00000000",
                  "status": "PENDING_NEW",
                  "timeInForce": "IOC",
                  "type": "STOP_LOSS_LIMIT",
                  "side": "BUY",
                  "stopPrice": "6.00000000",
                  "workingTime": -1,
                  "selfTradePreventionMode": "NONE"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 8,
                  "orderListId": 1,
                  "clientOrderId": "r4JMv9cwAYYUwwBZfbussx",
                  "transactTime": 1712291372842,
                  "price": "3.00000000",
                  "origQty": "5.00000000",
                  "executedQty": "0.00000000",
                  "cummulativeQuoteQty": "0.00000000",
                  "status": "PENDING_NEW",
                  "timeInForce": "GTC",
                  "type": "LIMIT_MAKER",
                  "side": "BUY",
                  "workingTime": -1,
                  "selfTradePreventionMode": "NONE"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Trading Endpoints",
      "path": "toc.spot-trading-endpoints.new-order-list-otoco-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#new-order-list-otoco-trade",
      "name": "New Order List - OTOCO (TRADE)"
    },
    {
      "description": "Cancel an entire Order List.",
      "securityType": "TRADE",
      "request": "DELETE /api/v3/orderList",
      "requestMethod": "DELETE",
      "requestEndPoint": "/api/v3/orderList",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderListId": {
          "name": "orderListId",
          "type": "LONG",
          "required": false,
          "description": "Either orderListId or listClientOrderId must be provided"
        },
        "listClientOrderId": {
          "name": "listClientOrderId",
          "type": "string",
          "required": false,
          "description": "Either orderListId or listClientOrderId must be provided"
        },
        "newClientOrderId": {
          "name": "newClientOrderId",
          "type": "string",
          "required": false,
          "description": "Used to uniquely identify this cancel. Automatically generated by default"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderListId": {
              "name": "orderListId",
              "type": "LONG",
              "required": false,
              "description": "Either orderListId or listClientOrderId must be provided"
            },
            "listClientOrderId": {
              "name": "listClientOrderId",
              "type": "string",
              "required": false,
              "description": "Either orderListId or listClientOrderId must be provided"
            },
            "newClientOrderId": {
              "name": "newClientOrderId",
              "type": "string",
              "required": false,
              "description": "Used to uniquely identify this cancel. Automatically generated by default"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderListId": "number",
              "contingencyType": "string",
              "listStatusType": "OCOStatus",
              "listOrderStatus": "OCOOrderStatus",
              "listClientOrderId": "string",
              "transactionTime": "number",
              "symbol": "string",
              "orders": [
                {
                  "symbol": "string",
                  "orderId": "number",
                  "clientOrderId": "string"
                },
                null
              ],
              "orderReports": [
                {
                  "symbol": "string",
                  "origClientOrderId": "string",
                  "orderId": "number",
                  "orderListId": "number",
                  "clientOrderId": "string",
                  "transactTime": "number",
                  "price": "NumberString",
                  "origQty": "NumberString",
                  "executedQty": "NumberString",
                  "cummulativeQuoteQty": "NumberString",
                  "status": "string",
                  "timeInForce": "TimeInForce",
                  "type": "OrderType",
                  "side": "OrderSide",
                  "stopPrice": "NumberString",
                  "selfTradePreventionMode": "string"
                },
                {
                  "symbol": "string",
                  "origClientOrderId": "string",
                  "orderId": "number",
                  "orderListId": "number",
                  "clientOrderId": "string",
                  "transactTime": "number",
                  "price": "NumberString",
                  "origQty": "NumberString",
                  "executedQty": "NumberString",
                  "cummulativeQuoteQty": "NumberString",
                  "status": "string",
                  "timeInForce": "TimeInForce",
                  "type": "OrderType",
                  "side": "OrderSide",
                  "selfTradePreventionMode": "string"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "orderListId": 0,
              "contingencyType": "OCO",
              "listStatusType": "ALL_DONE",
              "listOrderStatus": "ALL_DONE",
              "listClientOrderId": "C3wyj4WVEktd7u9aVBRXcN",
              "transactionTime": 1574040868128,
              "symbol": "LTCBTC",
              "orders": [
                {
                  "symbol": "LTCBTC",
                  "orderId": 2,
                  "clientOrderId": "pO9ufTiFGg3nw2fOdgeOXa"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 3,
                  "clientOrderId": "TXOvglzXuaubXAaENpaRCB"
                }
              ],
              "orderReports": [
                {
                  "symbol": "LTCBTC",
                  "origClientOrderId": "pO9ufTiFGg3nw2fOdgeOXa",
                  "orderId": 2,
                  "orderListId": 0,
                  "clientOrderId": "unfWT8ig8i0uj6lPuYLez6",
                  "transactTime": 1688005070874,
                  "price": "1.00000000",
                  "origQty": "10.00000000",
                  "executedQty": "0.00000000",
                  "cummulativeQuoteQty": "0.00000000",
                  "status": "CANCELED",
                  "timeInForce": "GTC",
                  "type": "STOP_LOSS_LIMIT",
                  "side": "SELL",
                  "stopPrice": "1.00000000",
                  "selfTradePreventionMode": "NONE"
                },
                {
                  "symbol": "LTCBTC",
                  "origClientOrderId": "TXOvglzXuaubXAaENpaRCB",
                  "orderId": 3,
                  "orderListId": 0,
                  "clientOrderId": "unfWT8ig8i0uj6lPuYLez6",
                  "transactTime": 1688005070874,
                  "price": "3.00000000",
                  "origQty": "10.00000000",
                  "executedQty": "0.00000000",
                  "cummulativeQuoteQty": "0.00000000",
                  "status": "CANCELED",
                  "timeInForce": "GTC",
                  "type": "LIMIT_MAKER",
                  "side": "SELL",
                  "selfTradePreventionMode": "NONE"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Trading Endpoints",
      "path": "toc.spot-trading-endpoints.cancel-order-lists-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#cancel-order-lists-trade",
      "name": "Cancel Order lists (TRADE)"
    },
    {
      "description": "Retrieves a specific Order list based on provided optional parameters",
      "securityType": "USER_DATA",
      "request": "GET /api/v3/orderList",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/orderList",
      "hmacSHA256": false,
      "weights": {
        "IP": 4,
        "IP_text": "4"
      },
      "baseParams": {
        "orderListId": {
          "name": "orderListId",
          "type": "LONG",
          "required": false,
          "description": "Either orderListId or origClientOrderId must be provided"
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": "Either orderListId or origClientOrderId must be provided"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderListId": {
              "name": "orderListId",
              "type": "LONG",
              "required": false,
              "description": "Either orderListId or origClientOrderId must be provided"
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": "Either orderListId or origClientOrderId must be provided"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderListId": "number",
              "contingencyType": "string",
              "listStatusType": "OCOStatus",
              "listOrderStatus": "OCOOrderStatus",
              "listClientOrderId": "string",
              "transactionTime": "number",
              "symbol": "string",
              "orders": [
                {
                  "symbol": "string",
                  "orderId": "number",
                  "clientOrderId": "string"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "orderListId": 27,
              "contingencyType": "OCO",
              "listStatusType": "EXEC_STARTED",
              "listOrderStatus": "EXECUTING",
              "listClientOrderId": "h2USkA5YQpaXHPIrkd96xE",
              "transactionTime": 1565245656253,
              "symbol": "LTCBTC",
              "orders": [
                {
                  "symbol": "LTCBTC",
                  "orderId": 4,
                  "clientOrderId": "qD1gy3kc3Gx0rihm9Y3xwS"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 5,
                  "clientOrderId": "ARzZ9I00CPM8i3NhmU9Ega"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Trading Endpoints",
      "path": "toc.spot-trading-endpoints.query-order-lists-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-order-lists-user_data",
      "name": "Query Order lists (USER_DATA)"
    },
    {
      "description": "Retrieves all Order lists based on provided optional parameters",
      "securityType": "USER_DATA",
      "request": "GET /api/v3/allOrderList",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/allOrderList",
      "hmacSHA256": false,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "If supplied, neither startTime or endTime can be provided"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default Value: 500; Max Value: 1000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "If supplied, neither startTime or endTime can be provided"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default Value: 500; Max Value: 1000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "orderListId": "number",
                "contingencyType": "string",
                "listStatusType": "OCOStatus",
                "listOrderStatus": "OCOOrderStatus",
                "listClientOrderId": "string",
                "transactionTime": "number",
                "symbol": "string",
                "orders": [
                  {
                    "symbol": "string",
                    "orderId": "number",
                    "clientOrderId": "string"
                  },
                  null
                ]
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "orderListId": 29,
                "contingencyType": "OCO",
                "listStatusType": "EXEC_STARTED",
                "listOrderStatus": "EXECUTING",
                "listClientOrderId": "amEEAXryFzFwYF1FeRpUoZ",
                "transactionTime": 1565245913483,
                "symbol": "LTCBTC",
                "orders": [
                  {
                    "symbol": "LTCBTC",
                    "orderId": 4,
                    "clientOrderId": "oD7aesZqjEGlZrbtRpy5zB"
                  },
                  {
                    "symbol": "LTCBTC",
                    "orderId": 5,
                    "clientOrderId": "Jr1h6xirOxgeJOUuYQS7V3"
                  }
                ]
              },
              {
                "orderListId": 28,
                "contingencyType": "OCO",
                "listStatusType": "EXEC_STARTED",
                "listOrderStatus": "EXECUTING",
                "listClientOrderId": "hG7hFNxJV6cZy3Ze4AUT4d",
                "transactionTime": 1565245913407,
                "symbol": "LTCBTC",
                "orders": [
                  {
                    "symbol": "LTCBTC",
                    "orderId": 2,
                    "clientOrderId": "j6lFOfbmFMRjTYA7rRJ0LP"
                  },
                  {
                    "symbol": "LTCBTC",
                    "orderId": 3,
                    "clientOrderId": "z0KCjOdditiLS5ekAFtK81"
                  }
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Trading Endpoints",
      "path": "toc.spot-trading-endpoints.query-all-order-lists-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-all-order-lists-user_data",
      "name": "Query all Order lists (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /api/v3/openOrderList",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/openOrderList",
      "hmacSHA256": false,
      "weights": {
        "IP": 6,
        "IP_text": "6"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "orderListId": "number",
                "contingencyType": "string",
                "listStatusType": "OCOStatus",
                "listOrderStatus": "OCOOrderStatus",
                "listClientOrderId": "string",
                "transactionTime": "number",
                "symbol": "string",
                "orders": [
                  {
                    "symbol": "string",
                    "orderId": "number",
                    "clientOrderId": "string"
                  },
                  null
                ]
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "orderListId": 31,
                "contingencyType": "OCO",
                "listStatusType": "EXEC_STARTED",
                "listOrderStatus": "EXECUTING",
                "listClientOrderId": "wuB13fmulKj3YjdqWEcsnp",
                "transactionTime": 1565246080644,
                "symbol": "LTCBTC",
                "orders": [
                  {
                    "symbol": "LTCBTC",
                    "orderId": 4,
                    "clientOrderId": "r3EH2N76dHfLoSZWIUw1bT"
                  },
                  {
                    "symbol": "LTCBTC",
                    "orderId": 5,
                    "clientOrderId": "Cv1SnyPD3qhqpbjpYEHbd2"
                  }
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Trading Endpoints",
      "path": "toc.spot-trading-endpoints.query-open-order-lists-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-open-order-lists-user_data",
      "name": "Query Open Order lists (USER_DATA)"
    },
    {
      "description": "Places an order using smart order routing (SOR).",
      "securityType": "TRADE",
      "request": "POST /api/v3/sor/order",
      "requestMethod": "POST",
      "requestEndPoint": "/api/v3/sor/order",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": ""
        },
        "type": {
          "name": "type",
          "type": "OrderType",
          "required": true,
          "description": ""
        },
        "timeInForce": {
          "name": "timeInForce",
          "type": "TimeInForce",
          "required": false,
          "description": ""
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "newClientOrderId": {
          "name": "newClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique id among open orders. Automatically generated if not sent. Orders with the same newClientOrderID can be accepted only when the previous one is filled, otherwise the order will be rejected."
        },
        "strategyId": {
          "name": "strategyId",
          "type": "INT",
          "required": false,
          "description": ""
        },
        "strategyType": {
          "name": "strategyType",
          "type": "INT",
          "required": false,
          "description": "The value cannot be less than 1000000."
        },
        "icebergQty": {
          "name": "icebergQty",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with LIMIT to create an iceberg order."
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "OrderResponseType",
          "required": false,
          "description": "Set the response JSON. ACK, RESULT, or FULL. Default to FULL"
        },
        "selfTradePreventionMode": {
          "name": "selfTradePreventionMode",
          "type": "ENUM",
          "required": false,
          "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": ""
            },
            "type": {
              "name": "type",
              "type": "OrderType",
              "required": true,
              "description": ""
            },
            "timeInForce": {
              "name": "timeInForce",
              "type": "TimeInForce",
              "required": false,
              "description": ""
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "newClientOrderId": {
              "name": "newClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique id among open orders. Automatically generated if not sent. Orders with the same newClientOrderID can be accepted only when the previous one is filled, otherwise the order will be rejected."
            },
            "strategyId": {
              "name": "strategyId",
              "type": "INT",
              "required": false,
              "description": ""
            },
            "strategyType": {
              "name": "strategyType",
              "type": "INT",
              "required": false,
              "description": "The value cannot be less than 1000000."
            },
            "icebergQty": {
              "name": "icebergQty",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with LIMIT to create an iceberg order."
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "OrderResponseType",
              "required": false,
              "description": "Set the response JSON. ACK, RESULT, or FULL. Default to FULL"
            },
            "selfTradePreventionMode": {
              "name": "selfTradePreventionMode",
              "type": "ENUM",
              "required": false,
              "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "orderId": "number",
              "orderListId": "number",
              "clientOrderId": "string",
              "transactTime": "number",
              "price": "NumberString",
              "origQty": "NumberString",
              "executedQty": "NumberString",
              "cummulativeQuoteQty": "NumberString",
              "status": "string",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "side": "OrderSide",
              "workingTime": "number",
              "fills": [
                {
                  "matchType": "string",
                  "price": "NumberString",
                  "qty": "NumberString",
                  "commission": "NumberString",
                  "commissionAsset": "string",
                  "tradeId": "number",
                  "allocId": "number"
                }
              ],
              "workingFloor": "WorkingFloor",
              "selfTradePreventionMode": "string",
              "usedSor": "boolean"
            }
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSDT",
              "orderId": 2,
              "orderListId": -1,
              "clientOrderId": "sBI1KM6nNtOfj5tccZSKly",
              "transactTime": 1689149087774,
              "price": "31000.00000000",
              "origQty": "0.50000000",
              "executedQty": "0.50000000",
              "cummulativeQuoteQty": "14000.00000000",
              "status": "FILLED",
              "timeInForce": "GTC",
              "type": "LIMIT",
              "side": "BUY",
              "workingTime": 1689149087774,
              "fills": [
                {
                  "matchType": "ONE_PARTY_TRADE_REPORT",
                  "price": "28000.00000000",
                  "qty": "0.50000000",
                  "commission": "0.00000000",
                  "commissionAsset": "BTC",
                  "tradeId": -1,
                  "allocId": 0
                }
              ],
              "workingFloor": "SOR",
              "selfTradePreventionMode": "NONE",
              "usedSor": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Trading Endpoints",
      "path": "toc.spot-trading-endpoints.new-order-using-sor-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#new-order-using-sor-trade",
      "name": "New order using SOR (TRADE)"
    },
    {
      "description": "Test new order creation and signature/recvWindow using smart order routing (SOR).\nCreates and validates a new order but does not send it into the matching engine.",
      "securityType": "TRADE",
      "request": "POST /api/v3/sor/order/test",
      "requestMethod": "POST",
      "requestEndPoint": "/api/v3/sor/order/test",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "\nCondition                      Request Weight\nWithout computeCommissionRates 1             \nWith computeCommissionRates    20            "
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": ""
        },
        "type": {
          "name": "type",
          "type": "OrderType",
          "required": true,
          "description": ""
        },
        "timeInForce": {
          "name": "timeInForce",
          "type": "TimeInForce",
          "required": false,
          "description": ""
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "newClientOrderId": {
          "name": "newClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique id among open orders. Automatically generated if not sent. Orders with the same newClientOrderID can be accepted only when the previous one is filled, otherwise the order will be rejected."
        },
        "strategyId": {
          "name": "strategyId",
          "type": "INT",
          "required": false,
          "description": ""
        },
        "strategyType": {
          "name": "strategyType",
          "type": "INT",
          "required": false,
          "description": "The value cannot be less than 1000000."
        },
        "icebergQty": {
          "name": "icebergQty",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with LIMIT to create an iceberg order."
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "OrderResponseType",
          "required": false,
          "description": "Set the response JSON. ACK, RESULT, or FULL. Default to FULL"
        },
        "selfTradePreventionMode": {
          "name": "selfTradePreventionMode",
          "type": "ENUM",
          "required": false,
          "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "computeCommissionRates": {
          "name": "computeCommissionRates",
          "type": "boolean",
          "required": false,
          "description": "Default: false"
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": ""
            },
            "type": {
              "name": "type",
              "type": "OrderType",
              "required": true,
              "description": ""
            },
            "timeInForce": {
              "name": "timeInForce",
              "type": "TimeInForce",
              "required": false,
              "description": ""
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "newClientOrderId": {
              "name": "newClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique id among open orders. Automatically generated if not sent. Orders with the same newClientOrderID can be accepted only when the previous one is filled, otherwise the order will be rejected."
            },
            "strategyId": {
              "name": "strategyId",
              "type": "INT",
              "required": false,
              "description": ""
            },
            "strategyType": {
              "name": "strategyType",
              "type": "INT",
              "required": false,
              "description": "The value cannot be less than 1000000."
            },
            "icebergQty": {
              "name": "icebergQty",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with LIMIT to create an iceberg order."
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "OrderResponseType",
              "required": false,
              "description": "Set the response JSON. ACK, RESULT, or FULL. Default to FULL"
            },
            "selfTradePreventionMode": {
              "name": "selfTradePreventionMode",
              "type": "ENUM",
              "required": false,
              "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "computeCommissionRates": {
              "name": "computeCommissionRates",
              "type": "boolean",
              "required": false,
              "description": "Default: false"
            }
          },
          "responseNames": [
            "",
            ""
          ],
          "responseTypes": [
            {},
            {
              "standardCommissionForOrder": { //Standard commission rates on trades from the order.
                "maker": "NumberString",
                "taker": "NumberString"
              },
              "taxCommissionForOrder": { //Tax commission rates for trades from the order.
                "maker": "NumberString",
                "taker": "NumberString"
              },
              "discount": { //Discount on standard commissions when paying in BNB.
                "enabledForAccount": "boolean",
                "enabledForSymbol": "boolean",
                "discountAsset": "string",
                "discount": "NumberString" //Standard commission is reduced by this rate when paying commission in BNB.
              }
            }
          ],
          "responseExamples": [
            {},
            {
              "standardCommissionForOrder": { //Standard commission rates on trades from the order.
                "maker": "0.00000112",
                "taker": "0.00000114"
              },
              "taxCommissionForOrder": { //Tax commission rates for trades from the order.
                "maker": "0.00000112",
                "taker": "0.00000114"
              },
              "discount": { //Discount on standard commissions when paying in BNB.
                "enabledForAccount": true,
                "enabledForSymbol": true,
                "discountAsset": "BNB",
                "discount": "0.25000000" //Standard commission is reduced by this rate when paying commission in BNB.
              }
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Trading Endpoints",
      "path": "toc.spot-trading-endpoints.test-new-order-using-sor-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#test-new-order-using-sor-trade",
      "name": "Test new order using SOR (TRADE)"
    },
    {
      "description": "Get current account information.",
      "securityType": "USER_DATA",
      "request": "GET /api/v3/account",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/account",
      "hmacSHA256": false,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "omitZeroBalances": {
          "name": "omitZeroBalances",
          "type": "boolean",
          "required": false,
          "description": "When set to true, emits only the non-zero balances of an account. Default value: false"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "omitZeroBalances": {
              "name": "omitZeroBalances",
              "type": "boolean",
              "required": false,
              "description": "When set to true, emits only the non-zero balances of an account. Default value: false"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "makerCommission": "number",
              "takerCommission": "number",
              "buyerCommission": "number",
              "sellerCommission": "number",
              "commissionRates": {
                "maker": "NumberString",
                "taker": "NumberString",
                "buyer": "NumberString",
                "seller": "NumberString"
              },
              "canTrade": "boolean",
              "canWithdraw": "boolean",
              "canDeposit": "boolean",
              "brokered": "boolean",
              "requireSelfTradePrevention": "boolean",
              "preventSor": "boolean",
              "updateTime": "number",
              "accountType": "string",
              "balances": [
                {
                  "asset": "string",
                  "free": "NumberString",
                  "locked": "NumberString"
                },
                null
              ],
              "permissions": [
                "Permission"
              ],
              "uid": "number"
            }
          ],
          "responseExamples": [
            {
              "makerCommission": 15,
              "takerCommission": 15,
              "buyerCommission": 0,
              "sellerCommission": 0,
              "commissionRates": {
                "maker": "0.00150000",
                "taker": "0.00150000",
                "buyer": "0.00000000",
                "seller": "0.00000000"
              },
              "canTrade": true,
              "canWithdraw": true,
              "canDeposit": true,
              "brokered": false,
              "requireSelfTradePrevention": false,
              "preventSor": false,
              "updateTime": 123456789,
              "accountType": "SPOT",
              "balances": [
                {
                  "asset": "BTC",
                  "free": "4723846.89208129",
                  "locked": "0.00000000"
                },
                {
                  "asset": "LTC",
                  "free": "4763368.68006011",
                  "locked": "0.00000000"
                }
              ],
              "permissions": [
                "SPOT"
              ],
              "uid": 354937868
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Account Endpoints",
      "path": "toc.spot-account-endpoints.account-information-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#account-information-user_data",
      "name": "Account Information (USER_DATA)"
    },
    {
      "description": "Get trades for a specific account and symbol.",
      "securityType": "USER_DATA",
      "request": "GET /api/v3/myTrades",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/myTrades",
      "hmacSHA256": false,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": "This can only be used in combination with symbol."
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "TradeId to fetch from. Default gets most recent trades."
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": "This can only be used in combination with symbol."
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "TradeId to fetch from. Default gets most recent trades."
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "id": "number",
                "orderId": "number",
                "orderListId": "number", //Unless an order list, the value will always be -1
                "price": "NumberString",
                "qty": "NumberString",
                "quoteQty": "NumberString",
                "commission": "NumberString",
                "commissionAsset": "string",
                "time": "number",
                "isBuyer": "boolean",
                "isMaker": "boolean",
                "isBestMatch": "boolean"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BNBBTC",
                "id": 28457,
                "orderId": 100234,
                "orderListId": -1, //Unless an order list, the value will always be -1
                "price": "4.00000100",
                "qty": "12.00000000",
                "quoteQty": "48.000012",
                "commission": "10.10000000",
                "commissionAsset": "BNB",
                "time": 1499865549590,
                "isBuyer": true,
                "isMaker": false,
                "isBestMatch": true
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Account Endpoints",
      "path": "toc.spot-account-endpoints.account-trade-list-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#account-trade-list-user_data",
      "name": "Account Trade List (USER_DATA)"
    },
    {
      "description": "Displays the user's unfilled order count for all intervals.",
      "securityType": "USER_DATA",
      "request": "GET /api/v3/rateLimit/order",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/rateLimit/order",
      "hmacSHA256": false,
      "weights": {
        "IP": 40,
        "IP_text": "40"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "rateLimitType": "RateLimitType",
                "interval": "RateLimitInterval",
                "intervalNum": "number",
                "limit": "number",
                "count": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "rateLimitType": "ORDERS",
                "interval": "SECOND",
                "intervalNum": 10,
                "limit": 10000,
                "count": 0
              },
              {
                "rateLimitType": "ORDERS",
                "interval": "DAY",
                "intervalNum": 1,
                "limit": 20000,
                "count": 0
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Account Endpoints",
      "path": "toc.spot-account-endpoints.query-unfilled-order-count-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-unfilled-order-count-user_data",
      "name": "Query Unfilled Order Count (USER_DATA)"
    },
    {
      "description": "Displays the list of orders that were expired because of STP.",
      "securityType": "USER_DATA",
      "request": "GET /api/v3/myPreventedMatches",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/myPreventedMatches",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "By parameters:\nCase                         Weight\nIf symbol is invalid         2     \nQuerying by preventedMatchId 2     \nQuerying by orderId          20    "
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "preventedMatchId": {
          "name": "preventedMatchId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "fromPreventedMatchId": {
          "name": "fromPreventedMatchId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default: 500; Max: 1000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "preventedMatchId": {
              "name": "preventedMatchId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "fromPreventedMatchId": {
              "name": "fromPreventedMatchId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default: 500; Max: 1000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "preventedMatchId": "number",
                "takerOrderId": "number",
                "makerOrderId": "number",
                "tradeGroupId": "number",
                "selfTradePreventionMode": "string",
                "price": "NumberString",
                "makerPreventedQuantity": "NumberString",
                "transactTime": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSDT",
                "preventedMatchId": 1,
                "takerOrderId": 5,
                "makerOrderId": 3,
                "tradeGroupId": 1,
                "selfTradePreventionMode": "EXPIRE_MAKER",
                "price": "1.100000",
                "makerPreventedQuantity": "1.300000",
                "transactTime": 1669101687094
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Account Endpoints",
      "path": "toc.spot-account-endpoints.query-prevented-matches-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-prevented-matches-user_data",
      "name": "Query Prevented Matches (USER_DATA)"
    },
    {
      "description": "Retrieves allocations resulting from SOR order placement.",
      "securityType": "USER_DATA",
      "request": "GET /api/v3/myAllocations",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/myAllocations",
      "hmacSHA256": false,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "fromAllocationId": {
          "name": "fromAllocationId",
          "type": "INT",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500;Max 1000"
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000."
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "fromAllocationId": {
              "name": "fromAllocationId",
              "type": "INT",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500;Max 1000"
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000."
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "allocationId": "number",
                "allocationType": "string",
                "orderId": "number",
                "orderListId": "number",
                "price": "NumberString",
                "qty": "NumberString",
                "quoteQty": "NumberString",
                "commission": "NumberString",
                "commissionAsset": "string",
                "time": "number",
                "isBuyer": "boolean",
                "isMaker": "boolean",
                "isAllocator": "boolean"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSDT",
                "allocationId": 0,
                "allocationType": "SOR",
                "orderId": 1,
                "orderListId": -1,
                "price": "1.00000000",
                "qty": "5.00000000",
                "quoteQty": "5.00000000",
                "commission": "0.00000000",
                "commissionAsset": "BTC",
                "time": 1687506878118,
                "isBuyer": true,
                "isMaker": false,
                "isAllocator": false
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Account Endpoints",
      "path": "toc.spot-account-endpoints.query-allocations-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-allocations-user_data",
      "name": "Query Allocations (USER_DATA)"
    },
    {
      "description": "Get current account commission rates.",
      "securityType": "USER_DATA",
      "request": "GET /api/v3/account/commission",
      "requestMethod": "GET",
      "requestEndPoint": "/api/v3/account/commission",
      "hmacSHA256": false,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "standardCommission": { //Standard commission rates on trades from the order.
                "maker": "NumberString",
                "taker": "NumberString",
                "buyer": "NumberString",
                "seller": "NumberString"
              },
              "taxCommission": { //Tax commission rates for trades from the order.
                "maker": "NumberString",
                "taker": "NumberString",
                "buyer": "NumberString",
                "seller": "NumberString"
              },
              "discount": { //Discount commission when paying in BNB
                "enabledForAccount": "boolean",
                "enabledForSymbol": "boolean",
                "discountAsset": "string",
                "discount": "NumberString" //Standard commission is reduced by this rate when paying commission in BNB.
              }
            }
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSDT",
              "standardCommission": { //Standard commission rates on trades from the order.
                "maker": "0.00000010",
                "taker": "0.00000020",
                "buyer": "0.00000030",
                "seller": "0.00000040"
              },
              "taxCommission": { //Tax commission rates for trades from the order.
                "maker": "0.00000112",
                "taker": "0.00000114",
                "buyer": "0.00000118",
                "seller": "0.00000116"
              },
              "discount": { //Discount commission when paying in BNB
                "enabledForAccount": true,
                "enabledForSymbol": true,
                "discountAsset": "BNB",
                "discount": "0.75000000" //Standard commission is reduced by this rate when paying commission in BNB.
              }
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Account Endpoints",
      "path": "toc.spot-account-endpoints.query-commission-rates-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-commission-rates-user_data",
      "name": "Query Commission Rates (USER_DATA)"
    },
    {
      "description": "Margin account borrow/repay(MARGIN)",
      "securityType": "MARGIN",
      "request": "POST /sapi/v1/margin/borrow-repay",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/margin/borrow-repay",
      "hmacSHA256": false,
      "weights": {
        "UID": 1500,
        "UID_text": "1500"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "isIsolated": {
          "name": "isIsolated",
          "type": "string",
          "required": true,
          "description": "TRUE for Isolated Margin, FALSE for Cross Margin, Default FALSE"
        },
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "Only for Isolated margin"
        },
        "amount": {
          "name": "amount",
          "type": "string",
          "required": true,
          "description": ""
        },
        "type": {
          "name": "type",
          "type": "string",
          "required": true,
          "description": "BORROW or REPAY"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "isIsolated": {
              "name": "isIsolated",
              "type": "string",
              "required": true,
              "description": "TRUE for Isolated Margin, FALSE for Cross Margin, Default FALSE"
            },
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Only for Isolated margin"
            },
            "amount": {
              "name": "amount",
              "type": "string",
              "required": true,
              "description": ""
            },
            "type": {
              "name": "type",
              "type": "string",
              "required": true,
              "description": "BORROW or REPAY"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              //transaction id
              "tranId": "number"
            }
          ],
          "responseExamples": [
            {
              //transaction id
              "tranId": 100000001
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.margin-account-borrow-repay-margin",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#margin-account-borrow-repay-margin",
      "name": "Margin account borrow/repay(MARGIN)"
    },
    {
      "description": "Query borrow/repay records in Margin account",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/borrow-repay",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/borrow-repay",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "isolatedSymbol": {
          "name": "isolatedSymbol",
          "type": "string",
          "required": false,
          "description": "Symbol in Isolated Margin"
        },
        "txId": {
          "name": "txId",
          "type": "LONG",
          "required": false,
          "description": "tranId in POST /sapi/v1/margin/loan"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Current querying page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10 Max:100"
        },
        "type": {
          "name": "type",
          "type": "string",
          "required": true,
          "description": "BORROW or REPAY"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "isolatedSymbol": {
              "name": "isolatedSymbol",
              "type": "string",
              "required": false,
              "description": "Symbol in Isolated Margin"
            },
            "txId": {
              "name": "txId",
              "type": "LONG",
              "required": false,
              "description": "tranId in POST /sapi/v1/margin/loan"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Current querying page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10 Max:100"
            },
            "type": {
              "name": "type",
              "type": "string",
              "required": true,
              "description": "BORROW or REPAY"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "isolatedSymbol": "string", // isolated symbol, will not be returned for crossed margin
                  "amount": "NumberString", // Total amount borrowed/repaid
                  "asset": "string",
                  "interest": "NumberString", // Interest repaid
                  "principal": "NumberString", // Principal repaid
                  "status": "string", //one of PENDING (pending execution), CONFIRMED (successfully execution), FAILED (execution failed, nothing happened to your account);
                  "timestamp": "number",
                  "txId": "number"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "isolatedSymbol": "BNBUSDT", // isolated symbol, will not be returned for crossed margin
                  "amount": "14.00000000", // Total amount borrowed/repaid
                  "asset": "BNB",
                  "interest": "0.01866667", // Interest repaid
                  "principal": "13.98133333", // Principal repaid
                  "status": "CONFIRMED", //one of PENDING (pending execution), CONFIRMED (successfully execution), FAILED (execution failed, nothing happened to your account);
                  "timestamp": 1563438204000,
                  "txId": 2970933056
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-borrow-repay-records-in-margin-account-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-borrow-repay-records-in-margin-account-user_data",
      "name": "Query borrow/repay records in Margin account(USER_DATA)"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /sapi/v1/margin/allAssets",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/allAssets",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "assetFullName": "string",
                "assetName": "string",
                "isBorrowable": "boolean",
                "isMortgageable": "boolean",
                "userMinBorrow": "NumberString",
                "userMinRepay": "NumberString",
                "delistTime": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "assetFullName": "USD coin",
                "assetName": "USDC",
                "isBorrowable": true,
                "isMortgageable": true,
                "userMinBorrow": "0.00000000",
                "userMinRepay": "0.00000000",
                "delistTime": 1704973040
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.get-all-margin-assets-market_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-all-margin-assets-market_data",
      "name": "Get All Margin Assets (MARKET_DATA)"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /sapi/v1/margin/allPairs",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/allPairs",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "base": "string",
                "id": "number",
                "isBuyAllowed": "boolean",
                "isMarginTrade": "boolean",
                "isSellAllowed": "boolean",
                "quote": "string",
                "symbol": "string"
              },
              {
                "base": "string",
                "id": "number",
                "isBuyAllowed": "boolean",
                "isMarginTrade": "boolean",
                "isSellAllowed": "boolean",
                "quote": "string",
                "symbol": "string",
                "delistTime": "number"
              },
              null,
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "base": "BNB",
                "id": 351637150141315840,
                "isBuyAllowed": true,
                "isMarginTrade": true,
                "isSellAllowed": true,
                "quote": "BTC",
                "symbol": "BNBBTC"
              },
              {
                "base": "TRX",
                "id": 351637923235429100,
                "isBuyAllowed": true,
                "isMarginTrade": true,
                "isSellAllowed": true,
                "quote": "BTC",
                "symbol": "TRXBTC",
                "delistTime": 1704973040
              },
              {
                "base": "XRP",
                "id": 351638112213990140,
                "isBuyAllowed": true,
                "isMarginTrade": true,
                "isSellAllowed": true,
                "quote": "BTC",
                "symbol": "XRPBTC"
              },
              {
                "base": "ETH",
                "id": 351638524530850560,
                "isBuyAllowed": true,
                "isMarginTrade": true,
                "isSellAllowed": true,
                "quote": "BTC",
                "symbol": "ETHBTC"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.get-all-cross-margin-pairs-market_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-all-cross-margin-pairs-market_data",
      "name": "Get All Cross Margin Pairs (MARKET_DATA)"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /sapi/v1/margin/priceIndex",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/priceIndex",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "calcTime": "number",
              "price": "NumberString",
              "symbol": "string"
            }
          ],
          "responseExamples": [
            {
              "calcTime": 1562046418000,
              "price": "0.00333930",
              "symbol": "BNBBTC"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-margin-priceindex-market_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-margin-priceindex-market_data",
      "name": "Query Margin PriceIndex (MARKET_DATA)"
    },
    {
      "description": "Post a new order for margin account.",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/margin/order",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/margin/order",
      "hmacSHA256": false,
      "weights": {
        "UID": 6,
        "UID_text": "6"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "isIsolated": {
          "name": "isIsolated",
          "type": "string",
          "required": false,
          "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": "BUYSELL"
        },
        "type": {
          "name": "type",
          "type": "OrderType",
          "required": true,
          "description": ""
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "quoteOrderQty": {
          "name": "quoteOrderQty",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "stopPrice": {
          "name": "stopPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders."
        },
        "newClientOrderId": {
          "name": "newClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique id among open orders. Automatically generated if not sent."
        },
        "icebergQty": {
          "name": "icebergQty",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order."
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "OrderResponseType",
          "required": false,
          "description": "Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK."
        },
        "sideEffectType": {
          "name": "sideEffectType",
          "type": "\"NO_SIDE_EFFECT\"|\"MARGIN_BUY\"|\"AUTO_REPAY\"|\"AUTO_BORROW_REPAY\"",
          "required": false,
          "description": "NO_SIDE_EFFECT, MARGIN_BUY, AUTO_REPAY,AUTO_BORROW_REPAY; default NO_SIDE_EFFECT. More info in FAQ"
        },
        "timeInForce": {
          "name": "timeInForce",
          "type": "\"GTC\"|\"IOC\"|\"FOK\"",
          "required": false,
          "description": "GTC,IOC,FOK"
        },
        "selfTradePreventionMode": {
          "name": "selfTradePreventionMode",
          "type": "ENUM",
          "required": false,
          "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE"
        },
        "autoRepayAtCancel": {
          "name": "autoRepayAtCancel",
          "type": "boolean",
          "required": false,
          "description": "Only when MARGIN_BUY or AUTO_BORROW_REPAY order takes effect, true means that the debt generated by the order needs to be repay after the order is cancelled. The default is true"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "isIsolated": {
              "name": "isIsolated",
              "type": "string",
              "required": false,
              "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": "BUYSELL"
            },
            "type": {
              "name": "type",
              "type": "OrderType",
              "required": true,
              "description": ""
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "quoteOrderQty": {
              "name": "quoteOrderQty",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "stopPrice": {
              "name": "stopPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders."
            },
            "newClientOrderId": {
              "name": "newClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique id among open orders. Automatically generated if not sent."
            },
            "icebergQty": {
              "name": "icebergQty",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order."
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "OrderResponseType",
              "required": false,
              "description": "Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK."
            },
            "sideEffectType": {
              "name": "sideEffectType",
              "type": "\"NO_SIDE_EFFECT\"|\"MARGIN_BUY\"|\"AUTO_REPAY\"|\"AUTO_BORROW_REPAY\"",
              "required": false,
              "description": "NO_SIDE_EFFECT, MARGIN_BUY, AUTO_REPAY,AUTO_BORROW_REPAY; default NO_SIDE_EFFECT. More info in FAQ"
            },
            "timeInForce": {
              "name": "timeInForce",
              "type": "\"GTC\"|\"IOC\"|\"FOK\"",
              "required": false,
              "description": "GTC,IOC,FOK"
            },
            "selfTradePreventionMode": {
              "name": "selfTradePreventionMode",
              "type": "ENUM",
              "required": false,
              "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE"
            },
            "autoRepayAtCancel": {
              "name": "autoRepayAtCancel",
              "type": "boolean",
              "required": false,
              "description": "Only when MARGIN_BUY or AUTO_BORROW_REPAY order takes effect, true means that the debt generated by the order needs to be repay after the order is cancelled. The default is true"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "ACK:",
            "RESULT:",
            "FULL:"
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "orderId": "number",
              "clientOrderId": "string",
              "isIsolated": "boolean", // if isolated margin
              "transactTime": "number"
            },
            {
              "symbol": "string",
              "orderId": "number",
              "clientOrderId": "string",
              "transactTime": "number",
              "price": "NumberString",
              "origQty": "NumberString",
              "executedQty": "NumberString",
              "cummulativeQuoteQty": "NumberString",
              "status": "string",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "isIsolated": "boolean", // if isolated margin
              "side": "OrderSide",
              "selfTradePreventionMode": "string"
            },
            {
              "symbol": "string",
              "orderId": "number",
              "clientOrderId": "string",
              "transactTime": "number",
              "price": "NumberString",
              "origQty": "NumberString",
              "executedQty": "NumberString",
              "cummulativeQuoteQty": "NumberString",
              "status": "string",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "side": "OrderSide",
              "marginBuyBorrowAmount": "number", // will not return if no margin trade happens
              "marginBuyBorrowAsset": "string", // will not return if no margin trade happens
              "isIsolated": "boolean", // if isolated margin
              "selfTradePreventionMode": "string",
              "fills": [
                {
                  "price": "NumberString",
                  "qty": "NumberString",
                  "commission": "NumberString",
                  "commissionAsset": "string"
                },
                null,
                null,
                null,
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSDT",
              "orderId": 28,
              "clientOrderId": "6gCrw2kRUAF9CvJDGP16IP",
              "isIsolated": true, // if isolated margin
              "transactTime": 1507725176595
            },
            {
              "symbol": "BTCUSDT",
              "orderId": 28,
              "clientOrderId": "6gCrw2kRUAF9CvJDGP16IP",
              "transactTime": 1507725176595,
              "price": "1.00000000",
              "origQty": "10.00000000",
              "executedQty": "10.00000000",
              "cummulativeQuoteQty": "30000",
              "status": "FILLED",
              "timeInForce": "GTC",
              "type": "MARKET",
              "isIsolated": true, // if isolated margin
              "side": "SELL",
              "selfTradePreventionMode": "NONE"
            },
            {
              "symbol": "BTCUSDT",
              "orderId": 28,
              "clientOrderId": "6gCrw2kRUAF9CvJDGP16IP",
              "transactTime": 1507725176595,
              "price": "1.00000000",
              "origQty": "10.00000000",
              "executedQty": "10.00000000",
              "cummulativeQuoteQty": "39983.00000000",
              "status": "FILLED",
              "timeInForce": "GTC",
              "type": "MARKET",
              "side": "SELL",
              "marginBuyBorrowAmount": 5, // will not return if no margin trade happens
              "marginBuyBorrowAsset": "BTC", // will not return if no margin trade happens
              "isIsolated": true, // if isolated margin
              "selfTradePreventionMode": "NONE",
              "fills": [
                {
                  "price": "4000.00000000",
                  "qty": "1.00000000",
                  "commission": "4.00000000",
                  "commissionAsset": "USDT"
                },
                {
                  "price": "3999.00000000",
                  "qty": "5.00000000",
                  "commission": "19.99500000",
                  "commissionAsset": "USDT"
                },
                {
                  "price": "3998.00000000",
                  "qty": "2.00000000",
                  "commission": "7.99600000",
                  "commissionAsset": "USDT"
                },
                {
                  "price": "3997.00000000",
                  "qty": "1.00000000",
                  "commission": "3.99700000",
                  "commissionAsset": "USDT"
                },
                {
                  "price": "3995.00000000",
                  "qty": "1.00000000",
                  "commission": "3.99500000",
                  "commissionAsset": "USDT"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.margin-account-new-order-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#margin-account-new-order-trade",
      "name": "Margin Account New Order (TRADE)"
    },
    {
      "description": "Cancel an active order for margin account.",
      "securityType": "TRADE",
      "request": "DELETE /sapi/v1/margin/order",
      "requestMethod": "DELETE",
      "requestEndPoint": "/sapi/v1/margin/order",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "isIsolated": {
          "name": "isIsolated",
          "type": "string",
          "required": false,
          "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "newClientOrderId": {
          "name": "newClientOrderId",
          "type": "string",
          "required": false,
          "description": "Used to uniquely identify this cancel. Automatically generated by default."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "isIsolated": {
              "name": "isIsolated",
              "type": "string",
              "required": false,
              "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "newClientOrderId": {
              "name": "newClientOrderId",
              "type": "string",
              "required": false,
              "description": "Used to uniquely identify this cancel. Automatically generated by default."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "isIsolated": "boolean", // if isolated margin
              "orderId": "NumberString",
              "origClientOrderId": "string",
              "clientOrderId": "string",
              "price": "NumberString",
              "origQty": "NumberString",
              "executedQty": "NumberString",
              "cummulativeQuoteQty": "NumberString",
              "status": "string",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "side": "OrderSide"
            }
          ],
          "responseExamples": [
            {
              "symbol": "LTCBTC",
              "isIsolated": true, // if isolated margin
              "orderId": "28",
              "origClientOrderId": "myOrder1",
              "clientOrderId": "cancelMyOrder1",
              "price": "1.00000000",
              "origQty": "10.00000000",
              "executedQty": "8.00000000",
              "cummulativeQuoteQty": "8.00000000",
              "status": "CANCELED",
              "timeInForce": "GTC",
              "type": "LIMIT",
              "side": "SELL"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.margin-account-cancel-order-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#margin-account-cancel-order-trade",
      "name": "Margin Account Cancel Order (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "DELETE /sapi/v1/margin/openOrders",
      "requestMethod": "DELETE",
      "requestEndPoint": "/sapi/v1/margin/openOrders",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "isIsolated": {
          "name": "isIsolated",
          "type": "string",
          "required": false,
          "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "isIsolated": {
              "name": "isIsolated",
              "type": "string",
              "required": false,
              "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "isIsolated": "boolean", // if isolated margin
                "origClientOrderId": "string",
                "orderId": "number",
                "orderListId": "number",
                "clientOrderId": "string",
                "price": "NumberString",
                "origQty": "NumberString",
                "executedQty": "NumberString",
                "cummulativeQuoteQty": "NumberString",
                "status": "string",
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "side": "OrderSide",
                "selfTradePreventionMode": "string"
              },
              null,
              {
                "orderListId": "number",
                "contingencyType": "string",
                "listStatusType": "OCOStatus",
                "listOrderStatus": "OCOOrderStatus",
                "listClientOrderId": "string",
                "transactionTime": "number",
                "symbol": "string",
                "isIsolated": "boolean", // if isolated margin
                "orders": [
                  {
                    "symbol": "string",
                    "orderId": "number",
                    "clientOrderId": "string"
                  },
                  null
                ],
                "orderReports": [
                  {
                    "symbol": "string",
                    "origClientOrderId": "string",
                    "orderId": "number",
                    "orderListId": "number",
                    "clientOrderId": "string",
                    "price": "NumberString",
                    "origQty": "NumberString",
                    "executedQty": "NumberString",
                    "cummulativeQuoteQty": "NumberString",
                    "status": "string",
                    "timeInForce": "TimeInForce",
                    "type": "OrderType",
                    "side": "OrderSide",
                    "stopPrice": "NumberString",
                    "icebergQty": "NumberString"
                  },
                  {
                    "symbol": "string",
                    "origClientOrderId": "string",
                    "orderId": "number",
                    "orderListId": "number",
                    "clientOrderId": "string",
                    "price": "NumberString",
                    "origQty": "NumberString",
                    "executedQty": "NumberString",
                    "cummulativeQuoteQty": "NumberString",
                    "status": "string",
                    "timeInForce": "TimeInForce",
                    "type": "OrderType",
                    "side": "OrderSide",
                    "icebergQty": "NumberString"
                  }
                ]
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSDT",
                "isIsolated": true, // if isolated margin
                "origClientOrderId": "E6APeyTJvkMvLMYMqu1KQ4",
                "orderId": 11,
                "orderListId": -1,
                "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                "price": "0.089853",
                "origQty": "0.178622",
                "executedQty": "0.000000",
                "cummulativeQuoteQty": "0.000000",
                "status": "CANCELED",
                "timeInForce": "GTC",
                "type": "LIMIT",
                "side": "BUY",
                "selfTradePreventionMode": "NONE"
              },
              {
                "symbol": "BTCUSDT",
                "isIsolated": false, // if isolated margin
                "origClientOrderId": "A3EF2HCwxgZPFMrfwbgrhv",
                "orderId": 13,
                "orderListId": -1,
                "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                "price": "0.090430",
                "origQty": "0.178622",
                "executedQty": "0.000000",
                "cummulativeQuoteQty": "0.000000",
                "status": "CANCELED",
                "timeInForce": "GTC",
                "type": "LIMIT",
                "side": "BUY",
                "selfTradePreventionMode": "NONE"
              },
              {
                "orderListId": 1929,
                "contingencyType": "OCO",
                "listStatusType": "ALL_DONE",
                "listOrderStatus": "ALL_DONE",
                "listClientOrderId": "2inzWQdDvZLHbbAmAozX2N",
                "transactionTime": 1585230948299,
                "symbol": "BTCUSDT",
                "isIsolated": true, // if isolated margin
                "orders": [
                  {
                    "symbol": "BTCUSDT",
                    "orderId": 20,
                    "clientOrderId": "CwOOIPHSmYywx6jZX77TdL"
                  },
                  {
                    "symbol": "BTCUSDT",
                    "orderId": 21,
                    "clientOrderId": "461cPg51vQjV3zIMOXNz39"
                  }
                ],
                "orderReports": [
                  {
                    "symbol": "BTCUSDT",
                    "origClientOrderId": "CwOOIPHSmYywx6jZX77TdL",
                    "orderId": 20,
                    "orderListId": 1929,
                    "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                    "price": "0.668611",
                    "origQty": "0.690354",
                    "executedQty": "0.000000",
                    "cummulativeQuoteQty": "0.000000",
                    "status": "CANCELED",
                    "timeInForce": "GTC",
                    "type": "STOP_LOSS_LIMIT",
                    "side": "BUY",
                    "stopPrice": "0.378131",
                    "icebergQty": "0.017083"
                  },
                  {
                    "symbol": "BTCUSDT",
                    "origClientOrderId": "461cPg51vQjV3zIMOXNz39",
                    "orderId": 21,
                    "orderListId": 1929,
                    "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                    "price": "0.008791",
                    "origQty": "0.690354",
                    "executedQty": "0.000000",
                    "cummulativeQuoteQty": "0.000000",
                    "status": "CANCELED",
                    "timeInForce": "GTC",
                    "type": "LIMIT_MAKER",
                    "side": "BUY",
                    "icebergQty": "0.639962"
                  }
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.margin-account-cancel-all-open-orders-on-a-symbol-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#margin-account-cancel-all-open-orders-on-a-symbol-trade",
      "name": "Margin Account Cancel all Open Orders on a Symbol (TRADE)"
    },
    {
      "description": "Adjust cross margin max leverage",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/margin/max-leverage",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/margin/max-leverage",
      "hmacSHA256": false,
      "weights": {
        "UID": 3000,
        "UID_text": "3000"
      },
      "baseParams": {
        "maxLeverage": {
          "name": "maxLeverage",
          "type": "INTEGER",
          "required": true,
          "description": "Can only adjust 3 , 5 or 10，Example: maxLeverage=10 for Cross Margin Pro ，maxLeverage = 5 or 3 for Cross Margin Classic"
        }
      },
      "overloads": [
        {
          "params": {
            "maxLeverage": {
              "name": "maxLeverage",
              "type": "INTEGER",
              "required": true,
              "description": "Can only adjust 3 , 5 or 10，Example: maxLeverage=10 for Cross Margin Pro ，maxLeverage = 5 or 3 for Cross Margin Classic"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.adjust-cross-margin-max-leverage-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#adjust-cross-margin-max-leverage-user_data",
      "name": "Adjust cross margin max leverage (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/transfer",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/transfer",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "type": {
          "name": "type",
          "type": "string",
          "required": false,
          "description": "Transfer Type: ROLL_IN, ROLL_OUT"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10 Max:100"
        },
        "isolatedSymbol": {
          "name": "isolatedSymbol",
          "type": "string",
          "required": false,
          "description": "Symbol in Isolated Margin"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "type": {
              "name": "type",
              "type": "string",
              "required": false,
              "description": "Transfer Type: ROLL_IN, ROLL_OUT"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10 Max:100"
            },
            "isolatedSymbol": {
              "name": "isolatedSymbol",
              "type": "string",
              "required": false,
              "description": "Symbol in Isolated Margin"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "amount": "NumberString",
                  "asset": "string",
                  "status": "string",
                  "timestamp": "number",
                  "txId": "number",
                  "type": "string",
                  "transFrom": "string", //SPOT,FUTURES,FIAT,DELIVERY,MINING,ISOLATED_MARGIN,FUNDING,MOTHER_SPOT,OPTION,SUB_SPOT,SUB_MARGIN,CROSS_MARGIN
                  "transTo": "string" //SPOT,FUTURES,FIAT,DELIVERY,MINING,ISOLATED_MARGIN,FUNDING,MOTHER_SPOT,OPTION,SUB_SPOT,SUB_MARGIN,CROSS_MARGIN
                },
                {
                  "amount": "NumberString",
                  "asset": "string",
                  "status": "string",
                  "timestamp": "number",
                  "txId": "number",
                  "type": "string",
                  "transFrom": "string", //SPOT,FUTURES,FIAT,DELIVERY,MINING,ISOLATED_MARGIN,FUNDING,MOTHER_SPOT,OPTION,SUB_SPOT,SUB_MARGIN,CROSS_MARGIN
                  "transTo": "string", //SPOT,FUTURES,FIAT,DELIVERY,MINING,ISOLATED_MARGIN,FUNDING,MOTHER_SPOT,OPTION,SUB_SPOT,SUB_MARGIN,CROSS_MARGIN
                  "fromSymbol": "string",
                  "toSymbol": "string"
                },
                {
                  "amount": "NumberString",
                  "asset": "string",
                  "status": "string",
                  "timestamp": "number",
                  "txId": "number",
                  "type": "string"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "amount": "0.10000000",
                  "asset": "BNB",
                  "status": "CONFIRMED",
                  "timestamp": 1566898617,
                  "txId": 5240372201,
                  "type": "ROLL_IN",
                  "transFrom": "SPOT", //SPOT,FUTURES,FIAT,DELIVERY,MINING,ISOLATED_MARGIN,FUNDING,MOTHER_SPOT,OPTION,SUB_SPOT,SUB_MARGIN,CROSS_MARGIN
                  "transTo": "ISOLATED_MARGIN" //SPOT,FUTURES,FIAT,DELIVERY,MINING,ISOLATED_MARGIN,FUNDING,MOTHER_SPOT,OPTION,SUB_SPOT,SUB_MARGIN,CROSS_MARGIN
                },
                {
                  "amount": "5.00000000",
                  "asset": "USDT",
                  "status": "CONFIRMED",
                  "timestamp": 1566888436,
                  "txId": 5239810406,
                  "type": "ROLL_OUT",
                  "transFrom": "ISOLATED_MARGIN", //SPOT,FUTURES,FIAT,DELIVERY,MINING,ISOLATED_MARGIN,FUNDING,MOTHER_SPOT,OPTION,SUB_SPOT,SUB_MARGIN,CROSS_MARGIN
                  "transTo": "ISOLATED_MARGIN", //SPOT,FUTURES,FIAT,DELIVERY,MINING,ISOLATED_MARGIN,FUNDING,MOTHER_SPOT,OPTION,SUB_SPOT,SUB_MARGIN,CROSS_MARGIN
                  "fromSymbol": "BNBUSDT",
                  "toSymbol": "BTCUSDT"
                },
                {
                  "amount": "1.00000000",
                  "asset": "EOS",
                  "status": "CONFIRMED",
                  "timestamp": 1566888403,
                  "txId": 5239808703,
                  "type": "ROLL_IN"
                }
              ],
              "total": 3
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.get-cross-margin-transfer-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-cross-margin-transfer-history-user_data",
      "name": "Get Cross Margin Transfer History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/interestHistory",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/interestHistory",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "isolatedSymbol": {
          "name": "isolatedSymbol",
          "type": "string",
          "required": false,
          "description": "isolated symbol"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "per-second accuracy.  milliseconds input will be ignored. e.g. XXXXXXXXXX000ms"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "per-second accuracy.  milliseconds input will be ignored. e.g. XXXXXXXXXX000ms"
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10 Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "isolatedSymbol": {
              "name": "isolatedSymbol",
              "type": "string",
              "required": false,
              "description": "isolated symbol"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "per-second accuracy.  milliseconds input will be ignored. e.g. XXXXXXXXXX000ms"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "per-second accuracy.  milliseconds input will be ignored. e.g. XXXXXXXXXX000ms"
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10 Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "txId": "number",
                  "interestAccuredTime": "number",
                  "asset": "string",
                  "rawAsset": "string", // will not be returned for isolated margin
                  "principal": "NumberString",
                  "interest": "NumberString",
                  "interestRate": "NumberString",
                  "type": "string",
                  "isolatedSymbol": "string" // isolated symbol, will not be returned for crossed margin
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "txId": 1352286576452864800,
                  "interestAccuredTime": 1672160400000,
                  "asset": "USDT",
                  "rawAsset": "USDT", // will not be returned for isolated margin
                  "principal": "45.3313",
                  "interest": "0.00024995",
                  "interestRate": "0.00013233",
                  "type": "ON_BORROW",
                  "isolatedSymbol": "BNBUSDT" // isolated symbol, will not be returned for crossed margin
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.get-interest-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-interest-history-user_data",
      "name": "Get Interest History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/forceLiquidationRec",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/forceLiquidationRec",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "isolatedSymbol": {
          "name": "isolatedSymbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10 Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "isolatedSymbol": {
              "name": "isolatedSymbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10 Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "avgPrice": "NumberString",
                  "executedQty": "NumberString",
                  "orderId": "number",
                  "price": "NumberString",
                  "qty": "NumberString",
                  "side": "OrderSide",
                  "symbol": "string",
                  "timeInForce": "TimeInForce",
                  "isIsolated": "boolean",
                  "updatedTime": "number"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "avgPrice": "0.00388359",
                  "executedQty": "31.39000000",
                  "orderId": 180015097,
                  "price": "0.00388110",
                  "qty": "31.39000000",
                  "side": "SELL",
                  "symbol": "BNBBTC",
                  "timeInForce": "GTC",
                  "isIsolated": true,
                  "updatedTime": 1558941374745
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.get-force-liquidation-record-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-force-liquidation-record-user_data",
      "name": "Get Force Liquidation Record (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/account",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/account",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "created": "boolean", // True means margin account created , false means margin account not created.
              "borrowEnabled": "boolean",
              "marginLevel": "NumberString",
              "collateralMarginLevel": "NumberString",
              "totalAssetOfBtc": "NumberString",
              "totalLiabilityOfBtc": "NumberString",
              "totalNetAssetOfBtc": "NumberString",
              "totalCollateralValueInUSDT": "NumberString",
              "tradeEnabled": "boolean",
              "transferEnabled": "boolean",
              "accountType": "string", // //MARGIN_1 for Cross Margin Classic, MARGIN_2 for Cross Margin Pro
              "userAssets": [
                {
                  "asset": "string",
                  "borrowed": "NumberString",
                  "free": "NumberString",
                  "interest": "NumberString",
                  "locked": "NumberString",
                  "netAsset": "NumberString"
                },
                null,
                null,
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "created": true, // True means margin account created , false means margin account not created.
              "borrowEnabled": true,
              "marginLevel": "11.64405625",
              "collateralMarginLevel": "3.2",
              "totalAssetOfBtc": "6.82728457",
              "totalLiabilityOfBtc": "0.58633215",
              "totalNetAssetOfBtc": "6.24095242",
              "totalCollateralValueInUSDT": "5.82728457",
              "tradeEnabled": true,
              "transferEnabled": true,
              "accountType": "MARGIN_1", // //MARGIN_1 for Cross Margin Classic, MARGIN_2 for Cross Margin Pro
              "userAssets": [
                {
                  "asset": "BTC",
                  "borrowed": "0.00000000",
                  "free": "0.00499500",
                  "interest": "0.00000000",
                  "locked": "0.00000000",
                  "netAsset": "0.00499500"
                },
                {
                  "asset": "BNB",
                  "borrowed": "201.66666672",
                  "free": "2346.50000000",
                  "interest": "0.00000000",
                  "locked": "0.00000000",
                  "netAsset": "2144.83333328"
                },
                {
                  "asset": "ETH",
                  "borrowed": "0.00000000",
                  "free": "0.00000000",
                  "interest": "0.00000000",
                  "locked": "0.00000000",
                  "netAsset": "0.00000000"
                },
                {
                  "asset": "USDT",
                  "borrowed": "0.00000000",
                  "free": "0.00000000",
                  "interest": "0.00000000",
                  "locked": "0.00000000",
                  "netAsset": "0.00000000"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-cross-margin-account-details-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-cross-margin-account-details-user_data",
      "name": "Query Cross Margin Account Details (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/order",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/order",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "isIsolated": {
          "name": "isIsolated",
          "type": "string",
          "required": false,
          "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "isIsolated": {
              "name": "isIsolated",
              "type": "string",
              "required": false,
              "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "clientOrderId": "string",
              "cummulativeQuoteQty": "NumberString",
              "executedQty": "NumberString",
              "icebergQty": "NumberString",
              "isWorking": "boolean",
              "orderId": "number",
              "origQty": "NumberString",
              "price": "NumberString",
              "side": "OrderSide",
              "status": "string",
              "stopPrice": "NumberString",
              "symbol": "string",
              "isIsolated": "boolean",
              "time": "number",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "selfTradePreventionMode": "string",
              "updateTime": "number"
            }
          ],
          "responseExamples": [
            {
              "clientOrderId": "ZwfQzuDIGpceVhKW5DvCmO",
              "cummulativeQuoteQty": "0.00000000",
              "executedQty": "0.00000000",
              "icebergQty": "0.00000000",
              "isWorking": true,
              "orderId": 213205622,
              "origQty": "0.30000000",
              "price": "0.00493630",
              "side": "SELL",
              "status": "NEW",
              "stopPrice": "0.00000000",
              "symbol": "BNBBTC",
              "isIsolated": true,
              "time": 1562133008725,
              "timeInForce": "GTC",
              "type": "LIMIT",
              "selfTradePreventionMode": "NONE",
              "updateTime": 1562133008725
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-margin-account-39-s-order-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-margin-account-39-s-order-user_data",
      "name": "Query Margin Account's Order (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/openOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/openOrders",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "isIsolated": {
          "name": "isIsolated",
          "type": "string",
          "required": false,
          "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "isIsolated": {
              "name": "isIsolated",
              "type": "string",
              "required": false,
              "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "clientOrderId": "string",
                "cummulativeQuoteQty": "NumberString",
                "executedQty": "NumberString",
                "icebergQty": "NumberString",
                "isWorking": "boolean",
                "orderId": "number",
                "origQty": "NumberString",
                "price": "NumberString",
                "side": "OrderSide",
                "status": "string",
                "stopPrice": "NumberString",
                "symbol": "string",
                "isIsolated": "boolean",
                "time": "number",
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "selfTradePreventionMode": "string",
                "updateTime": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "clientOrderId": "qhcZw71gAkCCTv0t0k8LUK",
                "cummulativeQuoteQty": "0.00000000",
                "executedQty": "0.00000000",
                "icebergQty": "0.00000000",
                "isWorking": true,
                "orderId": 211842552,
                "origQty": "0.30000000",
                "price": "0.00475010",
                "side": "SELL",
                "status": "NEW",
                "stopPrice": "0.00000000",
                "symbol": "BNBBTC",
                "isIsolated": true,
                "time": 1562040170089,
                "timeInForce": "GTC",
                "type": "LIMIT",
                "selfTradePreventionMode": "NONE",
                "updateTime": 1562040170089
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-margin-account-39-s-open-orders-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-margin-account-39-s-open-orders-user_data",
      "name": "Query Margin Account's Open Orders (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/allOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/allOrders",
      "hmacSHA256": false,
      "weights": {
        "IP": 200,
        "IP_text": "200"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "isIsolated": {
          "name": "isIsolated",
          "type": "string",
          "required": false,
          "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 500."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "isIsolated": {
              "name": "isIsolated",
              "type": "string",
              "required": false,
              "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 500."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "clientOrderId": "string",
                "cummulativeQuoteQty": "NumberString",
                "executedQty": "NumberString",
                "icebergQty": "NumberString",
                "isWorking": "boolean",
                "orderId": "number",
                "origQty": "NumberString",
                "price": "NumberString",
                "side": "OrderSide",
                "status": "string",
                "stopPrice": "NumberString",
                "symbol": "string",
                "isIsolated": "boolean",
                "time": "number",
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "selfTradePreventionMode": "string",
                "updateTime": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "clientOrderId": "D2KDy4DIeS56PvkM13f8cP",
                "cummulativeQuoteQty": "0.00000000",
                "executedQty": "0.00000000",
                "icebergQty": "0.00000000",
                "isWorking": false,
                "orderId": 41295,
                "origQty": "5.31000000",
                "price": "0.22500000",
                "side": "SELL",
                "status": "CANCELED",
                "stopPrice": "0.18000000",
                "symbol": "BNBBTC",
                "isIsolated": false,
                "time": 1565769338806,
                "timeInForce": "GTC",
                "type": "TAKE_PROFIT_LIMIT",
                "selfTradePreventionMode": "NONE",
                "updateTime": 1565769342148
              },
              {
                "clientOrderId": "gXYtqhcEAs2Rn9SUD9nRKx",
                "cummulativeQuoteQty": "0.00000000",
                "executedQty": "0.00000000",
                "icebergQty": "1.00000000",
                "isWorking": true,
                "orderId": 41296,
                "origQty": "6.65000000",
                "price": "0.18000000",
                "side": "SELL",
                "status": "CANCELED",
                "stopPrice": "0.00000000",
                "symbol": "BNBBTC",
                "isIsolated": false,
                "time": 1565769348687,
                "timeInForce": "GTC",
                "type": "LIMIT",
                "selfTradePreventionMode": "NONE",
                "updateTime": 1565769352226
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-margin-account-39-s-all-orders-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-margin-account-39-s-all-orders-user_data",
      "name": "Query Margin Account's All Orders (USER_DATA)"
    },
    {
      "description": "Send in a new OCO for a margin account",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/margin/order/oco",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/margin/order/oco",
      "hmacSHA256": false,
      "weights": {
        "UID": 6,
        "UID_text": "6"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "isIsolated": {
          "name": "isIsolated",
          "type": "string",
          "required": false,
          "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
        },
        "listClientOrderId": {
          "name": "listClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique Id for the entire orderList"
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": ""
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "limitClientOrderId": {
          "name": "limitClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique Id for the limit order"
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "limitIcebergQty": {
          "name": "limitIcebergQty",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "stopClientOrderId": {
          "name": "stopClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique Id for the stop loss/stop loss limit leg"
        },
        "stopPrice": {
          "name": "stopPrice",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "stopLimitPrice": {
          "name": "stopLimitPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "If provided, stopLimitTimeInForce is required."
        },
        "stopIcebergQty": {
          "name": "stopIcebergQty",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "stopLimitTimeInForce": {
          "name": "stopLimitTimeInForce",
          "type": "ENUM",
          "required": false,
          "description": "Valid values are GTC/FOK/IOC"
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "OrderResponseType",
          "required": false,
          "description": "Set the response JSON."
        },
        "sideEffectType": {
          "name": "sideEffectType",
          "type": "\"NO_SIDE_EFFECT\"|\"MARGIN_BUY\"|\"AUTO_REPAY\"|\"AUTO_BORROW_REPAY\"",
          "required": false,
          "description": "NO_SIDE_EFFECT, MARGIN_BUY, AUTO_REPAY,AUTO_BORROW_REPAY; default NO_SIDE_EFFECT. More info in FAQ"
        },
        "selfTradePreventionMode": {
          "name": "selfTradePreventionMode",
          "type": "ENUM",
          "required": false,
          "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE"
        },
        "autoRepayAtCancel": {
          "name": "autoRepayAtCancel",
          "type": "boolean",
          "required": false,
          "description": "Only when MARGIN_BUY or AUTO_BORROW_REPAY order takes effect, true means that the debt generated by the order needs to be repay after the order is cancelled. The default is true"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "isIsolated": {
              "name": "isIsolated",
              "type": "string",
              "required": false,
              "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
            },
            "listClientOrderId": {
              "name": "listClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique Id for the entire orderList"
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": ""
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "limitClientOrderId": {
              "name": "limitClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique Id for the limit order"
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "limitIcebergQty": {
              "name": "limitIcebergQty",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "stopClientOrderId": {
              "name": "stopClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique Id for the stop loss/stop loss limit leg"
            },
            "stopPrice": {
              "name": "stopPrice",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "stopLimitPrice": {
              "name": "stopLimitPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "If provided, stopLimitTimeInForce is required."
            },
            "stopIcebergQty": {
              "name": "stopIcebergQty",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "stopLimitTimeInForce": {
              "name": "stopLimitTimeInForce",
              "type": "ENUM",
              "required": false,
              "description": "Valid values are GTC/FOK/IOC"
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "OrderResponseType",
              "required": false,
              "description": "Set the response JSON."
            },
            "sideEffectType": {
              "name": "sideEffectType",
              "type": "\"NO_SIDE_EFFECT\"|\"MARGIN_BUY\"|\"AUTO_REPAY\"|\"AUTO_BORROW_REPAY\"",
              "required": false,
              "description": "NO_SIDE_EFFECT, MARGIN_BUY, AUTO_REPAY,AUTO_BORROW_REPAY; default NO_SIDE_EFFECT. More info in FAQ"
            },
            "selfTradePreventionMode": {
              "name": "selfTradePreventionMode",
              "type": "ENUM",
              "required": false,
              "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE"
            },
            "autoRepayAtCancel": {
              "name": "autoRepayAtCancel",
              "type": "boolean",
              "required": false,
              "description": "Only when MARGIN_BUY or AUTO_BORROW_REPAY order takes effect, true means that the debt generated by the order needs to be repay after the order is cancelled. The default is true"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderListId": "number",
              "contingencyType": "string",
              "listStatusType": "OCOStatus",
              "listOrderStatus": "OCOOrderStatus",
              "listClientOrderId": "string",
              "transactionTime": "number",
              "symbol": "string",
              "marginBuyBorrowAmount": "NumberString", // will not return if no margin trade happens
              "marginBuyBorrowAsset": "string", // will not return if no margin trade happens
              "isIsolated": "boolean", // if isolated margin
              "orders": [
                {
                  "symbol": "string",
                  "orderId": "number",
                  "clientOrderId": "string"
                },
                null
              ],
              "orderReports": [
                {
                  "symbol": "string",
                  "orderId": "number",
                  "orderListId": "number",
                  "clientOrderId": "string",
                  "transactTime": "number",
                  "price": "NumberString",
                  "origQty": "NumberString",
                  "executedQty": "NumberString",
                  "cummulativeQuoteQty": "NumberString",
                  "status": "string",
                  "timeInForce": "TimeInForce",
                  "type": "OrderType",
                  "side": "OrderSide",
                  "stopPrice": "NumberString",
                  "selfTradePreventionMode": "string"
                },
                {
                  "symbol": "string",
                  "orderId": "number",
                  "orderListId": "number",
                  "clientOrderId": "string",
                  "transactTime": "number",
                  "price": "NumberString",
                  "origQty": "NumberString",
                  "executedQty": "NumberString",
                  "cummulativeQuoteQty": "NumberString",
                  "status": "string",
                  "timeInForce": "TimeInForce",
                  "type": "OrderType",
                  "side": "OrderSide",
                  "selfTradePreventionMode": "string"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "orderListId": 0,
              "contingencyType": "OCO",
              "listStatusType": "EXEC_STARTED",
              "listOrderStatus": "EXECUTING",
              "listClientOrderId": "JYVpp3F0f5CAG15DhtrqLp",
              "transactionTime": 1563417480525,
              "symbol": "LTCBTC",
              "marginBuyBorrowAmount": "5", // will not return if no margin trade happens
              "marginBuyBorrowAsset": "BTC", // will not return if no margin trade happens
              "isIsolated": false, // if isolated margin
              "orders": [
                {
                  "symbol": "LTCBTC",
                  "orderId": 2,
                  "clientOrderId": "Kk7sqHb9J6mJWTMDVW7Vos"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 3,
                  "clientOrderId": "xTXKaGYd4bluPVp78IVRvl"
                }
              ],
              "orderReports": [
                {
                  "symbol": "LTCBTC",
                  "orderId": 2,
                  "orderListId": 0,
                  "clientOrderId": "Kk7sqHb9J6mJWTMDVW7Vos",
                  "transactTime": 1563417480525,
                  "price": "0.000000",
                  "origQty": "0.624363",
                  "executedQty": "0.000000",
                  "cummulativeQuoteQty": "0.000000",
                  "status": "NEW",
                  "timeInForce": "GTC",
                  "type": "STOP_LOSS",
                  "side": "BUY",
                  "stopPrice": "0.960664",
                  "selfTradePreventionMode": "NONE"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 3,
                  "orderListId": 0,
                  "clientOrderId": "xTXKaGYd4bluPVp78IVRvl",
                  "transactTime": 1563417480525,
                  "price": "0.036435",
                  "origQty": "0.624363",
                  "executedQty": "0.000000",
                  "cummulativeQuoteQty": "0.000000",
                  "status": "NEW",
                  "timeInForce": "GTC",
                  "type": "LIMIT_MAKER",
                  "side": "BUY",
                  "selfTradePreventionMode": "NONE"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.margin-account-new-oco-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#margin-account-new-oco-trade",
      "name": "Margin Account New OCO (TRADE)"
    },
    {
      "description": "Cancel an entire Order List for a margin account.",
      "securityType": "TRADE",
      "request": "DELETE /sapi/v1/margin/orderList",
      "requestMethod": "DELETE",
      "requestEndPoint": "/sapi/v1/margin/orderList",
      "hmacSHA256": false,
      "weights": {
        "UID": 1,
        "UID_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "isIsolated": {
          "name": "isIsolated",
          "type": "string",
          "required": false,
          "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
        },
        "orderListId": {
          "name": "orderListId",
          "type": "LONG",
          "required": false,
          "description": "Either orderListId or listClientOrderId must be provided"
        },
        "listClientOrderId": {
          "name": "listClientOrderId",
          "type": "string",
          "required": false,
          "description": "Either orderListId or listClientOrderId must be provided"
        },
        "newClientOrderId": {
          "name": "newClientOrderId",
          "type": "string",
          "required": false,
          "description": "Used to uniquely identify this cancel. Automatically generated by default"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "isIsolated": {
              "name": "isIsolated",
              "type": "string",
              "required": false,
              "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
            },
            "orderListId": {
              "name": "orderListId",
              "type": "LONG",
              "required": false,
              "description": "Either orderListId or listClientOrderId must be provided"
            },
            "listClientOrderId": {
              "name": "listClientOrderId",
              "type": "string",
              "required": false,
              "description": "Either orderListId or listClientOrderId must be provided"
            },
            "newClientOrderId": {
              "name": "newClientOrderId",
              "type": "string",
              "required": false,
              "description": "Used to uniquely identify this cancel. Automatically generated by default"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderListId": "number",
              "contingencyType": "string",
              "listStatusType": "OCOStatus",
              "listOrderStatus": "OCOOrderStatus",
              "listClientOrderId": "string",
              "transactionTime": "number",
              "symbol": "string",
              "isIsolated": "boolean", // if isolated margin
              "orders": [
                {
                  "symbol": "string",
                  "orderId": "number",
                  "clientOrderId": "string"
                },
                null
              ],
              "orderReports": [
                {
                  "symbol": "string",
                  "origClientOrderId": "string",
                  "orderId": "number",
                  "orderListId": "number",
                  "clientOrderId": "string",
                  "price": "NumberString",
                  "origQty": "NumberString",
                  "executedQty": "NumberString",
                  "cummulativeQuoteQty": "NumberString",
                  "status": "string",
                  "timeInForce": "TimeInForce",
                  "type": "OrderType",
                  "side": "OrderSide",
                  "stopPrice": "NumberString",
                  "selfTradePreventionMode": "string"
                },
                {
                  "symbol": "string",
                  "origClientOrderId": "string",
                  "orderId": "number",
                  "orderListId": "number",
                  "clientOrderId": "string",
                  "price": "NumberString",
                  "origQty": "NumberString",
                  "executedQty": "NumberString",
                  "cummulativeQuoteQty": "NumberString",
                  "status": "string",
                  "timeInForce": "TimeInForce",
                  "type": "OrderType",
                  "side": "OrderSide",
                  "selfTradePreventionMode": "string"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "orderListId": 0,
              "contingencyType": "OCO",
              "listStatusType": "ALL_DONE",
              "listOrderStatus": "ALL_DONE",
              "listClientOrderId": "C3wyj4WVEktd7u9aVBRXcN",
              "transactionTime": 1574040868128,
              "symbol": "LTCBTC",
              "isIsolated": false, // if isolated margin
              "orders": [
                {
                  "symbol": "LTCBTC",
                  "orderId": 2,
                  "clientOrderId": "pO9ufTiFGg3nw2fOdgeOXa"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 3,
                  "clientOrderId": "TXOvglzXuaubXAaENpaRCB"
                }
              ],
              "orderReports": [
                {
                  "symbol": "LTCBTC",
                  "origClientOrderId": "pO9ufTiFGg3nw2fOdgeOXa",
                  "orderId": 2,
                  "orderListId": 0,
                  "clientOrderId": "unfWT8ig8i0uj6lPuYLez6",
                  "price": "1.00000000",
                  "origQty": "10.00000000",
                  "executedQty": "0.00000000",
                  "cummulativeQuoteQty": "0.00000000",
                  "status": "CANCELED",
                  "timeInForce": "GTC",
                  "type": "STOP_LOSS_LIMIT",
                  "side": "SELL",
                  "stopPrice": "1.00000000",
                  "selfTradePreventionMode": "NONE"
                },
                {
                  "symbol": "LTCBTC",
                  "origClientOrderId": "TXOvglzXuaubXAaENpaRCB",
                  "orderId": 3,
                  "orderListId": 0,
                  "clientOrderId": "unfWT8ig8i0uj6lPuYLez6",
                  "price": "3.00000000",
                  "origQty": "10.00000000",
                  "executedQty": "0.00000000",
                  "cummulativeQuoteQty": "0.00000000",
                  "status": "CANCELED",
                  "timeInForce": "GTC",
                  "type": "LIMIT_MAKER",
                  "side": "SELL",
                  "selfTradePreventionMode": "NONE"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.margin-account-cancel-oco-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#margin-account-cancel-oco-trade",
      "name": "Margin Account Cancel OCO (TRADE)"
    },
    {
      "description": "Retrieves a specific OCO based on provided optional parameters",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/orderList",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/orderList",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "isIsolated": {
          "name": "isIsolated",
          "type": "string",
          "required": false,
          "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
        },
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": "mandatory for isolated margin, not supported for cross margin"
        },
        "orderListId": {
          "name": "orderListId",
          "type": "LONG",
          "required": false,
          "description": "Either orderListId or origClientOrderId must be provided"
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": "Either orderListId or origClientOrderId must be provided"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "isIsolated": {
              "name": "isIsolated",
              "type": "string",
              "required": false,
              "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
            },
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": "mandatory for isolated margin, not supported for cross margin"
            },
            "orderListId": {
              "name": "orderListId",
              "type": "LONG",
              "required": false,
              "description": "Either orderListId or origClientOrderId must be provided"
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": "Either orderListId or origClientOrderId must be provided"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderListId": "number",
              "contingencyType": "string",
              "listStatusType": "OCOStatus",
              "listOrderStatus": "OCOOrderStatus",
              "listClientOrderId": "string",
              "transactionTime": "number",
              "symbol": "string",
              "isIsolated": "boolean", // if isolated margin
              "orders": [
                {
                  "symbol": "string",
                  "orderId": "number",
                  "clientOrderId": "string"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "orderListId": 27,
              "contingencyType": "OCO",
              "listStatusType": "EXEC_STARTED",
              "listOrderStatus": "EXECUTING",
              "listClientOrderId": "h2USkA5YQpaXHPIrkd96xE",
              "transactionTime": 1565245656253,
              "symbol": "LTCBTC",
              "isIsolated": false, // if isolated margin
              "orders": [
                {
                  "symbol": "LTCBTC",
                  "orderId": 4,
                  "clientOrderId": "qD1gy3kc3Gx0rihm9Y3xwS"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 5,
                  "clientOrderId": "ARzZ9I00CPM8i3NhmU9Ega"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-margin-account-39-s-oco-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-margin-account-39-s-oco-user_data",
      "name": "Query Margin Account's OCO (USER_DATA)"
    },
    {
      "description": "Retrieves all OCO for a specific margin account based on provided optional parameters",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/allOrderList",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/allOrderList",
      "hmacSHA256": false,
      "weights": {
        "IP": 200,
        "IP_text": "200"
      },
      "baseParams": {
        "isIsolated": {
          "name": "isIsolated",
          "type": "string",
          "required": false,
          "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
        },
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": "mandatory for isolated margin, not supported for cross margin"
        },
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "If supplied, neither startTime or endTime can be provided"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default Value: 500; Max Value: 1000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "isIsolated": {
              "name": "isIsolated",
              "type": "string",
              "required": false,
              "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
            },
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": "mandatory for isolated margin, not supported for cross margin"
            },
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "If supplied, neither startTime or endTime can be provided"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default Value: 500; Max Value: 1000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "orderListId": "number",
                "contingencyType": "string",
                "listStatusType": "OCOStatus",
                "listOrderStatus": "OCOOrderStatus",
                "listClientOrderId": "string",
                "transactionTime": "number",
                "symbol": "string",
                "isIsolated": "boolean", // if isolated margin
                "orders": [
                  {
                    "symbol": "string",
                    "orderId": "number",
                    "clientOrderId": "string"
                  },
                  null
                ]
              },
              {
                "orderListId": "number",
                "contingencyType": "string",
                "listStatusType": "OCOStatus",
                "listOrderStatus": "OCOOrderStatus",
                "listClientOrderId": "string",
                "transactionTime": "number",
                "symbol": "string",
                "orders": [
                  {
                    "symbol": "string",
                    "orderId": "number",
                    "clientOrderId": "string"
                  },
                  null
                ]
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "orderListId": 29,
                "contingencyType": "OCO",
                "listStatusType": "EXEC_STARTED",
                "listOrderStatus": "EXECUTING",
                "listClientOrderId": "amEEAXryFzFwYF1FeRpUoZ",
                "transactionTime": 1565245913483,
                "symbol": "LTCBTC",
                "isIsolated": true, // if isolated margin
                "orders": [
                  {
                    "symbol": "LTCBTC",
                    "orderId": 4,
                    "clientOrderId": "oD7aesZqjEGlZrbtRpy5zB"
                  },
                  {
                    "symbol": "LTCBTC",
                    "orderId": 5,
                    "clientOrderId": "Jr1h6xirOxgeJOUuYQS7V3"
                  }
                ]
              },
              {
                "orderListId": 28,
                "contingencyType": "OCO",
                "listStatusType": "EXEC_STARTED",
                "listOrderStatus": "EXECUTING",
                "listClientOrderId": "hG7hFNxJV6cZy3Ze4AUT4d",
                "transactionTime": 1565245913407,
                "symbol": "LTCBTC",
                "orders": [
                  {
                    "symbol": "LTCBTC",
                    "orderId": 2,
                    "clientOrderId": "j6lFOfbmFMRjTYA7rRJ0LP"
                  },
                  {
                    "symbol": "LTCBTC",
                    "orderId": 3,
                    "clientOrderId": "z0KCjOdditiLS5ekAFtK81"
                  }
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-margin-account-39-s-all-oco-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-margin-account-39-s-all-oco-user_data",
      "name": "Query Margin Account's all OCO (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/openOrderList",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/openOrderList",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "isIsolated": {
          "name": "isIsolated",
          "type": "string",
          "required": false,
          "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
        },
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": "mandatory for isolated margin, not supported for cross margin"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "isIsolated": {
              "name": "isIsolated",
              "type": "string",
              "required": false,
              "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
            },
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": "mandatory for isolated margin, not supported for cross margin"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "orderListId": "number",
                "contingencyType": "string",
                "listStatusType": "OCOStatus",
                "listOrderStatus": "OCOOrderStatus",
                "listClientOrderId": "string",
                "transactionTime": "number",
                "symbol": "string",
                "isIsolated": "boolean", // if isolated margin
                "orders": [
                  {
                    "symbol": "string",
                    "orderId": "number",
                    "clientOrderId": "string"
                  },
                  null
                ]
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "orderListId": 31,
                "contingencyType": "OCO",
                "listStatusType": "EXEC_STARTED",
                "listOrderStatus": "EXECUTING",
                "listClientOrderId": "wuB13fmulKj3YjdqWEcsnp",
                "transactionTime": 1565246080644,
                "symbol": "LTCBTC",
                "isIsolated": false, // if isolated margin
                "orders": [
                  {
                    "symbol": "LTCBTC",
                    "orderId": 4,
                    "clientOrderId": "r3EH2N76dHfLoSZWIUw1bT"
                  },
                  {
                    "symbol": "LTCBTC",
                    "orderId": 5,
                    "clientOrderId": "Cv1SnyPD3qhqpbjpYEHbd2"
                  }
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-margin-account-39-s-open-oco-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-margin-account-39-s-open-oco-user_data",
      "name": "Query Margin Account's Open OCO (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET  /sapi/v1/margin/myTrades",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/myTrades",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "isIsolated": {
          "name": "isIsolated",
          "type": "string",
          "required": false,
          "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "TradeId to fetch from. Default gets most recent trades."
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "isIsolated": {
              "name": "isIsolated",
              "type": "string",
              "required": false,
              "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "TradeId to fetch from. Default gets most recent trades."
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "commission": "NumberString",
                "commissionAsset": "string",
                "id": "number",
                "isBestMatch": "boolean",
                "isBuyer": "boolean",
                "isMaker": "boolean",
                "orderId": "number",
                "price": "NumberString",
                "qty": "NumberString",
                "symbol": "string",
                "isIsolated": "boolean",
                "time": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "commission": "0.00006000",
                "commissionAsset": "BTC",
                "id": 34,
                "isBestMatch": true,
                "isBuyer": false,
                "isMaker": false,
                "orderId": 39324,
                "price": "0.02000000",
                "qty": "3.00000000",
                "symbol": "BNBBTC",
                "isIsolated": false,
                "time": 1561973357171
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-margin-account-39-s-trade-list-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-margin-account-39-s-trade-list-user_data",
      "name": "Query Margin Account's Trade List (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/maxBorrowable",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/maxBorrowable",
      "hmacSHA256": false,
      "weights": {
        "IP": 50,
        "IP_text": "50"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "isolatedSymbol": {
          "name": "isolatedSymbol",
          "type": "string",
          "required": false,
          "description": "isolated symbol"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "isolatedSymbol": {
              "name": "isolatedSymbol",
              "type": "string",
              "required": false,
              "description": "isolated symbol"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "amount": "NumberString", // account's currently max borrowable amount with sufficient system availability
              "borrowLimit": "NumberString" // max borrowable amount limited by the account level
            }
          ],
          "responseExamples": [
            {
              "amount": "1.69248805", // account's currently max borrowable amount with sufficient system availability
              "borrowLimit": "60" // max borrowable amount limited by the account level
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-max-borrow-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-max-borrow-user_data",
      "name": "Query Max Borrow (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/maxTransferable",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/maxTransferable",
      "hmacSHA256": false,
      "weights": {
        "IP": 50,
        "IP_text": "50"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "isolatedSymbol": {
          "name": "isolatedSymbol",
          "type": "string",
          "required": false,
          "description": "isolated symbol"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "isolatedSymbol": {
              "name": "isolatedSymbol",
              "type": "string",
              "required": false,
              "description": "isolated symbol"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "amount": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "amount": "3.59498107"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-max-transfer-out-amount-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-max-transfer-out-amount-user_data",
      "name": "Query Max Transfer-Out Amount (USER_DATA)"
    },
    {
      "description": "Get personal margin level information",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/tradeCoeff",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/tradeCoeff",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "normalBar": "NumberString",
              "marginCallBar": "NumberString",
              "forceLiquidationBar": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "normalBar": "1.5",
              "marginCallBar": "1.3",
              "forceLiquidationBar": "1.1"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.get-summary-of-margin-account-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-summary-of-margin-account-user_data",
      "name": "Get Summary of Margin account (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/isolated/account",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/isolated/account",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "symbols": {
          "name": "symbols",
          "type": "string",
          "required": false,
          "description": "Max 5 symbols can be sent; separated by \",\". e.g. \"BTCUSDT,BNBUSDT,ADAUSDT\""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "No more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbols": {
              "name": "symbols",
              "type": "string",
              "required": false,
              "description": "Max 5 symbols can be sent; separated by \",\". e.g. \"BTCUSDT,BNBUSDT,ADAUSDT\""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "No more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "If \"symbols\" is not sent",
            "If \"symbols\" is sent"
          ],
          "responseTypes": [
            {
              "assets": [
                {
                  "baseAsset": {
                    "asset": "string",
                    "borrowEnabled": "boolean",
                    "borrowed": "NumberString",
                    "free": "NumberString",
                    "interest": "NumberString",
                    "locked": "NumberString",
                    "netAsset": "NumberString",
                    "netAssetOfBtc": "NumberString",
                    "repayEnabled": "boolean",
                    "totalAsset": "NumberString"
                  },
                  "quoteAsset": {
                    "asset": "string",
                    "borrowEnabled": "boolean",
                    "borrowed": "NumberString",
                    "free": "NumberString",
                    "interest": "NumberString",
                    "locked": "NumberString",
                    "netAsset": "NumberString",
                    "netAssetOfBtc": "NumberString",
                    "repayEnabled": "boolean",
                    "totalAsset": "NumberString"
                  },
                  "symbol": "string",
                  "isolatedCreated": "boolean",
                  "enabled": "boolean", // true-enabled, false-disabled
                  "marginLevel": "NumberString",
                  "marginLevelStatus": "\"EXCESSIVE\"|\"NORMAL\"|\"MARGIN_CALL\"|\"PRE_LIQUIDATION\"|\"FORCE_LIQUIDATION\"", // "EXCESSIVE", "NORMAL", "MARGIN_CALL", "PRE_LIQUIDATION", "FORCE_LIQUIDATION"
                  "marginRatio": "NumberString",
                  "indexPrice": "NumberString",
                  "liquidatePrice": "NumberString",
                  "liquidateRate": "NumberString",
                  "tradeEnabled": "boolean"
                }
              ],
              "totalAssetOfBtc": "NumberString",
              "totalLiabilityOfBtc": "NumberString",
              "totalNetAssetOfBtc": "NumberString"
            },
            {
              "assets": [
                {
                  "baseAsset": {
                    "asset": "string",
                    "borrowEnabled": "boolean",
                    "borrowed": "NumberString",
                    "free": "NumberString",
                    "interest": "NumberString",
                    "locked": "NumberString",
                    "netAsset": "NumberString",
                    "netAssetOfBtc": "NumberString",
                    "repayEnabled": "boolean",
                    "totalAsset": "NumberString"
                  },
                  "quoteAsset": {
                    "asset": "string",
                    "borrowEnabled": "boolean",
                    "borrowed": "NumberString",
                    "free": "NumberString",
                    "interest": "NumberString",
                    "locked": "NumberString",
                    "netAsset": "NumberString",
                    "netAssetOfBtc": "NumberString",
                    "repayEnabled": "boolean",
                    "totalAsset": "NumberString"
                  },
                  "symbol": "string",
                  "isolatedCreated": "boolean",
                  "enabled": "boolean", // true-enabled, false-disabled
                  "marginLevel": "NumberString",
                  "marginLevelStatus": "\"EXCESSIVE\"|\"NORMAL\"|\"MARGIN_CALL\"|\"PRE_LIQUIDATION\"|\"FORCE_LIQUIDATION\"", // "EXCESSIVE", "NORMAL", "MARGIN_CALL", "PRE_LIQUIDATION", "FORCE_LIQUIDATION"
                  "marginRatio": "NumberString",
                  "indexPrice": "NumberString",
                  "liquidatePrice": "NumberString",
                  "liquidateRate": "NumberString",
                  "tradeEnabled": "boolean"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "assets": [
                {
                  "baseAsset": {
                    "asset": "BTC",
                    "borrowEnabled": true,
                    "borrowed": "0.00000000",
                    "free": "0.00000000",
                    "interest": "0.00000000",
                    "locked": "0.00000000",
                    "netAsset": "0.00000000",
                    "netAssetOfBtc": "0.00000000",
                    "repayEnabled": true,
                    "totalAsset": "0.00000000"
                  },
                  "quoteAsset": {
                    "asset": "USDT",
                    "borrowEnabled": true,
                    "borrowed": "0.00000000",
                    "free": "0.00000000",
                    "interest": "0.00000000",
                    "locked": "0.00000000",
                    "netAsset": "0.00000000",
                    "netAssetOfBtc": "0.00000000",
                    "repayEnabled": true,
                    "totalAsset": "0.00000000"
                  },
                  "symbol": "BTCUSDT",
                  "isolatedCreated": true,
                  "enabled": true, // true-enabled, false-disabled
                  "marginLevel": "0.00000000",
                  "marginLevelStatus": "EXCESSIVE", // "EXCESSIVE", "NORMAL", "MARGIN_CALL", "PRE_LIQUIDATION", "FORCE_LIQUIDATION"
                  "marginRatio": "0.00000000",
                  "indexPrice": "10000.00000000",
                  "liquidatePrice": "1000.00000000",
                  "liquidateRate": "1.00000000",
                  "tradeEnabled": true
                }
              ],
              "totalAssetOfBtc": "0.00000000",
              "totalLiabilityOfBtc": "0.00000000",
              "totalNetAssetOfBtc": "0.00000000"
            },
            {
              "assets": [
                {
                  "baseAsset": {
                    "asset": "BTC",
                    "borrowEnabled": true,
                    "borrowed": "0.00000000",
                    "free": "0.00000000",
                    "interest": "0.00000000",
                    "locked": "0.00000000",
                    "netAsset": "0.00000000",
                    "netAssetOfBtc": "0.00000000",
                    "repayEnabled": true,
                    "totalAsset": "0.00000000"
                  },
                  "quoteAsset": {
                    "asset": "USDT",
                    "borrowEnabled": true,
                    "borrowed": "0.00000000",
                    "free": "0.00000000",
                    "interest": "0.00000000",
                    "locked": "0.00000000",
                    "netAsset": "0.00000000",
                    "netAssetOfBtc": "0.00000000",
                    "repayEnabled": true,
                    "totalAsset": "0.00000000"
                  },
                  "symbol": "BTCUSDT",
                  "isolatedCreated": true,
                  "enabled": true, // true-enabled, false-disabled
                  "marginLevel": "0.00000000",
                  "marginLevelStatus": "EXCESSIVE", // "EXCESSIVE", "NORMAL", "MARGIN_CALL", "PRE_LIQUIDATION", "FORCE_LIQUIDATION"
                  "marginRatio": "0.00000000",
                  "indexPrice": "10000.00000000",
                  "liquidatePrice": "1000.00000000",
                  "liquidateRate": "1.00000000",
                  "tradeEnabled": true
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-isolated-margin-account-info-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-isolated-margin-account-info-user_data",
      "name": "Query Isolated Margin Account Info (USER_DATA)"
    },
    {
      "description": "Disable isolated margin account for a specific symbol. Each trading pair can only be deactivated once every 24\nhours.",
      "securityType": "TRADE",
      "request": "DELETE /sapi/v1/margin/isolated/account",
      "requestMethod": "DELETE",
      "requestEndPoint": "/sapi/v1/margin/isolated/account",
      "hmacSHA256": true,
      "weights": {
        "UID": 300,
        "UID_text": "300"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "No more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "No more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "success": "boolean",
              "symbol": "string"
            }
          ],
          "responseExamples": [
            {
              "success": true,
              "symbol": "BTCUSDT"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.disable-isolated-margin-account-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#disable-isolated-margin-account-trade",
      "name": "Disable Isolated Margin Account (TRADE)"
    },
    {
      "description": "Enable isolated margin account for a specific symbol(Only supports activation of previously disabled accounts).",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/margin/isolated/account",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/margin/isolated/account",
      "hmacSHA256": false,
      "weights": {
        "UID": 300,
        "UID_text": "300"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "No more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "No more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "success": "boolean",
              "symbol": "string"
            }
          ],
          "responseExamples": [
            {
              "success": true,
              "symbol": "BTCUSDT"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.enable-isolated-margin-account-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#enable-isolated-margin-account-trade",
      "name": "Enable Isolated Margin Account (TRADE)"
    },
    {
      "description": "Query enabled isolated margin account limit.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/isolated/accountLimit",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/isolated/accountLimit",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "No more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "No more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "enabledAccount": "number",
              "maxAccount": "number"
            }
          ],
          "responseExamples": [
            {
              "enabledAccount": 5,
              "maxAccount": 20
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-enabled-isolated-margin-account-limit-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-enabled-isolated-margin-account-limit-user_data",
      "name": "Query Enabled Isolated Margin Account Limit (USER_DATA)"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /sapi/v1/margin/isolated/allPairs",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/isolated/allPairs",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "base": "string",
                "isBuyAllowed": "boolean",
                "isMarginTrade": "boolean",
                "isSellAllowed": "boolean",
                "quote": "string",
                "symbol": "string"
              },
              {
                "base": "string",
                "isBuyAllowed": "boolean",
                "isMarginTrade": "boolean",
                "isSellAllowed": "boolean",
                "quote": "string",
                "symbol": "string",
                "delistTime": "number"
              },
              null,
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "base": "BNB",
                "isBuyAllowed": true,
                "isMarginTrade": true,
                "isSellAllowed": true,
                "quote": "BTC",
                "symbol": "BNBBTC"
              },
              {
                "base": "TRX",
                "isBuyAllowed": true,
                "isMarginTrade": true,
                "isSellAllowed": true,
                "quote": "BTC",
                "symbol": "TRXBTC",
                "delistTime": 1704973040
              },
              {
                "base": "XRP",
                "isBuyAllowed": true,
                "isMarginTrade": true,
                "isSellAllowed": true,
                "quote": "BTC",
                "symbol": "XRPBTC"
              },
              {
                "base": "ETH",
                "isBuyAllowed": true,
                "isMarginTrade": true,
                "isSellAllowed": true,
                "quote": "BTC",
                "symbol": "ETHBTC"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.get-all-isolated-margin-symbol-market_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-all-isolated-margin-symbol-market_data",
      "name": "Get All Isolated Margin Symbol(MARKET_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/bnbBurn",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/bnbBurn",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "spotBNBBurn": {
          "name": "spotBNBBurn",
          "type": "string",
          "required": false,
          "description": "\"true\" or \"false\"; Determines whether to use BNB to pay for trading fees on SPOT"
        },
        "interestBNBBurn": {
          "name": "interestBNBBurn",
          "type": "string",
          "required": false,
          "description": "\"true\" or \"false\"; Determines whether to use BNB to pay for margin loan's interest"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "No more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "spotBNBBurn": {
              "name": "spotBNBBurn",
              "type": "string",
              "required": false,
              "description": "\"true\" or \"false\"; Determines whether to use BNB to pay for trading fees on SPOT"
            },
            "interestBNBBurn": {
              "name": "interestBNBBurn",
              "type": "string",
              "required": false,
              "description": "\"true\" or \"false\"; Determines whether to use BNB to pay for margin loan's interest"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "No more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "spotBNBBurn": "boolean",
              "interestBNBBurn": "boolean"
            }
          ],
          "responseExamples": [
            {
              "spotBNBBurn": true,
              "interestBNBBurn": false
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.toggle-bnb-burn-on-spot-trade-and-margin-interest-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#toggle-bnb-burn-on-spot-trade-and-margin-interest-user_data",
      "name": "Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/bnbBurn",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/bnbBurn",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "No more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "No more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "spotBNBBurn": "boolean",
              "interestBNBBurn": "boolean"
            }
          ],
          "responseExamples": [
            {
              "spotBNBBurn": true,
              "interestBNBBurn": false
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.get-bnb-burn-status-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-bnb-burn-status-user_data",
      "name": "Get BNB Burn Status (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/interestRateHistory",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/interestRateHistory",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "vipLevel": {
          "name": "vipLevel",
          "type": "INT",
          "required": false,
          "description": "Default: user's vip level"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Default: 7 days ago"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Default: present. Maximum range: 1 months."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "No more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "vipLevel": {
              "name": "vipLevel",
              "type": "INT",
              "required": false,
              "description": "Default: user's vip level"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Default: 7 days ago"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Default: present. Maximum range: 1 months."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "No more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "asset": "string",
                "dailyInterestRate": "NumberString",
                "timestamp": "number",
                "vipLevel": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "asset": "BTC",
                "dailyInterestRate": "0.00025000",
                "timestamp": 1611544731000,
                "vipLevel": 1
              },
              {
                "asset": "BTC",
                "dailyInterestRate": "0.00035000",
                "timestamp": 1610248118000,
                "vipLevel": 1
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-margin-interest-rate-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-margin-interest-rate-history-user_data",
      "name": "Query Margin Interest Rate History (USER_DATA)"
    },
    {
      "description": "Get cross margin fee data collection with any vip level or user's current specific data as https://www.binance.com/en/margin-fee",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/crossMarginData",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/crossMarginData",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "1 when coin is specified; \n5 when the coin parameter is omitted"
      },
      "baseParams": {
        "vipLevel": {
          "name": "vipLevel",
          "type": "INT",
          "required": false,
          "description": "when parameter vipLevel is not sent, it returns data associated with the user's specific config; when parameter vipLevel is sent, it returns the default tier data (assuming user is not logged in)"
        },
        "coin": {
          "name": "coin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "No more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "vipLevel": {
              "name": "vipLevel",
              "type": "INT",
              "required": false,
              "description": "when parameter vipLevel is not sent, it returns data associated with the user's specific config; when parameter vipLevel is sent, it returns the default tier data (assuming user is not logged in)"
            },
            "coin": {
              "name": "coin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "No more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "vipLevel": "number",
                "coin": "string",
                "transferIn": "boolean",
                "borrowable": "boolean",
                "dailyInterest": "NumberString",
                "yearlyInterest": "NumberString",
                "borrowLimit": "NumberString",
                "marginablePairs": [
                  "string"
                ]
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "vipLevel": 0,
                "coin": "BTC",
                "transferIn": true,
                "borrowable": true,
                "dailyInterest": "0.00026125",
                "yearlyInterest": "0.0953",
                "borrowLimit": "180",
                "marginablePairs": [
                  "BNBBTC",
                  "TRXBTC",
                  "ETHBTC",
                  "BTCUSDT"
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-cross-margin-fee-data-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-cross-margin-fee-data-user_data",
      "name": "Query Cross Margin Fee Data (USER_DATA)"
    },
    {
      "description": "Get isolated margin fee data collection with any vip level or user's current specific data as https://www.binance.com/en/margin-fee",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/isolatedMarginData",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/isolatedMarginData",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "1 when a single is specified; \n10 when the symbol parameter is omitted"
      },
      "baseParams": {
        "vipLevel": {
          "name": "vipLevel",
          "type": "INT",
          "required": false,
          "description": "User's current specific margin data will be returned if vipLevel is omitted"
        },
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "No more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "vipLevel": {
              "name": "vipLevel",
              "type": "INT",
              "required": false,
              "description": "User's current specific margin data will be returned if vipLevel is omitted"
            },
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "No more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "vipLevel": "number",
                "symbol": "string",
                "leverage": "NumberString",
                "data": [
                  {
                    "coin": "string",
                    "dailyInterest": "NumberString",
                    "borrowLimit": "NumberString"
                  },
                  null
                ]
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "vipLevel": 0,
                "symbol": "BTCUSDT",
                "leverage": "10",
                "data": [
                  {
                    "coin": "BTC",
                    "dailyInterest": "0.00026125",
                    "borrowLimit": "270"
                  },
                  {
                    "coin": "USDT",
                    "dailyInterest": "0.000475",
                    "borrowLimit": "2100000"
                  }
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-isolated-margin-fee-data-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-isolated-margin-fee-data-user_data",
      "name": "Query Isolated Margin Fee Data (USER_DATA)"
    },
    {
      "description": "Get isolated margin tier data collection with any tier as https://www.binance.com/en/margin-data",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/isolatedMarginTier",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/isolatedMarginTier",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "tier": {
          "name": "tier",
          "type": "INTEGER",
          "required": false,
          "description": "All margin tier data will be returned if tier is omitted"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "No more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "tier": {
              "name": "tier",
              "type": "INTEGER",
              "required": false,
              "description": "All margin tier data will be returned if tier is omitted"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "No more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "tier": "number",
                "effectiveMultiple": "NumberString",
                "initialRiskRatio": "NumberString",
                "liquidationRiskRatio": "NumberString",
                "baseAssetMaxBorrowable": "NumberString",
                "quoteAssetMaxBorrowable": "NumberString"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSDT",
                "tier": 1,
                "effectiveMultiple": "10",
                "initialRiskRatio": "1.111",
                "liquidationRiskRatio": "1.05",
                "baseAssetMaxBorrowable": "9",
                "quoteAssetMaxBorrowable": "70000"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-isolated-margin-tier-data-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-isolated-margin-tier-data-user_data",
      "name": "Query Isolated Margin Tier Data (USER_DATA)"
    },
    {
      "description": "Displays the user's current margin order count usage for all intervals.",
      "securityType": "TRADE",
      "request": "GET /sapi/v1/margin/rateLimit/order",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/rateLimit/order",
      "hmacSHA256": false,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "isIsolated": {
          "name": "isIsolated",
          "type": "string",
          "required": false,
          "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
        },
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": "isolated symbol, mandatory for isolated margin"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "isIsolated": {
              "name": "isIsolated",
              "type": "string",
              "required": false,
              "description": "for isolated margin or not, \"TRUE\", \"FALSE\"，default \"FALSE\""
            },
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": "isolated symbol, mandatory for isolated margin"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "rateLimitType": "RateLimitType",
                "interval": "RateLimitInterval",
                "intervalNum": "number",
                "limit": "number",
                "count": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "rateLimitType": "ORDERS",
                "interval": "SECOND",
                "intervalNum": 10,
                "limit": 10000,
                "count": 0
              },
              {
                "rateLimitType": "ORDERS",
                "interval": "DAY",
                "intervalNum": 1,
                "limit": 20000,
                "count": 0
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-current-margin-order-count-usage-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-current-margin-order-count-usage-trade",
      "name": "Query Current Margin Order Count Usage (TRADE)"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /sapi/v1/margin/crossMarginCollateralRatio",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/crossMarginCollateralRatio",
      "hmacSHA256": false,
      "weights": {
        "IP": 100,
        "IP_text": "100"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "collaterals": [
                  {
                    "minUsdValue": "NumberString",
                    "maxUsdValue": "NumberString",
                    "discountRate": "NumberString"
                  },
                  null,
                  {
                    "minUsdValue": "NumberString",
                    "discountRate": "NumberString"
                  }
                ],
                "assetNames": [
                  "string"
                ]
              },
              {
                "collaterals": [
                  {
                    "minUsdValue": "NumberString",
                    "discountRate": "NumberString"
                  }
                ],
                "assetNames": [
                  "string"
                ]
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "collaterals": [
                  {
                    "minUsdValue": "0",
                    "maxUsdValue": "13000000",
                    "discountRate": "1"
                  },
                  {
                    "minUsdValue": "13000000",
                    "maxUsdValue": "20000000",
                    "discountRate": "0.975"
                  },
                  {
                    "minUsdValue": "20000000",
                    "discountRate": "0"
                  }
                ],
                "assetNames": [
                  "BNX"
                ]
              },
              {
                "collaterals": [
                  {
                    "minUsdValue": "0",
                    "discountRate": "1"
                  }
                ],
                "assetNames": [
                  "BTC",
                  "BUSD",
                  "ETH",
                  "USDT"
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.cross-margin-collateral-ratio-market_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#cross-margin-collateral-ratio-market_data",
      "name": "Cross margin collateral ratio (MARKET_DATA)"
    },
    {
      "description": "Query the coins which can be small liability exchange",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/exchange-small-liability",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/exchange-small-liability",
      "hmacSHA256": false,
      "weights": {
        "IP": 100,
        "IP_text": "100"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "asset": "string",
                "interest": "NumberString",
                "principal": "NumberString",
                "liabilityAsset": "string",
                "liabilityQty": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "asset": "ETH",
                "interest": "0.00083334",
                "principal": "0.001",
                "liabilityAsset": "USDT",
                "liabilityQty": 0.3552
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.get-small-liability-exchange-coin-list-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-small-liability-exchange-coin-list-user_data",
      "name": "Get Small Liability Exchange Coin List (USER_DATA)"
    },
    {
      "description": "Cross Margin Small Liability Exchange",
      "securityType": "MARGIN",
      "request": "POST /sapi/v1/margin/exchange-small-liability",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/margin/exchange-small-liability",
      "hmacSHA256": false,
      "weights": {
        "UID": 3000,
        "UID_text": "3000"
      },
      "baseParams": {
        "assetNames": {
          "name": "assetNames",
          "type": "[]",
          "required": true,
          "description": "The assets list of small liability exchange， Example: assetNames = BTC,ETH"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "assetNames": {
              "name": "assetNames",
              "type": "[]",
              "required": true,
              "description": "The assets list of small liability exchange， Example: assetNames = BTC,ETH"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            "unknown"
          ],
          "responseExamples": [
            null
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.small-liability-exchange-margin",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#small-liability-exchange-margin",
      "name": "Small Liability Exchange (MARGIN)"
    },
    {
      "description": "Get Small liability Exchange History ",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/exchange-small-liability-history",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/exchange-small-liability-history",
      "hmacSHA256": false,
      "weights": {
        "UID": 100,
        "UID_text": "100"
      },
      "baseParams": {
        "current": {
          "name": "current",
          "type": "INT",
          "required": true,
          "description": "Currently querying page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "INT",
          "required": true,
          "description": "Default:10, Max:100"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Default: 30 days from current timestamp"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Default: present timestamp"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "current": {
              "name": "current",
              "type": "INT",
              "required": true,
              "description": "Currently querying page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "INT",
              "required": true,
              "description": "Default:10, Max:100"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Default: 30 days from current timestamp"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Default: present timestamp"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number",
              "rows": [
                {
                  "asset": "string",
                  "amount": "NumberString",
                  "targetAsset": "string",
                  "targetAmount": "NumberString",
                  "bizType": "string",
                  "timestamp": "number"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 1,
              "rows": [
                {
                  "asset": "ETH",
                  "amount": "0.00083434",
                  "targetAsset": "BUSD",
                  "targetAmount": "1.37576819",
                  "bizType": "EXCHANGE_SMALL_LIABILITY",
                  "timestamp": 1672801339253
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.get-small-liability-exchange-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-small-liability-exchange-history-user_data",
      "name": "Get Small Liability Exchange History  (USER_DATA)"
    },
    {
      "description": "Get user the next hourly estimate interest",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/next-hourly-interest-rate",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/next-hourly-interest-rate",
      "hmacSHA256": false,
      "weights": {
        "IP": 100,
        "IP_text": "100"
      },
      "baseParams": {
        "assets": {
          "name": "assets",
          "type": "string",
          "required": true,
          "description": "List of assets, separated by commas, up to 20"
        },
        "isIsolated": {
          "name": "isIsolated",
          "type": "boolean",
          "required": true,
          "description": "for isolated margin or not, \"TRUE\", \"FALSE\""
        }
      },
      "overloads": [
        {
          "params": {
            "assets": {
              "name": "assets",
              "type": "string",
              "required": true,
              "description": "List of assets, separated by commas, up to 20"
            },
            "isIsolated": {
              "name": "isIsolated",
              "type": "boolean",
              "required": true,
              "description": "for isolated margin or not, \"TRUE\", \"FALSE\""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "asset": "string",
                "nextHourlyInterestRate": "NumberString"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "asset": "BTC",
                "nextHourlyInterestRate": "0.00000571"
              },
              {
                "asset": "ETH",
                "nextHourlyInterestRate": "0.00000578"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.get-a-future-hourly-interest-rate-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-a-future-hourly-interest-rate-user_data",
      "name": "Get a future hourly interest rate  (USER_DATA)"
    },
    {
      "description": "Get cross or isolated margin capital flow",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/capital-flow",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/capital-flow",
      "hmacSHA256": false,
      "weights": {
        "IP": 100,
        "IP_text": "100"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": "Required when querying isolated data"
        },
        "type": {
          "name": "type",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Only supports querying the data of the last 90 days"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "\nIf fromId is set, the data with id > fromId will be returned. Otherwise the latest data will be returned"
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "The number of data items returned each time is limited. Default 500; Max 1000."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": "Required when querying isolated data"
            },
            "type": {
              "name": "type",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Only supports querying the data of the last 90 days"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "\nIf fromId is set, the data with id > fromId will be returned. Otherwise the latest data will be returned"
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "The number of data items returned each time is limited. Default 500; Max 1000."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "id": "number",
                "tranId": "number",
                "timestamp": "number",
                "asset": "string",
                "symbol": "string",
                "type": "string",
                "amount": "NumberString"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "id": 123456,
                "tranId": 123123,
                "timestamp": 1691116657000,
                "asset": "USDT",
                "symbol": "BTCUSDT",
                "type": "BORROW",
                "amount": "101"
              },
              {
                "id": 123457,
                "tranId": 123124,
                "timestamp": 1691116658000,
                "asset": "BTC",
                "symbol": "BTCUSDT",
                "type": "REPAY",
                "amount": "10"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.get-cross-or-isolated-margin-capital-flow-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-cross-or-isolated-margin-capital-flow-user_data",
      "name": "Get cross or isolated margin capital flow(USER_DATA)"
    },
    {
      "description": "Get tokens or symbols delist schedule for cross margin and isolated margin",
      "securityType": "MARKET_DATA",
      "request": "GET /sapi/v1/margin/delist-schedule",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/delist-schedule",
      "hmacSHA256": false,
      "weights": {
        "IP": 100,
        "IP_text": "100"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "delistTime": "number",
                "crossMarginAssets": [
                  "string"
                ],
                "isolatedMarginSymbols": [
                  "string"
                ]
              },
              {
                "delistTime": "number",
                "crossMarginAssets": [
                  "string"
                ],
                "isolatedMarginSymbols": []
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "delistTime": 1686161202000,
                "crossMarginAssets": [
                  "BTC",
                  "USDT"
                ],
                "isolatedMarginSymbols": [
                  "ADAUSDT",
                  "BNBUSDT"
                ]
              },
              {
                "delistTime": 1686222232000,
                "crossMarginAssets": [
                  "ADA"
                ],
                "isolatedMarginSymbols": []
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.get-tokens-or-symbols-delist-schedule-for-cross-margin-and-isolated-margin-market_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-tokens-or-symbols-delist-schedule-for-cross-margin-and-isolated-margin-market_data",
      "name": "Get tokens or symbols delist schedule for cross margin and isolated margin (MARKET_DATA)"
    },
    {
      "description": "Margin available Inventory query",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/margin/available-inventory",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/available-inventory",
      "hmacSHA256": false,
      "weights": {
        "UID": 50,
        "UID_text": "50"
      },
      "baseParams": {
        "type": {
          "name": "type",
          "type": "string",
          "required": true,
          "description": "MARGIN,ISOLATED"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "type": {
              "name": "type",
              "type": "string",
              "required": true,
              "description": "MARGIN,ISOLATED"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "assets": {
                "MATIC": "NumberString",
                "STPT": "NumberString",
                "TVK": "NumberString",
                "SHIB": "NumberString"
              },
              "updateTime": "number"
            }
          ],
          "responseExamples": [
            {
              "assets": {
                "MATIC": "100000000",
                "STPT": "100000000",
                "TVK": "100000000",
                "SHIB": "97409653"
              },
              "updateTime": 1699272487
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-margin-available-inventory-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-margin-available-inventory-user_data",
      "name": "Query Margin Available Inventory (USER_DATA)"
    },
    {
      "description": "Margin manual liquidation",
      "securityType": "MARGIN",
      "request": "POST /sapi/v1/margin/manual-liquidation",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/margin/manual-liquidation",
      "hmacSHA256": false,
      "weights": {
        "UID": 3000,
        "UID_text": "3000"
      },
      "baseParams": {
        "type": {
          "name": "type",
          "type": "string",
          "required": true,
          "description": "MARGIN,ISOLATED"
        },
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": "When type selects ISOLATED, symbol must be filled in"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "type": {
              "name": "type",
              "type": "string",
              "required": true,
              "description": "MARGIN,ISOLATED"
            },
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": "When type selects ISOLATED, symbol must be filled in"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "asset": "string",
                "interest": "NumberString",
                "principal": "NumberString",
                "liabilityAsset": "string",
                "liabilityQty": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "asset": "ETH",
                "interest": "0.00083334",
                "principal": "0.001",
                "liabilityAsset": "USDT",
                "liabilityQty": 0.3552
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.margin-manual-liquidation-margin",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#margin-manual-liquidation-margin",
      "name": "Margin manual liquidation(MARGIN)"
    },
    {
      "description": "Liability Coin Leverage Bracket in Cross Margin Pro Mode",
      "securityType": "MARKET_DATA",
      "request": "GET /sapi/v1/margin/leverageBracket",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/margin/leverageBracket",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "assetNames": [
                  "string"
                ],
                "rank": "number",
                "brackets": [
                  {
                    "leverage": "number",
                    "maxDebt": "number",
                    "maintenanceMarginRate": "number",
                    "initialMarginRate": "number",
                    "fastNum": "number"
                  },
                  null
                ]
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "assetNames": [
                  "SHIB",
                  "FDUSD",
                  "BTC",
                  "ETH",
                  "USDC"
                ],
                "rank": 1,
                "brackets": [
                  {
                    "leverage": 10,
                    "maxDebt": 1000000,
                    "maintenanceMarginRate": 0.02,
                    "initialMarginRate": 0.1112,
                    "fastNum": 0
                  },
                  {
                    "leverage": 3,
                    "maxDebt": 4000000,
                    "maintenanceMarginRate": 0.07,
                    "initialMarginRate": 0.5,
                    "fastNum": 60000
                  }
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Margin Account/Trade",
      "path": "toc.margin-account-trade.query-liability-coin-leverage-bracket-in-cross-margin-pro-mode-market_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-liability-coin-leverage-bracket-in-cross-margin-pro-mode-market_data",
      "name": "Query Liability Coin Leverage Bracket in Cross Margin Pro Mode(MARKET_DATA)"
    },
    {
      "securityType": "USER_STREAM",
      "request": "POST /api/v3/userDataStream",
      "requestMethod": "POST",
      "requestEndPoint": "/api/v3/userDataStream",
      "hmacSHA256": false,
      "weights": {
        "IP": 2,
        "IP_text": "2"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "listenKey": "string"
            }
          ],
          "responseExamples": [
            {
              "listenKey": "pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "LISTEN KEY (SPOT)",
      "path": "toc.user-data-streams.listen-key-spot.create-a-listenkey-user_stream",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#create-a-listenkey-user_stream",
      "name": "Create a ListenKey (USER_STREAM)"
    },
    {
      "description": "Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 30 minutes.",
      "securityType": "USER_STREAM",
      "request": "PUT /api/v3/userDataStream",
      "requestMethod": "PUT",
      "requestEndPoint": "/api/v3/userDataStream",
      "hmacSHA256": false,
      "weights": {
        "IP": 2,
        "IP_text": "2"
      },
      "baseParams": {
        "listenKey": {
          "name": "listenKey",
          "type": "string",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "listenKey": {
              "name": "listenKey",
              "type": "string",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "LISTEN KEY (SPOT)",
      "path": "toc.user-data-streams.listen-key-spot.ping-keep-alive-a-listenkey-user_stream",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#ping-keep-alive-a-listenkey-user_stream",
      "name": "Ping/Keep-alive a ListenKey (USER_STREAM)"
    },
    {
      "description": "Close out a user data stream.",
      "securityType": "USER_STREAM",
      "request": "DELETE /api/v3/userDataStream",
      "requestMethod": "DELETE",
      "requestEndPoint": "/api/v3/userDataStream",
      "hmacSHA256": false,
      "weights": {
        "IP": 2,
        "IP_text": "2"
      },
      "baseParams": {
        "listenKey": {
          "name": "listenKey",
          "type": "string",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "listenKey": {
              "name": "listenKey",
              "type": "string",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "LISTEN KEY (SPOT)",
      "path": "toc.user-data-streams.listen-key-spot.close-a-listenkey-user_stream",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#close-a-listenkey-user_stream",
      "name": "Close a ListenKey (USER_STREAM)"
    },
    {
      "securityType": "USER_STREAM",
      "request": "POST  /sapi/v1/userDataStream",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/userDataStream",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "listenKey": "string"
            }
          ],
          "responseExamples": [
            {
              "listenKey": "T3ee22BIYuWqmvne0HNq2A2WsFlEtLhvWCtItw6ffhhdmjifQ2tRbuKkTHhr"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "LISTEN KEY (MARGIN)",
      "path": "toc.user-data-streams.listen-key-margin.create-a-listenkey-user_stream-2",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#create-a-listenkey-user_stream-2",
      "name": "Create a ListenKey (USER_STREAM)"
    },
    {
      "securityType": "USER_STREAM",
      "request": "PUT  /sapi/v1/userDataStream",
      "requestMethod": "PUT",
      "requestEndPoint": "/sapi/v1/userDataStream",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "listenKey": {
          "name": "listenKey",
          "type": "string",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "listenKey": {
              "name": "listenKey",
              "type": "string",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "LISTEN KEY (MARGIN)",
      "path": "toc.user-data-streams.listen-key-margin.ping-keep-alive-a-listenkey-user_stream-2",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#ping-keep-alive-a-listenkey-user_stream-2",
      "name": "Ping/Keep-alive a ListenKey (USER_STREAM)"
    },
    {
      "securityType": "USER_STREAM",
      "request": "DELETE  /sapi/v1/userDataStream",
      "requestMethod": "DELETE",
      "requestEndPoint": "/sapi/v1/userDataStream",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "listenKey": {
          "name": "listenKey",
          "type": "string",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "listenKey": {
              "name": "listenKey",
              "type": "string",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "LISTEN KEY (MARGIN)",
      "path": "toc.user-data-streams.listen-key-margin.close-a-listenkey-user_stream-2",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#close-a-listenkey-user_stream-2",
      "name": "Close a ListenKey (USER_STREAM)"
    },
    {
      "securityType": "USER_STREAM",
      "request": "POST /sapi/v1/userDataStream/isolated",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/userDataStream/isolated",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "listenKey": "string"
            }
          ],
          "responseExamples": [
            {
              "listenKey": "T3ee22BIYuWqmvne0HNq2A2WsFlEtLhvWCtItw6ffhhdmjifQ2tRbuKkTHhr"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "LISTEN KEY (ISOLATED MARGIN)",
      "path": "toc.user-data-streams.listen-key-isolated-margin.generate-a-listen-key-user_stream",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#generate-a-listen-key-user_stream",
      "name": "Generate a Listen Key (USER_STREAM)"
    },
    {
      "securityType": "USER_STREAM",
      "request": "PUT /sapi/v1/userDataStream/isolated",
      "requestMethod": "PUT",
      "requestEndPoint": "/sapi/v1/userDataStream/isolated",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "listenKey": {
          "name": "listenKey",
          "type": "string",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "listenKey": {
              "name": "listenKey",
              "type": "string",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "LISTEN KEY (ISOLATED MARGIN)",
      "path": "toc.user-data-streams.listen-key-isolated-margin.ping-keep-alive-a-listen-key-user_stream",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#ping-keep-alive-a-listen-key-user_stream",
      "name": "Ping/Keep-alive a Listen Key  (USER_STREAM)"
    },
    {
      "securityType": "USER_STREAM",
      "request": "DELETE /sapi/v1/userDataStream/isolated",
      "requestMethod": "DELETE",
      "requestEndPoint": "/sapi/v1/userDataStream/isolated",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "listenKey": {
          "name": "listenKey",
          "type": "string",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "listenKey": {
              "name": "listenKey",
              "type": "string",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "LISTEN KEY (ISOLATED MARGIN)",
      "path": "toc.user-data-streams.listen-key-isolated-margin.close-a-listenkey-user_stream-3",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#close-a-listenkey-user_stream-3",
      "name": "Close a ListenKey (USER_STREAM)"
    },
    {
      "description": "Start a new margin user data stream.",
      "securityType": "USER_STREAM",
      "request": "POST /sapi/v1/margin/listen-key",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/margin/listen-key",
      "hmacSHA256": false,
      "weights": {
        "UID": 1,
        "UID_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "listenKey": "string"
            }
          ],
          "responseExamples": [
            {
              "listenKey": "T3ee22BIYuWqmvne0HNq2A2WsFlEtLhvWCtItw6ffhhd"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "LISTEN KEY",
      "path": "toc.margin-user-data-streams.listen-key.create-a-margin-listenkey-user_stream",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#create-a-margin-listenkey-user_stream",
      "name": "Create a Margin ListenKey (USER_STREAM)"
    },
    {
      "description": "Keepalive a user data stream to prevent a time out.",
      "securityType": "USER_STREAM",
      "request": "PUT /sapi/v1/margin/listen-key",
      "requestMethod": "PUT",
      "requestEndPoint": "/sapi/v1/margin/listen-key",
      "hmacSHA256": false,
      "weights": {
        "UID": 1,
        "UID_text": "1"
      },
      "baseParams": {
        "listenKey": {
          "name": "listenKey",
          "type": "string",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "listenKey": {
              "name": "listenKey",
              "type": "string",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "LISTEN KEY",
      "path": "toc.margin-user-data-streams.listen-key.keep-alive-a-margin-listenkey-user_stream",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#keep-alive-a-margin-listenkey-user_stream",
      "name": "Keep-alive a Margin ListenKey  (USER_STREAM)"
    },
    {
      "description": "Close out a user data stream.",
      "securityType": "USER_STREAM",
      "request": "DELETE /sapi/v1/margin/listen-key",
      "requestMethod": "DELETE",
      "requestEndPoint": "/sapi/v1/margin/listen-key",
      "hmacSHA256": false,
      "weights": {
        "UID": 3000,
        "UID_text": "3000"
      },
      "baseParams": {
        "listenKey": {
          "name": "listenKey",
          "type": "string",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "listenKey": {
              "name": "listenKey",
              "type": "string",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "LISTEN KEY",
      "path": "toc.margin-user-data-streams.listen-key.close-a-margin-listenkey-user_stream",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#close-a-margin-listenkey-user_stream",
      "name": "Close a Margin ListenKey(USER_STREAM)"
    },
    {
      "description": "Get available Simple Earn flexible product list",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/simple-earn/flexible/list",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/simple-earn/flexible/list",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10, Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10, Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "asset": "string",
                  "latestAnnualPercentageRate": "NumberString",
                  "tierAnnualPercentageRate": {
                    "0-5BTC": "number",
                    "5-10BTC": "number"
                  },
                  "airDropPercentageRate": "NumberString",
                  "canPurchase": "boolean",
                  "canRedeem": "boolean",
                  "isSoldOut": "boolean",
                  "hot": "boolean",
                  "minPurchaseAmount": "NumberString",
                  "productId": "string",
                  "subscriptionStartTime": "NumberString",
                  "status": "string"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "asset": "BTC",
                  "latestAnnualPercentageRate": "0.05000000",
                  "tierAnnualPercentageRate": {
                    "0-5BTC": 0.05,
                    "5-10BTC": 0.03
                  },
                  "airDropPercentageRate": "0.05000000",
                  "canPurchase": true,
                  "canRedeem": true,
                  "isSoldOut": true,
                  "hot": true,
                  "minPurchaseAmount": "0.01000000",
                  "productId": "BTC001",
                  "subscriptionStartTime": "1646182276000",
                  "status": "PURCHASING"
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.get-simple-earn-flexible-product-list-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-simple-earn-flexible-product-list-user_data",
      "name": "Get Simple Earn Flexible Product List (USER_DATA)"
    },
    {
      "description": "Get available Simple Earn locked product list",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/simple-earn/locked/list",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/simple-earn/locked/list",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10, Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10, Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "projectId": "string",
                  "detail": {
                    "asset": "string",
                    "rewardAsset": "string",
                    "duration": "number",
                    "renewable": "boolean",
                    "isSoldOut": "boolean",
                    "apr": "NumberString",
                    "status": "string",
                    "subscriptionStartTime": "NumberString",
                    "extraRewardAsset": "string",
                    "extraRewardAPR": "NumberString"
                  },
                  "quota": {
                    "totalPersonalQuota": "NumberString",
                    "minimum": "NumberString"
                  }
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "projectId": "Axs*90",
                  "detail": {
                    "asset": "AXS",
                    "rewardAsset": "AXS",
                    "duration": 90,
                    "renewable": true,
                    "isSoldOut": true,
                    "apr": "1.2069",
                    "status": "CREATED",
                    "subscriptionStartTime": "1646182276000",
                    "extraRewardAsset": "BNB",
                    "extraRewardAPR": "0.23"
                  },
                  "quota": {
                    "totalPersonalQuota": "2",
                    "minimum": "0.001"
                  }
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.get-simple-earn-locked-product-list-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-simple-earn-locked-product-list-user_data",
      "name": "Get Simple Earn Locked Product List (USER_DATA)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /sapi/v1/simple-earn/flexible/subscribe",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/simple-earn/flexible/subscribe",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "productId": {
          "name": "productId",
          "type": "string",
          "required": true,
          "description": ""
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "autoSubscribe": {
          "name": "autoSubscribe",
          "type": "boolean",
          "required": false,
          "description": "true or false, default true."
        },
        "sourceAccount": {
          "name": "sourceAccount",
          "type": "\"SPOT\"|\"FUND\"|\"ALL\"",
          "required": false,
          "description": "SPOT,FUND,ALL, default SPOT"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "productId": {
              "name": "productId",
              "type": "string",
              "required": true,
              "description": ""
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "autoSubscribe": {
              "name": "autoSubscribe",
              "type": "boolean",
              "required": false,
              "description": "true or false, default true."
            },
            "sourceAccount": {
              "name": "sourceAccount",
              "type": "\"SPOT\"|\"FUND\"|\"ALL\"",
              "required": false,
              "description": "SPOT,FUND,ALL, default SPOT"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "purchaseId": "number",
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "purchaseId": 40607,
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.subscribe-flexible-product-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#subscribe-flexible-product-trade",
      "name": "Subscribe Flexible Product (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /sapi/v1/simple-earn/locked/subscribe",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/simple-earn/locked/subscribe",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "projectId": {
          "name": "projectId",
          "type": "string",
          "required": true,
          "description": ""
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "autoSubscribe": {
          "name": "autoSubscribe",
          "type": "boolean",
          "required": false,
          "description": "true or false, default true."
        },
        "sourceAccount": {
          "name": "sourceAccount",
          "type": "\"SPOT\"|\"FUND\"|\"ALL\"",
          "required": false,
          "description": "SPOT,FUND,ALL, default SPOT"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "projectId": {
              "name": "projectId",
              "type": "string",
              "required": true,
              "description": ""
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "autoSubscribe": {
              "name": "autoSubscribe",
              "type": "boolean",
              "required": false,
              "description": "true or false, default true."
            },
            "sourceAccount": {
              "name": "sourceAccount",
              "type": "\"SPOT\"|\"FUND\"|\"ALL\"",
              "required": false,
              "description": "SPOT,FUND,ALL, default SPOT"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "purchaseId": "number",
              "positionId": "NumberString",
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "purchaseId": 40607,
              "positionId": "12345",
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.subscribe-locked-product-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#subscribe-locked-product-trade",
      "name": "Subscribe Locked Product (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /sapi/v1/simple-earn/flexible/redeem",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/simple-earn/flexible/redeem",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "productId": {
          "name": "productId",
          "type": "string",
          "required": true,
          "description": ""
        },
        "redeemAll": {
          "name": "redeemAll",
          "type": "boolean",
          "required": false,
          "description": "true or false, default to false"
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": false,
          "description": "if redeemAll is false, amount is mandatory"
        },
        "destAccount": {
          "name": "destAccount",
          "type": "\"SPOT\"|\"FUND\"",
          "required": false,
          "description": "SPOT,FUND, default SPOT"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "productId": {
              "name": "productId",
              "type": "string",
              "required": true,
              "description": ""
            },
            "redeemAll": {
              "name": "redeemAll",
              "type": "boolean",
              "required": false,
              "description": "true or false, default to false"
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": false,
              "description": "if redeemAll is false, amount is mandatory"
            },
            "destAccount": {
              "name": "destAccount",
              "type": "\"SPOT\"|\"FUND\"",
              "required": false,
              "description": "SPOT,FUND, default SPOT"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "redeemId": "number",
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "redeemId": 40607,
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.redeem-flexible-product-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#redeem-flexible-product-trade",
      "name": "Redeem Flexible Product (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /sapi/v1/simple-earn/locked/redeem",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/simple-earn/locked/redeem",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "positionId": {
          "name": "positionId",
          "type": "string",
          "required": true,
          "description": "\"1234\""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "positionId": {
              "name": "positionId",
              "type": "string",
              "required": true,
              "description": "\"1234\""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "redeemId": "number",
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "redeemId": 40607,
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.redeem-locked-product-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#redeem-locked-product-trade",
      "name": "Redeem Locked Product (TRADE)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/simple-earn/flexible/position",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/simple-earn/flexible/position",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "productId": {
          "name": "productId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying the page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10, Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "productId": {
              "name": "productId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying the page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10, Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "totalAmount": "NumberString",
                  "tierAnnualPercentageRate": {
                    "0-5BTC": "number",
                    "5-10BTC": "number"
                  },
                  "latestAnnualPercentageRate": "NumberString",
                  "yesterdayAirdropPercentageRate": "NumberString",
                  "asset": "string",
                  "airDropAsset": "string",
                  "canRedeem": "boolean",
                  "collateralAmount": "NumberString",
                  "productId": "string",
                  "yesterdayRealTimeRewards": "NumberString",
                  "cumulativeBonusRewards": "NumberString",
                  "cumulativeRealTimeRewards": "NumberString",
                  "cumulativeTotalRewards": "NumberString",
                  "autoSubscribe": "boolean"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "totalAmount": "75.46000000",
                  "tierAnnualPercentageRate": {
                    "0-5BTC": 0.05,
                    "5-10BTC": 0.03
                  },
                  "latestAnnualPercentageRate": "0.02599895",
                  "yesterdayAirdropPercentageRate": "0.02599895",
                  "asset": "USDT",
                  "airDropAsset": "BETH",
                  "canRedeem": true,
                  "collateralAmount": "232.23123213",
                  "productId": "USDT001",
                  "yesterdayRealTimeRewards": "0.10293829",
                  "cumulativeBonusRewards": "0.22759183",
                  "cumulativeRealTimeRewards": "0.22759183",
                  "cumulativeTotalRewards": "0.45459183",
                  "autoSubscribe": true
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.get-flexible-product-position-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-flexible-product-position-user_data",
      "name": "Get Flexible Product Position (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/simple-earn/locked/position",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/simple-earn/locked/position",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "positionId": {
          "name": "positionId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "projectId": {
          "name": "projectId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying the page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10, Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "positionId": {
              "name": "positionId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "projectId": {
              "name": "projectId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying the page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10, Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "positionId": "NumberString",
                  "projectId": "string",
                  "asset": "string",
                  "amount": "NumberString",
                  "purchaseTime": "NumberString",
                  "duration": "NumberString",
                  "accrualDays": "NumberString",
                  "rewardAsset": "string",
                  "APY": "NumberString",
                  "isRenewable": "boolean",
                  "isAutoRenew": "boolean",
                  "redeemDate": "NumberString"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "positionId": "123123",
                  "projectId": "Axs*90",
                  "asset": "AXS",
                  "amount": "122.09202928",
                  "purchaseTime": "1646182276000",
                  "duration": "60",
                  "accrualDays": "4",
                  "rewardAsset": "AXS",
                  "APY": "0.23",
                  "isRenewable": true,
                  "isAutoRenew": true,
                  "redeemDate": "1732182276000"
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.get-locked-product-position-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-locked-product-position-user_data",
      "name": "Get Locked Product Position (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/simple-earn/account",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/simple-earn/account",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "totalAmountInBTC": "NumberString",
              "totalAmountInUSDT": "NumberString",
              "totalFlexibleAmountInBTC": "NumberString",
              "totalFlexibleAmountInUSDT": "NumberString",
              "totalLockedInBTC": "NumberString",
              "totalLockedInUSDT": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "totalAmountInBTC": "0.01067982",
              "totalAmountInUSDT": "77.13289230",
              "totalFlexibleAmountInBTC": "0.00000000",
              "totalFlexibleAmountInUSDT": "0.00000000",
              "totalLockedInBTC": "0.01067982",
              "totalLockedInUSDT": "77.13289230"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.simple-account-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#simple-account-user_data",
      "name": "Simple Account (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/simple-earn/flexible/history/subscriptionRecord",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/simple-earn/flexible/history/subscriptionRecord",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "productId": {
          "name": "productId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "purchaseId": {
          "name": "purchaseId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying the page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10, Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "productId": {
              "name": "productId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "purchaseId": {
              "name": "purchaseId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying the page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10, Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "amount": "NumberString",
                  "asset": "string",
                  "time": "number",
                  "purchaseId": "number",
                  "type": "string", // AUTO for auto subscribe, NORMAL for normal subscription, CONVERT for Locked to Flexible, LOAN for flexible loan collateral, AI for Auto Invest subscribe, TRANSFER for Locked Savings to Flexible
                  "sourceAccount": "string", // SPOT, FUNDING, SPOTANDFUNDING
                  "amtFromSpot": "NumberString", // Display if sourceAccount is SPOTANDFUNDING
                  "amtFromFunding": "NumberString", // Display if sourceAccount is SPOTANDFUNDING
                  "status": "string" // PURCHASING/SUCCESS/FAILED
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "amount": "100.00000000",
                  "asset": "USDT",
                  "time": 1575018510000,
                  "purchaseId": 26055,
                  "type": "AUTO", // AUTO for auto subscribe, NORMAL for normal subscription, CONVERT for Locked to Flexible, LOAN for flexible loan collateral, AI for Auto Invest subscribe, TRANSFER for Locked Savings to Flexible
                  "sourceAccount": "SPOT", // SPOT, FUNDING, SPOTANDFUNDING
                  "amtFromSpot": "30", // Display if sourceAccount is SPOTANDFUNDING
                  "amtFromFunding": "70", // Display if sourceAccount is SPOTANDFUNDING
                  "status": "SUCCESS" // PURCHASING/SUCCESS/FAILED
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.get-flexible-subscription-record-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-flexible-subscription-record-user_data",
      "name": "Get Flexible Subscription Record (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/simple-earn/locked/history/subscriptionRecord",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/simple-earn/locked/history/subscriptionRecord",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "purchaseId": {
          "name": "purchaseId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying the page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10, Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "purchaseId": {
              "name": "purchaseId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying the page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10, Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "positionId": "NumberString",
                  "purchaseId": "number",
                  "time": "number",
                  "asset": "string",
                  "amount": "NumberString",
                  "lockPeriod": "NumberString",
                  "type": "string", // NORMAL for normal subscription, AUTO for auto-subscription order, ACTIVITY for activity order, TRIAL for trial fund order, RESTAKE for restake order
                  "sourceAccount": "string", // SPOT, FUNDING, SPOTANDFUNDING
                  "amtFromSpot": "NumberString", // Display if sourceAccount is SPOTANDFUNDING
                  "amtFromFunding": "NumberString", // Display if sourceAccount is SPOTANDFUNDING
                  "status": "string" // PURCHASING/SUCCESS/FAILED
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "positionId": "123123",
                  "purchaseId": 26055,
                  "time": 1575018510000,
                  "asset": "BNB",
                  "amount": "21312.23223",
                  "lockPeriod": "30",
                  "type": "AUTO", // NORMAL for normal subscription, AUTO for auto-subscription order, ACTIVITY for activity order, TRIAL for trial fund order, RESTAKE for restake order
                  "sourceAccount": "SPOT", // SPOT, FUNDING, SPOTANDFUNDING
                  "amtFromSpot": "30", // Display if sourceAccount is SPOTANDFUNDING
                  "amtFromFunding": "70", // Display if sourceAccount is SPOTANDFUNDING
                  "status": "SUCCESS" // PURCHASING/SUCCESS/FAILED
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.get-locked-subscription-record-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-locked-subscription-record-user_data",
      "name": "Get Locked Subscription Record (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/simple-earn/flexible/history/redemptionRecord",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/simple-earn/flexible/history/redemptionRecord",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "productId": {
          "name": "productId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "redeemId": {
          "name": "redeemId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying the page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10, Max:100"
        }
      },
      "overloads": [
        {
          "params": {
            "productId": {
              "name": "productId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "redeemId": {
              "name": "redeemId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying the page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10, Max:100"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "amount": "NumberString",
                  "asset": "string",
                  "time": "number",
                  "productId": "string",
                  "redeemId": "number",
                  "destAccount": "string", // SPOT, FUNDING
                  "status": "string"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "amount": "10.54000000",
                  "asset": "USDT",
                  "time": 1577257222000,
                  "productId": "USDT001",
                  "redeemId": 40607,
                  "destAccount": "SPOT", // SPOT, FUNDING
                  "status": "PAID"
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.get-flexible-redemption-record-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-flexible-redemption-record-user_data",
      "name": "Get Flexible Redemption Record (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/simple-earn/locked/history/redemptionRecord",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/simple-earn/locked/history/redemptionRecord",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "positionId": {
          "name": "positionId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "redeemId": {
          "name": "redeemId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying the page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10, Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "positionId": {
              "name": "positionId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "redeemId": {
              "name": "redeemId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying the page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10, Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "positionId": "NumberString",
                  "redeemId": "number",
                  "time": "number",
                  "asset": "string",
                  "lockPeriod": "NumberString",
                  "amount": "NumberString",
                  "type": "string", //MATURE for redeem to Spot Wallet, NEW_TRANSFERRED for redeem to Flexible product, AHEAD for early redemption
                  "deliverDate": "NumberString",
                  "status": "string"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "positionId": "123123",
                  "redeemId": 40607,
                  "time": 1575018510000,
                  "asset": "BNB",
                  "lockPeriod": "30",
                  "amount": "21312.23223",
                  "type": "MATURE", //MATURE for redeem to Spot Wallet, NEW_TRANSFERRED for redeem to Flexible product, AHEAD for early redemption
                  "deliverDate": "1575018510000",
                  "status": "PAID"
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.get-locked-redemption-record-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-locked-redemption-record-user_data",
      "name": "Get Locked Redemption Record (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/simple-earn/flexible/history/rewardsRecord",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/simple-earn/flexible/history/rewardsRecord",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "productId": {
          "name": "productId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "type": {
          "name": "type",
          "type": "OrderType",
          "required": true,
          "description": "BONUS - Bonus tiered APR, REALTIME Real-time APR, REWARDS Historical rewards"
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "current page 1， default 1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "default 10，max 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "productId": {
              "name": "productId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "type": {
              "name": "type",
              "type": "OrderType",
              "required": true,
              "description": "BONUS - Bonus tiered APR, REALTIME Real-time APR, REWARDS Historical rewards"
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "current page 1， default 1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "default 10，max 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "asset": "string",
                  "rewards": "NumberString",
                  "projectId": "string",
                  "type": "string",
                  "time": "number"
                },
                null
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "asset": "BUSD",
                  "rewards": "0.00006408",
                  "projectId": "USDT001",
                  "type": "BONUS",
                  "time": 1577233578000
                },
                {
                  "asset": "USDT",
                  "rewards": "0.00687654",
                  "projectId": "USDT001",
                  "type": "REALTIME",
                  "time": 1577233562000
                }
              ],
              "total": 2
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.get-flexible-rewards-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-flexible-rewards-history-user_data",
      "name": "Get Flexible Rewards History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/simple-earn/locked/history/rewardsRecord",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/simple-earn/locked/history/rewardsRecord",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "positionId": {
          "name": "positionId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying the page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10, Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "positionId": {
              "name": "positionId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying the page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10, Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "positionId": "NumberString",
                  "time": "number",
                  "asset": "string",
                  "lockPeriod": "NumberString",
                  "amount": "NumberString"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "positionId": "123123",
                  "time": 1575018510000,
                  "asset": "BNB",
                  "lockPeriod": "30",
                  "amount": "21312.23223"
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.get-locked-rewards-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-locked-rewards-history-user_data",
      "name": "Get Locked Rewards History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/simple-earn/flexible/setAutoSubscribe",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/simple-earn/flexible/setAutoSubscribe",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "productId": {
          "name": "productId",
          "type": "string",
          "required": true,
          "description": ""
        },
        "autoSubscribe": {
          "name": "autoSubscribe",
          "type": "boolean",
          "required": true,
          "description": "true or false"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "productId": {
              "name": "productId",
              "type": "string",
              "required": true,
              "description": ""
            },
            "autoSubscribe": {
              "name": "autoSubscribe",
              "type": "boolean",
              "required": true,
              "description": "true or false"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.set-flexible-auto-subscribe-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#set-flexible-auto-subscribe-user_data",
      "name": "Set Flexible Auto Subscribe (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/simple-earn/locked/setAutoSubscribe",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/simple-earn/locked/setAutoSubscribe",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "positionId": {
          "name": "positionId",
          "type": "string",
          "required": true,
          "description": ""
        },
        "autoSubscribe": {
          "name": "autoSubscribe",
          "type": "boolean",
          "required": true,
          "description": "true or false"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "positionId": {
              "name": "positionId",
              "type": "string",
              "required": true,
              "description": ""
            },
            "autoSubscribe": {
              "name": "autoSubscribe",
              "type": "boolean",
              "required": true,
              "description": "true or false"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.set-locked-auto-subscribe-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#set-locked-auto-subscribe-user_data",
      "name": "Set Locked Auto Subscribe (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/simple-earn/flexible/personalLeftQuota",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/simple-earn/flexible/personalLeftQuota",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "productId": {
          "name": "productId",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "productId": {
              "name": "productId",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "leftPersonalQuota": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "leftPersonalQuota": "1000"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.get-flexible-personal-left-quota-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-flexible-personal-left-quota-user_data",
      "name": "Get Flexible Personal Left Quota (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/simple-earn/locked/personalLeftQuota",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/simple-earn/locked/personalLeftQuota",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "projectId": {
          "name": "projectId",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "projectId": {
              "name": "projectId",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "leftPersonalQuota": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "leftPersonalQuota": "1000"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.get-locked-personal-left-quota-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-locked-personal-left-quota-user_data",
      "name": "Get Locked Personal Left Quota (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/simple-earn/flexible/subscriptionPreview",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/simple-earn/flexible/subscriptionPreview",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "productId": {
          "name": "productId",
          "type": "string",
          "required": true,
          "description": ""
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "productId": {
              "name": "productId",
              "type": "string",
              "required": true,
              "description": ""
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "totalAmount": "NumberString",
              "rewardAsset": "string",
              "airDropAsset": "string",
              "estDailyBonusRewards": "NumberString",
              "estDailyRealTimeRewards": "NumberString",
              "estDailyAirdropRewards": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "totalAmount": "1232.32230982",
              "rewardAsset": "BUSD",
              "airDropAsset": "BETH",
              "estDailyBonusRewards": "0.22759183",
              "estDailyRealTimeRewards": "0.22759183",
              "estDailyAirdropRewards": "0.22759183"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.get-flexible-subscription-preview-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-flexible-subscription-preview-user_data",
      "name": "Get Flexible Subscription Preview (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/simple-earn/locked/subscriptionPreview",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/simple-earn/locked/subscriptionPreview",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "projectId": {
          "name": "projectId",
          "type": "string",
          "required": true,
          "description": ""
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "autoSubscribe": {
          "name": "autoSubscribe",
          "type": "boolean",
          "required": false,
          "description": "true or false, default true."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "projectId": {
              "name": "projectId",
              "type": "string",
              "required": true,
              "description": ""
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "autoSubscribe": {
              "name": "autoSubscribe",
              "type": "boolean",
              "required": false,
              "description": "true or false, default true."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "rewardAsset": "string",
                "totalRewardAmt": "NumberString",
                "extraRewardAsset": "string",
                "estTotalExtraRewardAmt": "NumberString",
                "nextPay": "NumberString",
                "nextPayDate": "NumberString",
                "valueDate": "NumberString",
                "rewardsEndDate": "NumberString",
                "deliverDate": "NumberString",
                "nextSubscriptionDate": "NumberString"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "rewardAsset": "AXS",
                "totalRewardAmt": "5.17181528",
                "extraRewardAsset": "BNB",
                "estTotalExtraRewardAmt": "5.17181528",
                "nextPay": "1.29295383",
                "nextPayDate": "1646697600000",
                "valueDate": "1646697600000",
                "rewardsEndDate": "1651449600000",
                "deliverDate": "1651536000000",
                "nextSubscriptionDate": "1651536000000"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.get-locked-subscription-preview-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-locked-subscription-preview-user_data",
      "name": "Get Locked Subscription Preview (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/simple-earn/flexible/history/rateHistory",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/simple-earn/flexible/history/rateHistory",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "productId": {
          "name": "productId",
          "type": "string",
          "required": true,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10, Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "productId": {
              "name": "productId",
              "type": "string",
              "required": true,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10, Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "productId": "string",
                  "asset": "string",
                  "annualPercentageRate": "NumberString",
                  "time": "number"
                }
              ],
              "total": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "productId": "BUSD001",
                  "asset": "BUSD",
                  "annualPercentageRate": "0.00006408",
                  "time": 1577233578000
                }
              ],
              "total": "1"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.get-rate-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-rate-history-user_data",
      "name": "Get Rate History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/simple-earn/flexible/history/collateralRecord",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/simple-earn/flexible/history/collateralRecord",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "productId": {
          "name": "productId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10, Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "productId": {
              "name": "productId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10, Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "amount": "NumberString",
                  "productId": "string",
                  "asset": "string",
                  "createTime": "number",
                  "type": "string",
                  "productName": "string",
                  "orderId": "number"
                }
              ],
              "total": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "amount": "100.00000000",
                  "productId": "BUSD001",
                  "asset": "USDT",
                  "createTime": 1575018510000,
                  "type": "REPAY",
                  "productName": "USDT",
                  "orderId": 26055
                }
              ],
              "total": "1"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Simple Earn Endpoints",
      "path": "toc.simple-earn-endpoints.get-collateral-record-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-collateral-record-user_data",
      "name": "Get Collateral Record (USER_DATA)"
    },
    {
      "description": "Get Dual Investment product list",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/dci/product/list",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/dci/product/list",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "optionType": {
          "name": "optionType",
          "type": "string",
          "required": true,
          "description": "Input CALL or PUT"
        },
        "exercisedCoin": {
          "name": "exercisedCoin",
          "type": "string",
          "required": true,
          "description": "Target exercised asset, e.g.: if you subscribe to a high sell product (call option), you should input: optionType:CALL,exercisedCoin:USDT,investCoin:BNB; if you subscribe to a low buy product (put option), you should input: optionType:PUT,exercisedCoin:BNB,investCoin:USDT"
        },
        "investCoin": {
          "name": "investCoin",
          "type": "string",
          "required": true,
          "description": "Asset used for subscribing, e.g.: if you subscribe to a high sell product (call option), you should input: optionType:CALL,exercisedCoin:USDT,investCoin:BNB; if you subscribe to a low buy product (put option), you should input: optionType:PUT,exercisedCoin:BNB,investCoin:USDT"
        },
        "pageSize": {
          "name": "pageSize",
          "type": "LONG",
          "required": false,
          "description": "Default: 10, Maximum: 100"
        },
        "pageIndex": {
          "name": "pageIndex",
          "type": "INT",
          "required": false,
          "description": "Default: 1"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "optionType": {
              "name": "optionType",
              "type": "string",
              "required": true,
              "description": "Input CALL or PUT"
            },
            "exercisedCoin": {
              "name": "exercisedCoin",
              "type": "string",
              "required": true,
              "description": "Target exercised asset, e.g.: if you subscribe to a high sell product (call option), you should input: optionType:CALL,exercisedCoin:USDT,investCoin:BNB; if you subscribe to a low buy product (put option), you should input: optionType:PUT,exercisedCoin:BNB,investCoin:USDT"
            },
            "investCoin": {
              "name": "investCoin",
              "type": "string",
              "required": true,
              "description": "Asset used for subscribing, e.g.: if you subscribe to a high sell product (call option), you should input: optionType:CALL,exercisedCoin:USDT,investCoin:BNB; if you subscribe to a low buy product (put option), you should input: optionType:PUT,exercisedCoin:BNB,investCoin:USDT"
            },
            "pageSize": {
              "name": "pageSize",
              "type": "LONG",
              "required": false,
              "description": "Default: 10, Maximum: 100"
            },
            "pageIndex": {
              "name": "pageIndex",
              "type": "INT",
              "required": false,
              "description": "Default: 1"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number",
              "list": [
                {
                  "id": "NumberString",
                  "investCoin": "string",
                  "exercisedCoin": "string",
                  "strikePrice": "NumberString",
                  "duration": "number",
                  "settleDate": "number",
                  "purchaseDecimal": "number",
                  "purchaseEndTime": "number",
                  "canPurchase": "boolean", //true, false
                  "apr": "NumberString",
                  "orderId": "number",
                  "minAmount": "NumberString",
                  "maxAmount": "NumberString",
                  "createTimestamp": "number",
                  "optionType": "string",
                  "isAutoCompoundEnable": "boolean", //true, false
                  "autoCompoundPlanList": [
                    "string"
                  ]
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 1,
              "list": [
                {
                  "id": "741590",
                  "investCoin": "USDT",
                  "exercisedCoin": "BNB",
                  "strikePrice": "380",
                  "duration": 4,
                  "settleDate": 1709020800000,
                  "purchaseDecimal": 8,
                  "purchaseEndTime": 1708934400000,
                  "canPurchase": true, //true, false
                  "apr": "0.6076",
                  "orderId": 8257205859,
                  "minAmount": "0.1",
                  "maxAmount": "25265.7",
                  "createTimestamp": 1708560084000,
                  "optionType": "PUT",
                  "isAutoCompoundEnable": true, //true, false
                  "autoCompoundPlanList": [
                    "STANDARD",
                    "ADVANCE"
                  ]
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Dual Investment Endpoints",
      "path": "toc.dual-investment-endpoints.get-dual-investment-product-list-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-dual-investment-product-list-user_data",
      "name": "Get Dual Investment product list(USER_DATA)"
    },
    {
      "description": "Subscribe Dual Investment products",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/dci/product/subscribe",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/dci/product/subscribe",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "id": {
          "name": "id",
          "type": "string",
          "required": true,
          "description": "get id from /sapi/v1/dci/product/list"
        },
        "orderId": {
          "name": "orderId",
          "type": "string",
          "required": true,
          "description": "get orderId from /sapi/v1/dci/product/list"
        },
        "depositAmount": {
          "name": "depositAmount",
          "type": "DECIMAL",
          "required": true,
          "description": "the amount for subscribing"
        },
        "autoCompoundPlan": {
          "name": "autoCompoundPlan",
          "type": "ENUM",
          "required": true,
          "description": "NONE: switch off the plan, STANDARD:standard plan,ADVANCED:advanced plan"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "id": {
              "name": "id",
              "type": "string",
              "required": true,
              "description": "get id from /sapi/v1/dci/product/list"
            },
            "orderId": {
              "name": "orderId",
              "type": "string",
              "required": true,
              "description": "get orderId from /sapi/v1/dci/product/list"
            },
            "depositAmount": {
              "name": "depositAmount",
              "type": "DECIMAL",
              "required": true,
              "description": "the amount for subscribing"
            },
            "autoCompoundPlan": {
              "name": "autoCompoundPlan",
              "type": "ENUM",
              "required": true,
              "description": "NONE: switch off the plan, STANDARD:standard plan,ADVANCED:advanced plan"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "positionId": "number",
              "investCoin": "string",
              "exercisedCoin": "string",
              "subscriptionAmount": "NumberString",
              "duration": "number",
              "autoCompoundPlan": "string", //STANDARD, ADVANCED, this field won't display when autocompound is set to None
              "strikePrice": "NumberString",
              "settleDate": "number",
              "purchaseStatus": "string",
              "apr": "NumberString",
              "orderId": "number",
              "purchaseTime": "number",
              "optionType": "string"
            }
          ],
          "responseExamples": [
            {
              "positionId": 10208824,
              "investCoin": "BNB",
              "exercisedCoin": "USDT",
              "subscriptionAmount": "0.002",
              "duration": 4,
              "autoCompoundPlan": "STANDARD", //STANDARD, ADVANCED, this field won't display when autocompound is set to None
              "strikePrice": "380",
              "settleDate": 1709020800000,
              "purchaseStatus": "PURCHASE_SUCCESS",
              "apr": "0.7397",
              "orderId": 8259117597,
              "purchaseTime": 1708677583874,
              "optionType": "CALL"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Dual Investment Endpoints",
      "path": "toc.dual-investment-endpoints.subscribe-dual-investment-products-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#subscribe-dual-investment-products-user_data",
      "name": "Subscribe Dual Investment products(USER_DATA)"
    },
    {
      "description": "Get Dual Investment positions (batch)",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/dci/product/positions",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/dci/product/positions",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "status": {
          "name": "status",
          "type": "ENUM",
          "required": false,
          "description": "PENDING:Products are purchasing, will give results later;PURCHASE_SUCCESS:purchase successfully;SETTLED: Products are finish settling;PURCHASE_FAIL:fail to purchase;REFUNDING:refund ongoing;REFUND_SUCCESS:refund to spot account successfully; SETTLING:Products are settling. If don't fill this field, will response all the position status."
        },
        "pageSize": {
          "name": "pageSize",
          "type": "LONG",
          "required": false,
          "description": "Default: 10, Max:100"
        },
        "pageIndex": {
          "name": "pageIndex",
          "type": "INT",
          "required": false,
          "description": "Default:1"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "status": {
              "name": "status",
              "type": "ENUM",
              "required": false,
              "description": "PENDING:Products are purchasing, will give results later;PURCHASE_SUCCESS:purchase successfully;SETTLED: Products are finish settling;PURCHASE_FAIL:fail to purchase;REFUNDING:refund ongoing;REFUND_SUCCESS:refund to spot account successfully; SETTLING:Products are settling. If don't fill this field, will response all the position status."
            },
            "pageSize": {
              "name": "pageSize",
              "type": "LONG",
              "required": false,
              "description": "Default: 10, Max:100"
            },
            "pageIndex": {
              "name": "pageIndex",
              "type": "INT",
              "required": false,
              "description": "Default:1"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number",
              "list": [
                {
                  "id": "NumberString", //positionId
                  "investCoin": "string",
                  "exercisedCoin": "string",
                  "subscriptionAmount": "NumberString",
                  "strikePrice": "NumberString",
                  "duration": "number",
                  "settleDate": "number",
                  "purchaseStatus": "string",
                  "apr": "NumberString",
                  "orderId": "number",
                  "purchaseEndTime": "number", //申购中, 申购成功, 已结算, 申购失败, 退款中, 退款成功, 结算中
                  "optionType": "string",
                  "autoCompoundPlan": "string" //关闭计划, 基础计划, 进阶计划
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 1,
              "list": [
                {
                  "id": "10160533", //positionId
                  "investCoin": "USDT",
                  "exercisedCoin": "BNB",
                  "subscriptionAmount": "0.5",
                  "strikePrice": "330",
                  "duration": 4,
                  "settleDate": 1708416000000,
                  "purchaseStatus": "PURCHASE_SUCCESS",
                  "apr": "0.0365",
                  "orderId": 7973677530,
                  "purchaseEndTime": 1708329600000, //申购中, 申购成功, 已结算, 申购失败, 退款中, 退款成功, 结算中
                  "optionType": "PUT",
                  "autoCompoundPlan": "STANDARD" //关闭计划, 基础计划, 进阶计划
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Dual Investment Endpoints",
      "path": "toc.dual-investment-endpoints.get-dual-investment-positions-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-dual-investment-positions-user_data",
      "name": "Get Dual Investment positions(USER_DATA)"
    },
    {
      "description": "Check Dual Investment accounts",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/dci/product/accounts",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/dci/product/accounts",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "totalAmountInBTC": "NumberString", //Total BTC amounts in Dual Investment
              "totalAmountInUSDT": "NumberString" //Total USDT equivalents in BTC in Dual Investment
            }
          ],
          "responseExamples": [
            {
              "totalAmountInBTC": "0.01067982", //Total BTC amounts in Dual Investment
              "totalAmountInUSDT": "77.13289230" //Total USDT equivalents in BTC in Dual Investment
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Dual Investment Endpoints",
      "path": "toc.dual-investment-endpoints.check-dual-investment-accounts-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#check-dual-investment-accounts-user_data",
      "name": "Check Dual Investment accounts(USER_DATA)"
    },
    {
      "description": "Change Auto-Compound status",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/dci/product/auto_compound/edit-status",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/dci/product/auto_compound/edit-status",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "positionId": {
          "name": "positionId",
          "type": "string",
          "required": true,
          "description": "Get positionId from /sapi/v1/dci/product/positions"
        },
        "autoCompoundPlan": {
          "name": "autoCompoundPlan",
          "type": "string",
          "required": true,
          "description": "NONE, STANDARD,ADVANCED"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "positionId": {
              "name": "positionId",
              "type": "string",
              "required": true,
              "description": "Get positionId from /sapi/v1/dci/product/positions"
            },
            "autoCompoundPlan": {
              "name": "autoCompoundPlan",
              "type": "string",
              "required": true,
              "description": "NONE, STANDARD,ADVANCED"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "positionId": "NumberString",
              "autoCompoundPlan": "string" //NONE,STANDARD,ADVANCED
            }
          ],
          "responseExamples": [
            {
              "positionId": "123456789",
              "autoCompoundPlan": "ADVANCED" //NONE,STANDARD,ADVANCED
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Dual Investment Endpoints",
      "path": "toc.dual-investment-endpoints.change-auto-compound-status-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#change-auto-compound-status-user_data",
      "name": "Change Auto-Compound status(USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/lending/auto-invest/target-asset/list",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/lending/auto-invest/target-asset/list",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "targetAsset": {
          "name": "targetAsset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default: 8, Max:100"
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Current query page. Default: 1, start from 1"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "no more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "targetAsset": {
              "name": "targetAsset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default: 8, Max:100"
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Current query page. Default: 1, start from 1"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "no more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "targetAssets": [
                "string"
              ],
              "autoInvestAssetList": [
                {
                  "targetAsset": "string",
                  "roiAndDimensionTypeList": [
                    {
                      "simulateRoi": "NumberString",
                      "dimensionValue": "NumberString",
                      "dimensionUnit": "string"
                    },
                    null,
                    null,
                    null,
                    null
                  ]
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "targetAssets": [
                "BTC"
              ],
              "autoInvestAssetList": [
                {
                  "targetAsset": "BTC",
                  "roiAndDimensionTypeList": [
                    {
                      "simulateRoi": "5.004",
                      "dimensionValue": "3",
                      "dimensionUnit": "year"
                    },
                    {
                      "simulateRoi": "2.004",
                      "dimensionValue": "1",
                      "dimensionUnit": "year"
                    },
                    {
                      "simulateRoi": "1.004",
                      "dimensionValue": "6",
                      "dimensionUnit": "month"
                    },
                    {
                      "simulateRoi": "0.904",
                      "dimensionValue": "3",
                      "dimensionUnit": "month"
                    },
                    {
                      "simulateRoi": "0.14",
                      "dimensionValue": "7",
                      "dimensionUnit": "day"
                    }
                  ]
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Auto-Invest Endpoints",
      "path": "toc.auto-invest-endpoints.get-target-asset-list-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-target-asset-list-user_data",
      "name": "Get target asset list(USER_DATA)"
    },
    {
      "description": "ROI return list for target asset",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/lending/auto-invest/target-asset/roi/list",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/lending/auto-invest/target-asset/roi/list",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "targetAsset": {
          "name": "targetAsset",
          "type": "string",
          "required": true,
          "description": "e.g \"BTC\""
        },
        "hisRoiType": {
          "name": "hisRoiType",
          "type": "\"FIVE_YEAR\"|\"THREE_YEAR\"|\"ONE_YEAR\"|\"SIX_MONTH\"|\"THREE_MONTH\"|\"SEVEN_DAY\"",
          "required": true,
          "description": "FIVE_YEAR,THREE_YEAR,ONE_YEAR,SIX_MONTH,THREE_MONTH,SEVEN_DAY"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "no more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "targetAsset": {
              "name": "targetAsset",
              "type": "string",
              "required": true,
              "description": "e.g \"BTC\""
            },
            "hisRoiType": {
              "name": "hisRoiType",
              "type": "\"FIVE_YEAR\"|\"THREE_YEAR\"|\"ONE_YEAR\"|\"SIX_MONTH\"|\"THREE_MONTH\"|\"SEVEN_DAY\"",
              "required": true,
              "description": "FIVE_YEAR,THREE_YEAR,ONE_YEAR,SIX_MONTH,THREE_MONTH,SEVEN_DAY"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "no more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "date": "NumberString", // date of the ROI accumulation
                "simulateRoi": "NumberString" // value of calculated ROI till the date
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "date": "1648378800000", // date of the ROI accumulation
                "simulateRoi": "1.75" // value of calculated ROI till the date
              },
              {
                "date": "1648478800000",
                "simulateRoi": "2.9"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Auto-Invest Endpoints",
      "path": "toc.auto-invest-endpoints.get-target-asset-roi-data-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-target-asset-roi-data-user_data",
      "name": "Get target asset ROI data(USER_DATA)"
    },
    {
      "description": "Query all source assets and target assets",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/lending/auto-invest/all/asset",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/lending/auto-invest/all/asset",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "no more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "no more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "targetAssets": [
                "string"
              ],
              "sourceAssets": [
                "string"
              ]
            }
          ],
          "responseExamples": [
            {
              "targetAssets": [
                "BTC",
                "BNB"
              ],
              "sourceAssets": [
                "USDT",
                "BUSD"
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Auto-Invest Endpoints",
      "path": "toc.auto-invest-endpoints.query-all-source-asset-and-target-asset-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-all-source-asset-and-target-asset-user_data",
      "name": "Query all source asset and target asset(USER_DATA)"
    },
    {
      "description": "Query Source Asset to be used for investment",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/lending/auto-invest/source-asset/list",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/lending/auto-invest/source-asset/list",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "targetAsset": {
          "name": "targetAsset",
          "type": "string[]",
          "required": false,
          "description": "BTC、ETH、BNB"
        },
        "indexId": {
          "name": "indexId",
          "type": "LONG",
          "required": false,
          "description": "指数identifier,   value = 1"
        },
        "usageType": {
          "name": "usageType",
          "type": "\"RECURRING\"|\"ONE_TIME\"",
          "required": true,
          "description": "\"RECURRING\", \"ONE_TIME\""
        },
        "flexibleAllowedToUse": {
          "name": "flexibleAllowedToUse",
          "type": "boolean",
          "required": false,
          "description": ""
        },
        "sourceType": {
          "name": "sourceType",
          "type": "ENUM",
          "required": false,
          "description": "MAIN_SITE for Binance user,TR for Binance Turkey user"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "no more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "targetAsset": {
              "name": "targetAsset",
              "type": "string[]",
              "required": false,
              "description": "BTC、ETH、BNB"
            },
            "indexId": {
              "name": "indexId",
              "type": "LONG",
              "required": false,
              "description": "指数identifier,   value = 1"
            },
            "usageType": {
              "name": "usageType",
              "type": "\"RECURRING\"|\"ONE_TIME\"",
              "required": true,
              "description": "\"RECURRING\", \"ONE_TIME\""
            },
            "flexibleAllowedToUse": {
              "name": "flexibleAllowedToUse",
              "type": "boolean",
              "required": false,
              "description": ""
            },
            "sourceType": {
              "name": "sourceType",
              "type": "ENUM",
              "required": false,
              "description": "MAIN_SITE for Binance user,TR for Binance Turkey user"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "no more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "feeRate": "NumberString",
              "taxRate": "NumberString",
              "sourceAssets": [
                {
                  "sourceAsset": "string",
                  "assetMinAmount": "NumberString",
                  "assetMaxAmount": "NumberString",
                  "scale": "NumberString",
                  "flexibleAmount": "NumberString"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "feeRate": "0.002",
              "taxRate": "0.001",
              "sourceAssets": [
                {
                  "sourceAsset": "USDT",
                  "assetMinAmount": "0.1",
                  "assetMaxAmount": "1000000",
                  "scale": "2",
                  "flexibleAmount": "1111"
                },
                {
                  "sourceAsset": "BUSD",
                  "assetMinAmount": "0.1",
                  "assetMaxAmount": "1000000",
                  "scale": "2",
                  "flexibleAmount": "1111"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Auto-Invest Endpoints",
      "path": "toc.auto-invest-endpoints.query-source-asset-list-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-source-asset-list-user_data",
      "name": "Query source asset list(USER_DATA)"
    },
    {
      "description": "Post an investment plan creation",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/lending/auto-invest/plan/add",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/lending/auto-invest/plan/add",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "sourceType": {
          "name": "sourceType",
          "type": "ENUM",
          "required": true,
          "description": "\"MAIN_SITE\" for Binance,\"TR\" for Binance Turkey"
        },
        "requestId": {
          "name": "requestId",
          "type": "string",
          "required": false,
          "description": "if not null, must follow sourceType + unique string, e.g: TR12354859"
        },
        "planType": {
          "name": "planType",
          "type": "\"SINGLE\"|\"PORTFOLIO\"|\"INDEX\"",
          "required": true,
          "description": "\"SINGLE\",\"PORTFOLIO\",\"INDEX\""
        },
        "indexId": {
          "name": "indexId",
          "type": "LONG",
          "required": false,
          "description": "Only for planType = INDEX ,  value = 1"
        },
        "subscriptionAmount": {
          "name": "subscriptionAmount",
          "type": "DECIMAL",
          "required": true,
          "description": "Fiat&stablecoin: 2dp, BNB/ETH/BTC: 4dp"
        },
        "subscriptionCycle": {
          "name": "subscriptionCycle",
          "type": "\"H1\"|\"H4\"|\"H8\"|\"H12\"|\"WEEKLY\"|\"DAILY\"|\"MONTHLY\"|\"BI_WEEKLY\"",
          "required": true,
          "description": "\"H1\", \"H4\", \"H8\",\"H12\", \"WEEKLY\",\"DAILY\",\"MONTHLY\",\"BI_WEEKLY\""
        },
        "subscriptionStartDay": {
          "name": "subscriptionStartDay",
          "type": "INTEGER",
          "required": false,
          "description": "\"1\",...\"31\"; Mandatory if \"subscriptionCycleNumberUnit\" = \"MONTHLY\", Must be sent in form of UTC+0"
        },
        "subscriptionStartWeekday": {
          "name": "subscriptionStartWeekday",
          "type": "\"MON\"|\"TUE\"|\"WED\"|\"THU\"|\"FRI\"|\"SAT\"|\"SUN\"",
          "required": false,
          "description": "\"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\",\"SUN\"; Mandatory if \"subscriptionCycleNumberUnit\" = \"WEEKLY\" or \"BI_WEEKLY\", Must be sent in form of UTC+0"
        },
        "subscriptionStartTime": {
          "name": "subscriptionStartTime",
          "type": "INTEGER",
          "required": true,
          "description": "\"0,1,2,3,4,5,6,7,8,..23\";Must be sent in form of UTC+0"
        },
        "sourceAsset": {
          "name": "sourceAsset",
          "type": "string",
          "required": true,
          "description": "like \"USDT\""
        },
        "flexibleAllowedToUse": {
          "name": "flexibleAllowedToUse",
          "type": "boolean",
          "required": false,
          "description": "true/false；true: use flexible wallet"
        },
        "details": {
          "name": "details",
          "type": "PortfolioDetail[]",
          "required": true,
          "description": "sum(all node's percentage) == 100，sum(all node's percentage) == 100， When input request parameter, each entry should be like details[0].targetAsset=BTC, Example of the request parameter array:\ndetails[0].targetAsset=BTC details[0].percentage=60 details[1].targetAsset=ETH details[1].percentage=40"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "no more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "sourceType": {
              "name": "sourceType",
              "type": "ENUM",
              "required": true,
              "description": "\"MAIN_SITE\" for Binance,\"TR\" for Binance Turkey"
            },
            "requestId": {
              "name": "requestId",
              "type": "string",
              "required": false,
              "description": "if not null, must follow sourceType + unique string, e.g: TR12354859"
            },
            "planType": {
              "name": "planType",
              "type": "\"SINGLE\"|\"PORTFOLIO\"|\"INDEX\"",
              "required": true,
              "description": "\"SINGLE\",\"PORTFOLIO\",\"INDEX\""
            },
            "indexId": {
              "name": "indexId",
              "type": "LONG",
              "required": false,
              "description": "Only for planType = INDEX ,  value = 1"
            },
            "subscriptionAmount": {
              "name": "subscriptionAmount",
              "type": "DECIMAL",
              "required": true,
              "description": "Fiat&stablecoin: 2dp, BNB/ETH/BTC: 4dp"
            },
            "subscriptionCycle": {
              "name": "subscriptionCycle",
              "type": "\"H1\"|\"H4\"|\"H8\"|\"H12\"|\"WEEKLY\"|\"DAILY\"|\"MONTHLY\"|\"BI_WEEKLY\"",
              "required": true,
              "description": "\"H1\", \"H4\", \"H8\",\"H12\", \"WEEKLY\",\"DAILY\",\"MONTHLY\",\"BI_WEEKLY\""
            },
            "subscriptionStartDay": {
              "name": "subscriptionStartDay",
              "type": "INTEGER",
              "required": false,
              "description": "\"1\",...\"31\"; Mandatory if \"subscriptionCycleNumberUnit\" = \"MONTHLY\", Must be sent in form of UTC+0"
            },
            "subscriptionStartWeekday": {
              "name": "subscriptionStartWeekday",
              "type": "\"MON\"|\"TUE\"|\"WED\"|\"THU\"|\"FRI\"|\"SAT\"|\"SUN\"",
              "required": false,
              "description": "\"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\",\"SUN\"; Mandatory if \"subscriptionCycleNumberUnit\" = \"WEEKLY\" or \"BI_WEEKLY\", Must be sent in form of UTC+0"
            },
            "subscriptionStartTime": {
              "name": "subscriptionStartTime",
              "type": "INTEGER",
              "required": true,
              "description": "\"0,1,2,3,4,5,6,7,8,..23\";Must be sent in form of UTC+0"
            },
            "sourceAsset": {
              "name": "sourceAsset",
              "type": "string",
              "required": true,
              "description": "like \"USDT\""
            },
            "flexibleAllowedToUse": {
              "name": "flexibleAllowedToUse",
              "type": "boolean",
              "required": false,
              "description": "true/false；true: use flexible wallet"
            },
            "details": {
              "name": "details",
              "type": "PortfolioDetail[]",
              "required": true,
              "description": "sum(all node's percentage) == 100，sum(all node's percentage) == 100， When input request parameter, each entry should be like details[0].targetAsset=BTC, Example of the request parameter array:\ndetails[0].targetAsset=BTC details[0].percentage=60 details[1].targetAsset=ETH details[1].percentage=40"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "no more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "planId": "number", //for success creation, planId is associated. PlanId remains constant when plan is being updated
              "nextExecutionDateTime": "number" //plan next excute timestamp
            }
          ],
          "responseExamples": [
            {
              "planId": 12345, //for success creation, planId is associated. PlanId remains constant when plan is being updated
              "nextExecutionDateTime": 1648378800000 //plan next excute timestamp
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Auto-Invest Endpoints",
      "path": "toc.auto-invest-endpoints.investment-plan-creation-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#investment-plan-creation-user_data",
      "name": "Investment plan creation(USER_DATA)"
    },
    {
      "description": "Query Source Asset to be used for investment",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/lending/auto-invest/plan/edit",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/lending/auto-invest/plan/edit",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "planId": {
          "name": "planId",
          "type": "LONG",
          "required": true,
          "description": "Plan identifier"
        },
        "subscriptionAmount": {
          "name": "subscriptionAmount",
          "type": "DECIMAL",
          "required": true,
          "description": "Fiat&Stablecoin: 2dp, BNB/ETH/BTC: 4dp"
        },
        "subscriptionCycle": {
          "name": "subscriptionCycle",
          "type": "\"H1\"|\"H4\"|\"H8\"|\"H12\"|\"WEEKLY\"|\"DAILY\"|\"MONTHLY\"|\"BI_WEEKLY\"",
          "required": true,
          "description": "\"H1\", \"H4\", \"H8\",\"H12\", \"WEEKLY\",\"DAILY\",\"MONTHLY\",\"BI_WEEKLY\""
        },
        "subscriptionStartDay": {
          "name": "subscriptionStartDay",
          "type": "INTEGER",
          "required": false,
          "description": "\"1\",...\"31\";Mandatory if \"subscriptionCycleNumberUnit\" = \"MONTHLY\",Must be sent in form of UTC+0"
        },
        "subscriptionStartWeekday": {
          "name": "subscriptionStartWeekday",
          "type": "\"MON\"|\"TUE\"|\"WED\"|\"THU\"|\"FRI\"|\"SAT\"|\"SUN\"",
          "required": false,
          "description": "\"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\",\"SUN\";Mandatory if \"subscriptionCycleNumberUnit\" = \"WEEKLY\" or \"BI_WEEKLY\", Must be sent in form of UTC+0"
        },
        "subscriptionStartTime": {
          "name": "subscriptionStartTime",
          "type": "INTEGER",
          "required": true,
          "description": "\"0,1, 2,3,4,5,6,7,8,..23\"; Must be sent in form of UTC+0"
        },
        "sourceAsset": {
          "name": "sourceAsset",
          "type": "string",
          "required": true,
          "description": "e.g. \"USDT\""
        },
        "flexibleAllowedToUse": {
          "name": "flexibleAllowedToUse",
          "type": "boolean",
          "required": false,
          "description": "true/false；true:use flexible wallet"
        },
        "details": {
          "name": "details",
          "type": "PortfolioDetail[]",
          "required": true,
          "description": "sum(all node's percentage) == 100，sum(all node's percentage) == 100， When input request parameter, each entry should be like details[0].targetAsset=BTC, Example of the request parameter array:\ndetails[0].targetAsset=BTC details[0].percentage=60 details[1].targetAsset=ETH details[1].percentage=40"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "no more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "planId": {
              "name": "planId",
              "type": "LONG",
              "required": true,
              "description": "Plan identifier"
            },
            "subscriptionAmount": {
              "name": "subscriptionAmount",
              "type": "DECIMAL",
              "required": true,
              "description": "Fiat&Stablecoin: 2dp, BNB/ETH/BTC: 4dp"
            },
            "subscriptionCycle": {
              "name": "subscriptionCycle",
              "type": "\"H1\"|\"H4\"|\"H8\"|\"H12\"|\"WEEKLY\"|\"DAILY\"|\"MONTHLY\"|\"BI_WEEKLY\"",
              "required": true,
              "description": "\"H1\", \"H4\", \"H8\",\"H12\", \"WEEKLY\",\"DAILY\",\"MONTHLY\",\"BI_WEEKLY\""
            },
            "subscriptionStartDay": {
              "name": "subscriptionStartDay",
              "type": "INTEGER",
              "required": false,
              "description": "\"1\",...\"31\";Mandatory if \"subscriptionCycleNumberUnit\" = \"MONTHLY\",Must be sent in form of UTC+0"
            },
            "subscriptionStartWeekday": {
              "name": "subscriptionStartWeekday",
              "type": "\"MON\"|\"TUE\"|\"WED\"|\"THU\"|\"FRI\"|\"SAT\"|\"SUN\"",
              "required": false,
              "description": "\"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\",\"SUN\";Mandatory if \"subscriptionCycleNumberUnit\" = \"WEEKLY\" or \"BI_WEEKLY\", Must be sent in form of UTC+0"
            },
            "subscriptionStartTime": {
              "name": "subscriptionStartTime",
              "type": "INTEGER",
              "required": true,
              "description": "\"0,1, 2,3,4,5,6,7,8,..23\"; Must be sent in form of UTC+0"
            },
            "sourceAsset": {
              "name": "sourceAsset",
              "type": "string",
              "required": true,
              "description": "e.g. \"USDT\""
            },
            "flexibleAllowedToUse": {
              "name": "flexibleAllowedToUse",
              "type": "boolean",
              "required": false,
              "description": "true/false；true:use flexible wallet"
            },
            "details": {
              "name": "details",
              "type": "PortfolioDetail[]",
              "required": true,
              "description": "sum(all node's percentage) == 100，sum(all node's percentage) == 100， When input request parameter, each entry should be like details[0].targetAsset=BTC, Example of the request parameter array:\ndetails[0].targetAsset=BTC details[0].percentage=60 details[1].targetAsset=ETH details[1].percentage=40"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "no more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "planId": "number", //for success creation, planId is associated. PlanId remains constant when plan is being updated
              "nextExecutionDateTime": "number"
            }
          ],
          "responseExamples": [
            {
              "planId": 12345, //for success creation, planId is associated. PlanId remains constant when plan is being updated
              "nextExecutionDateTime": 1648378800000
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Auto-Invest Endpoints",
      "path": "toc.auto-invest-endpoints.investment-plan-adjustment-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#investment-plan-adjustment-trade",
      "name": "Investment plan adjustment (TRADE)"
    },
    {
      "description": "Change Plan Status",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/lending/auto-invest/plan/edit-status",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/lending/auto-invest/plan/edit-status",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "planId": {
          "name": "planId",
          "type": "LONG",
          "required": true,
          "description": "Plan identifier"
        },
        "status": {
          "name": "status",
          "type": "\"ONGOING\"|\"PAUSED\"|\"REMOVED\"",
          "required": true,
          "description": "\"ONGOING\",\"PAUSED\",\"REMOVED\""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "no more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "planId": {
              "name": "planId",
              "type": "LONG",
              "required": true,
              "description": "Plan identifier"
            },
            "status": {
              "name": "status",
              "type": "\"ONGOING\"|\"PAUSED\"|\"REMOVED\"",
              "required": true,
              "description": "\"ONGOING\",\"PAUSED\",\"REMOVED\""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "no more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "planId": "number", //planId is constant regardless the change of the status
              "nextExecutionDateTime": "number",
              "status": "string" //ONGOING, PAUSED, REMOVED
            }
          ],
          "responseExamples": [
            {
              "planId": 12345, //planId is constant regardless the change of the status
              "nextExecutionDateTime": 1648378800000,
              "status": "ONGOING" //ONGOING, PAUSED, REMOVED
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Auto-Invest Endpoints",
      "path": "toc.auto-invest-endpoints.change-plan-status-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#change-plan-status-trade",
      "name": "Change Plan Status (TRADE)"
    },
    {
      "description": "Query plan lists",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/lending/auto-invest/plan/list",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/lending/auto-invest/plan/list",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "planType": {
          "name": "planType",
          "type": "string",
          "required": true,
          "description": "Plan identifier"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "no more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "planType": {
              "name": "planType",
              "type": "string",
              "required": true,
              "description": "Plan identifier"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "no more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "SINGLE/PORTFOLIO",
            "INDEX"
          ],
          "responseTypes": [
            {
              "planValueInUSD": "NumberString",
              "planValueInBTC": "NumberString",
              "pnlInUSD": "NumberString",
              "roi": "NumberString",
              "plans": [
                {
                  "planId": "number",
                  "planType": "string",
                  "editAllowed": "string",
                  "creationDateTime": "number",
                  "firstExecutionDateTime": "number", //first subscription date time
                  "nextExecutionDateTime": "number",
                  "status": "string", // ONGOING,PAUSED
                  "lastUpdatedDateTime": "number",
                  "targetAsset": "string",
                  "totalTargetAmount": "NumberString",
                  "sourceAsset": "string",
                  "totalInvestedInUSD": "NumberString",
                  "subscriptionAmount": "NumberString",
                  "subscriptionCycle": "string",
                  "subscriptionStartDay": "null",
                  "subscriptionStartWeekday": "string",
                  "subscriptionStartTime": "NumberString",
                  "sourceWallet": "string",
                  "flexibleAllowedToUse": "string",
                  "planValueInUSD": "NumberString",
                  "pnlInUSD": "NumberString",
                  "roi": "NumberString"
                }
              ]
            },
            {
              "planValueInUSD": "NumberString",
              "planValueInBTC": "NumberString",
              "plans": [
                {
                  "planId": "number",
                  "planType": "string",
                  "editAllowed": "string",
                  "creationDateTime": "number",
                  "firstExecutionDateTime": "number", //first subscription date time
                  "nextExecutionDateTime": "number",
                  "status": "string",
                  "lastUpdatedDateTime": "number",
                  "targetAsset": "string",
                  "sourceAsset": "string",
                  "totalInvestedInUSD": "NumberString",
                  "subscriptionAmount": "NumberString",
                  "subscriptionCycle": "string",
                  "subscriptionStartDay": "NumberString",
                  "subscriptionStartWeekday": "null",
                  "subscriptionStartTime": "NumberString",
                  "sourceWallet": "string",
                  "flexibleAllowedToUse": "string"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "planValueInUSD": "123",
              "planValueInBTC": "0.1",
              "pnlInUSD": "120",
              "roi": "2.3",
              "plans": [
                {
                  "planId": 12345,
                  "planType": "SINGLE",
                  "editAllowed": "true",
                  "creationDateTime": 1648378800000,
                  "firstExecutionDateTime": 1648378800000, //first subscription date time
                  "nextExecutionDateTime": 1648378800000,
                  "status": "ONGOING", // ONGOING,PAUSED
                  "lastUpdatedDateTime": 1648378800000,
                  "targetAsset": "BTC",
                  "totalTargetAmount": "0.111",
                  "sourceAsset": "BUSD",
                  "totalInvestedInUSD": "4.555",
                  "subscriptionAmount": "0.1",
                  "subscriptionCycle": "WEEKLY",
                  "subscriptionStartDay": null,
                  "subscriptionStartWeekday": "MON",
                  "subscriptionStartTime": "1",
                  "sourceWallet": "SPOT_WALLET",
                  "flexibleAllowedToUse": "false",
                  "planValueInUSD": "101.2",
                  "pnlInUSD": "101.2",
                  "roi": "1.02"
                }
              ]
            },
            {
              "planValueInUSD": "123",
              "planValueInBTC": "0.1",
              "plans": [
                {
                  "planId": 12345,
                  "planType": "INDEX",
                  "editAllowed": "true",
                  "creationDateTime": 1648378800000,
                  "firstExecutionDateTime": 1648378800000, //first subscription date time
                  "nextExecutionDateTime": 1648378800000,
                  "status": "ONGOING",
                  "lastUpdatedDateTime": 1648378800000,
                  "targetAsset": "BTC",
                  "sourceAsset": "BUSD",
                  "totalInvestedInUSD": "4.555",
                  "subscriptionAmount": "0.1",
                  "subscriptionCycle": "DAILY",
                  "subscriptionStartDay": "1",
                  "subscriptionStartWeekday": null,
                  "subscriptionStartTime": "2",
                  "sourceWallet": "SPOT",
                  "flexibleAllowedToUse": "false"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Auto-Invest Endpoints",
      "path": "toc.auto-invest-endpoints.get-list-of-plans-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-list-of-plans-user_data",
      "name": "Get list of plans (USER_DATA)"
    },
    {
      "description": "Query holding details of the plan",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/lending/auto-invest/plan/id",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/lending/auto-invest/plan/id",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "planId": {
          "name": "planId",
          "type": "LONG",
          "required": false,
          "description": "Plan identifier"
        },
        "requestId": {
          "name": "requestId",
          "type": "string",
          "required": false,
          "description": "requestId when create"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "no more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "planId": {
              "name": "planId",
              "type": "LONG",
              "required": false,
              "description": "Plan identifier"
            },
            "requestId": {
              "name": "requestId",
              "type": "string",
              "required": false,
              "description": "requestId when create"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "no more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "planId": "number",
              "planType": "string", // this is the plan type: "SINGLE","PORTFOLIO","INDEX"
              "editAllowed": "string", //whether this plan is allowed to be modified
              "flexibleAllowedToUse": "string",
              "creationDateTime": "number", // date time that this plan is created. YYYY-MM-DD HH:mm:SS e.g 2022-01-07 08:00:00
              "firstExecutionDateTime": "number", //first subscription date time
              "nextExecutionDateTime": "number", //next subscription date time
              "status": "string", //plan status of the selected plan
              "targetAsset": "string",
              "sourceAsset": "string", //source asset of the plan created
              "planValueInUSD": "NumberString", //market value of the plan
              "pnlInUSD": "NumberString", // PNL of the plan in USD
              "roi": "NumberString", //ROI of the plan
              "totalInvestedInUSD": "NumberString", //total source asset invested in equivilent of USD
              "details": [
                {
                  "targetAsset": "string",
                  "averagePriceInUSD": "NumberString", //average price of the asset in USD
                  "totalInvestedInUSD": "NumberString", //total source asset invested for this target asset in equivilent of USD
                  "purchasedAmount": "NumberString", //purchased amount of target asset
                  "purchasedAmountUnit": "string",
                  "pnlInUSD": "NumberString", //PNL denominated in USD
                  "roi": "NumberString", //ROI calculated in decimal
                  "percentage": "NumberString", //asset allocation in the plan. If it's single plan, then it's 100
                  "assetStatus": "string", // ACTIVE / INACTIVE whether this asset is still being subscribed in this plan
                  "availableAmount": "NumberString", // Only for planType = INDEX
                  "availableAmountUnit": "string", // Only for planType = INDEX
                  "redeemedAmout": "NumberString", // Only for planType = INDEX
                  "redeemedAmoutUnit": "string", // Only for planType = INDEX
                  "assetValueInUSD": "NumberString" // Only for planType = INDEX
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "planId": 111212,
              "planType": "INDEX", // this is the plan type: "SINGLE","PORTFOLIO","INDEX"
              "editAllowed": "true", //whether this plan is allowed to be modified
              "flexibleAllowedToUse": "false",
              "creationDateTime": 1648378800000, // date time that this plan is created. YYYY-MM-DD HH:mm:SS e.g 2022-01-07 08:00:00
              "firstExecutionDateTime": 1648378800000, //first subscription date time
              "nextExecutionDateTime": 1648378800000, //next subscription date time
              "status": "ONGOING", //plan status of the selected plan
              "targetAsset": "BTC",
              "sourceAsset": "BUSD", //source asset of the plan created
              "planValueInUSD": "101.2", //market value of the plan
              "pnlInUSD": "101.2", // PNL of the plan in USD
              "roi": "1.023", //ROI of the plan
              "totalInvestedInUSD": "122", //total source asset invested in equivilent of USD
              "details": [
                {
                  "targetAsset": "ADA",
                  "averagePriceInUSD": "3.4", //average price of the asset in USD
                  "totalInvestedInUSD": "222.21", //total source asset invested for this target asset in equivilent of USD
                  "purchasedAmount": "122.12345678", //purchased amount of target asset
                  "purchasedAmountUnit": "ADA",
                  "pnlInUSD": "109.2", //PNL denominated in USD
                  "roi": "0.1", //ROI calculated in decimal
                  "percentage": "50", //asset allocation in the plan. If it's single plan, then it's 100
                  "assetStatus": "ACTIVE", // ACTIVE / INACTIVE whether this asset is still being subscribed in this plan
                  "availableAmount": "122.12345678", // Only for planType = INDEX
                  "availableAmountUnit": "ADA", // Only for planType = INDEX
                  "redeemedAmout": "122.12345678", // Only for planType = INDEX
                  "redeemedAmoutUnit": "ADA", // Only for planType = INDEX
                  "assetValueInUSD": "101.2" // Only for planType = INDEX
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Auto-Invest Endpoints",
      "path": "toc.auto-invest-endpoints.query-holding-details-of-the-plan-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-holding-details-of-the-plan-user_data",
      "name": "Query holding details of the plan (USER_DATA)"
    },
    {
      "description": "Query subscription transaction history of a plan",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/lending/auto-invest/history/list",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/lending/auto-invest/history/list",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "planId": {
          "name": "planId",
          "type": "LONG",
          "required": false,
          "description": "Plan identifier"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "targetAsset": {
          "name": "targetAsset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "planType": {
          "name": "planType",
          "type": "\"SINGLE\"|\"PORTFOLIO\"|\"INDEX\"|\"ALL\"",
          "required": false,
          "description": "SINGLE, PORTFOLIO, INDEX, ALL"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10, Max:100"
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default:1"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "no more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "planId": {
              "name": "planId",
              "type": "LONG",
              "required": false,
              "description": "Plan identifier"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "targetAsset": {
              "name": "targetAsset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "planType": {
              "name": "planType",
              "type": "\"SINGLE\"|\"PORTFOLIO\"|\"INDEX\"|\"ALL\"",
              "required": false,
              "description": "SINGLE, PORTFOLIO, INDEX, ALL"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10, Max:100"
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default:1"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "no more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "id": "number",
                "targetAsset": "string", //name of the asset
                "planType": "string", //plan type of which this transaction is from
                "planName": "string", // plan name of which this transaction is from
                "planId": "number", // plan identifier of which this transaction is from
                "transactionDateTime": "number", //transaction timestamp
                "transactionStatus": "string", //status of the transaction: "SUCCESS","FAILED","PENDING"
                "failedType": "string", // only show when transactionStatus = FAILED,  INSUFFICIENT_BALANCE,TRANSACTION_REJECT/GCC_RJECT
                "sourceAsset": "string", //source asset of the transaction
                "sourceAssetAmount": "NumberString", //amount of source asset used
                "targetAssetAmount": "NumberString", //purchased amount of the asset
                "sourceWallet": "string", // SPOT_WALLET,FLEXIBLE_SAVINGS,SPOT_WALLET_FLEXIBLE_SAVINGS,REWARDS
                "flexibleUsed": "string", //whether simple earn wallet is used
                "transactionFee": "NumberString", //transaction fee amount
                "transactionFeeUnit": "string", //denominated coin of the transaction fee
                "executionPrice": "NumberString", //price of the subscription price. It's amount of source asset equivilent of 1 unit of target asset
                "executionType": "string", //ONE_TIME,RECURRING
                "subscriptionCycle": "string"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "id": 1111,
                "targetAsset": "BTC", //name of the asset
                "planType": "SINGLE", //plan type of which this transaction is from
                "planName": "BTC", // plan name of which this transaction is from
                "planId": 1234, // plan identifier of which this transaction is from
                "transactionDateTime": 1648378800000, //transaction timestamp
                "transactionStatus": "SUCCESS", //status of the transaction: "SUCCESS","FAILED","PENDING"
                "failedType": "INSUFFICIENT_BALANCE", // only show when transactionStatus = FAILED,  INSUFFICIENT_BALANCE,TRANSACTION_REJECT/GCC_RJECT
                "sourceAsset": "BUSD", //source asset of the transaction
                "sourceAssetAmount": "297.12345", //amount of source asset used
                "targetAssetAmount": "0.005", //purchased amount of the asset
                "sourceWallet": "SPOT_WALLET", // SPOT_WALLET,FLEXIBLE_SAVINGS,SPOT_WALLET_FLEXIBLE_SAVINGS,REWARDS
                "flexibleUsed": "false", //whether simple earn wallet is used
                "transactionFee": "0.002", //transaction fee amount
                "transactionFeeUnit": "BUSD", //denominated coin of the transaction fee
                "executionPrice": "2342", //price of the subscription price. It's amount of source asset equivilent of 1 unit of target asset
                "executionType": "RECURRING", //ONE_TIME,RECURRING
                "subscriptionCycle": "WEEKLY"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Auto-Invest Endpoints",
      "path": "toc.auto-invest-endpoints.query-subscription-transaction-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-subscription-transaction-history-user_data",
      "name": "Query subscription transaction history (USER_DATA)"
    },
    {
      "description": "Query index details",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/lending/auto-invest/index/info",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/lending/auto-invest/index/info",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "indexId": {
          "name": "indexId",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "no more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "indexId": {
              "name": "indexId",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "no more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "indexId": "number",
              "indexName": "string",
              "status": "string", // RUNNING/REBALANCING/PAUSED
              "assetAllocation": [
                {
                  "targetAsset": "string", // for pie chart
                  "allocation": "NumberString"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "indexId": 1,
              "indexName": "BINANCE TOP 10 EW ",
              "status": "RUNNING", // RUNNING/REBALANCING/PAUSED
              "assetAllocation": [
                {
                  "targetAsset": "ADA", // for pie chart
                  "allocation": "10"
                },
                {
                  "targetAsset": "BTC",
                  "allocation": "10"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Auto-Invest Endpoints",
      "path": "toc.auto-invest-endpoints.query-index-details-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-index-details-user_data",
      "name": "Query Index Details(USER_DATA)"
    },
    {
      "description": "Details on users Index-Linked plan position details",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/lending/auto-invest/index/user-summary",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/lending/auto-invest/index/user-summary",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "indexId": {
          "name": "indexId",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "no more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "indexId": {
              "name": "indexId",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "no more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "indexId": "number",
              "totalInvestedInUSD": "NumberString",
              "currentInvestedInUSD": "NumberString", //current invest
              "pnlInUSD": "NumberString", // PNL of the plan in USD based on current amount
              "roi": "NumberString", //ROI of the plan based on current amount
              "assetAllocation": [
                {
                  "targetAsset": "string", // for pie chart
                  "allocation": "NumberString"
                },
                null
              ],
              "details": [
                {
                  "targetAsset": "string",
                  "averagePriceInUSD": "NumberString", //average price of the asset in USD
                  "totalInvestedInUSD": "NumberString", //total source asset invested for this target asset in equivilent of USD
                  "currentInvestedInUSD": "NumberString", //current invest
                  "purchasedAmount": "NumberString", //purchased amount of target asset
                  "pnlInUSD": "NumberString", //PNL denominated in USD
                  "roi": "NumberString", //ROI calculated in decimal
                  "percentage": "NumberString", //asset allocation in the plan. If it's single plan, then it's 100
                  "availableAmount": "NumberString",
                  "redeemedAmount": "NumberString",
                  "assetValueInUSD": "NumberString"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "indexId": 1,
              "totalInvestedInUSD": "114.555",
              "currentInvestedInUSD": "101.2", //current invest
              "pnlInUSD": "101.2", // PNL of the plan in USD based on current amount
              "roi": "1.023", //ROI of the plan based on current amount
              "assetAllocation": [
                {
                  "targetAsset": "ADA", // for pie chart
                  "allocation": "10"
                },
                {
                  "targetAsset": "BTC",
                  "allocation": "10"
                }
              ],
              "details": [
                {
                  "targetAsset": "ADA",
                  "averagePriceInUSD": "3.4", //average price of the asset in USD
                  "totalInvestedInUSD": "222.21", //total source asset invested for this target asset in equivilent of USD
                  "currentInvestedInUSD": "101.2", //current invest
                  "purchasedAmount": "122.12345678", //purchased amount of target asset
                  "pnlInUSD": "109.2", //PNL denominated in USD
                  "roi": "0.1", //ROI calculated in decimal
                  "percentage": "10", //asset allocation in the plan. If it's single plan, then it's 100
                  "availableAmount": "122.12345678",
                  "redeemedAmount": "122.12345678",
                  "assetValueInUSD": "101.2"
                },
                {
                  "targetAsset": "MATIC",
                  "averagePriceInUSD": "3.4", //average price of the asset in USD
                  "totalInvestedInUSD": "222.21", //total source asset invested for this target asset in equivilent of USD
                  "currentInvestedInUSD": "101.2", //current invest
                  "purchasedAmount": "122.12345678", //purchased amount of target asset
                  "pnlInUSD": "109.2", //PNL denominated in USD
                  "roi": "0.1", //ROI calculated in decimal
                  "percentage": "10", //asset allocation in the plan. If it's single plan, then it's 100
                  "availableAmount": "122.12345678",
                  "redeemedAmount": "122.12345678",
                  "assetValueInUSD": "101.2"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Auto-Invest Endpoints",
      "path": "toc.auto-invest-endpoints.query-index-linked-plan-position-details-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-index-linked-plan-position-details-user_data",
      "name": "Query Index Linked Plan Position Details(USER_DATA)"
    },
    {
      "description": "One time transaction",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/lending/auto-invest/one-off",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/lending/auto-invest/one-off",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "sourceType": {
          "name": "sourceType",
          "type": "string",
          "required": true,
          "description": "\"MAIN_SITE\" for Binance,\"TR\" for Binance Turkey"
        },
        "requestId": {
          "name": "requestId",
          "type": "string",
          "required": false,
          "description": "if not null, must follow sourceType + unique string, e.g: TR12354859"
        },
        "subscriptionAmount": {
          "name": "subscriptionAmount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "sourceAsset": {
          "name": "sourceAsset",
          "type": "string",
          "required": true,
          "description": "e.g \"USDT\""
        },
        "flexibleAllowedToUse": {
          "name": "flexibleAllowedToUse",
          "type": "boolean",
          "required": false,
          "description": "true/false；true: using flexible wallet"
        },
        "planId": {
          "name": "planId",
          "type": "LONG",
          "required": false,
          "description": "PORTFOLIO plan's Id"
        },
        "indexId": {
          "name": "indexId",
          "type": "LONG",
          "required": false,
          "description": "now only can set = 1"
        },
        "details": {
          "name": "details",
          "type": "PortfolioDetail[]",
          "required": true,
          "description": "sum(all node's percentage) == 100，sum(all node's percentage) == 100， When input request parameter, each entry should be like details[0].targetAsset=BTC, Example of the request parameter array:\ndetails[0].targetAsset=BTC details[0].percentage=60 details[1].targetAsset=ETH details[1].percentage=40"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "no more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "sourceType": {
              "name": "sourceType",
              "type": "string",
              "required": true,
              "description": "\"MAIN_SITE\" for Binance,\"TR\" for Binance Turkey"
            },
            "requestId": {
              "name": "requestId",
              "type": "string",
              "required": false,
              "description": "if not null, must follow sourceType + unique string, e.g: TR12354859"
            },
            "subscriptionAmount": {
              "name": "subscriptionAmount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "sourceAsset": {
              "name": "sourceAsset",
              "type": "string",
              "required": true,
              "description": "e.g \"USDT\""
            },
            "flexibleAllowedToUse": {
              "name": "flexibleAllowedToUse",
              "type": "boolean",
              "required": false,
              "description": "true/false；true: using flexible wallet"
            },
            "planId": {
              "name": "planId",
              "type": "LONG",
              "required": false,
              "description": "PORTFOLIO plan's Id"
            },
            "indexId": {
              "name": "indexId",
              "type": "LONG",
              "required": false,
              "description": "now only can set = 1"
            },
            "details": {
              "name": "details",
              "type": "PortfolioDetail[]",
              "required": true,
              "description": "sum(all node's percentage) == 100，sum(all node's percentage) == 100， When input request parameter, each entry should be like details[0].targetAsset=BTC, Example of the request parameter array:\ndetails[0].targetAsset=BTC details[0].percentage=60 details[1].targetAsset=ETH details[1].percentage=40"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "no more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "transactionId": "number", //transaction identifier
              "waitSecond": "number" // wait this second,then check the result
            }
          ],
          "responseExamples": [
            {
              "transactionId": 12345, //transaction identifier
              "waitSecond": 5 // wait this second,then check the result
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Auto-Invest Endpoints",
      "path": "toc.auto-invest-endpoints.one-time-transaction-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#one-time-transaction-trade",
      "name": "One Time Transaction(TRADE)"
    },
    {
      "description": "Transaction status for one-time transaction",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/lending/auto-invest/one-off/status",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/lending/auto-invest/one-off/status",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "transactionId": {
          "name": "transactionId",
          "type": "LONG",
          "required": true,
          "description": "PORTFOLIO plan's Id"
        },
        "requestId": {
          "name": "requestId",
          "type": "string",
          "required": false,
          "description": "sourceType + unique, transactionId and requestId cannot be empty at the same time"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "no more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "transactionId": {
              "name": "transactionId",
              "type": "LONG",
              "required": true,
              "description": "PORTFOLIO plan's Id"
            },
            "requestId": {
              "name": "requestId",
              "type": "string",
              "required": false,
              "description": "sourceType + unique, transactionId and requestId cannot be empty at the same time"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "no more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "transactionId": "number", //transaction identifier
              "status": "string" //status of transaction"SUCCESS"/"CONVERTING"
            }
          ],
          "responseExamples": [
            {
              "transactionId": 12345, //transaction identifier
              "status": "SUCCESS" //status of transaction"SUCCESS"/"CONVERTING"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Auto-Invest Endpoints",
      "path": "toc.auto-invest-endpoints.query-one-time-transaction-status-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-one-time-transaction-status-user_data",
      "name": "Query One-Time Transaction Status(USER_DATA)"
    },
    {
      "description": "To redeem index-Linked plan holdings",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/lending/auto-invest/redeem",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/lending/auto-invest/redeem",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "indexId": {
          "name": "indexId",
          "type": "LONG",
          "required": true,
          "description": "PORTFOLIO plan's Id"
        },
        "requestId": {
          "name": "requestId",
          "type": "string",
          "required": false,
          "description": "sourceType + unique, transactionId and requestId cannot be empty at the same time"
        },
        "redemptionPercentage": {
          "name": "redemptionPercentage",
          "type": "LONG",
          "required": true,
          "description": "user redeem percentage,10/20/100.."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "no more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "indexId": {
              "name": "indexId",
              "type": "LONG",
              "required": true,
              "description": "PORTFOLIO plan's Id"
            },
            "requestId": {
              "name": "requestId",
              "type": "string",
              "required": false,
              "description": "sourceType + unique, transactionId and requestId cannot be empty at the same time"
            },
            "redemptionPercentage": {
              "name": "redemptionPercentage",
              "type": "LONG",
              "required": true,
              "description": "user redeem percentage,10/20/100.."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "no more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "redemptionId": "number" //This is the identifier for this redemption requests
            }
          ],
          "responseExamples": [
            {
              "redemptionId": 19 //This is the identifier for this redemption requests
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Auto-Invest Endpoints",
      "path": "toc.auto-invest-endpoints.index-linked-plan-redemption-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#index-linked-plan-redemption-trade",
      "name": "Index Linked Plan Redemption(TRADE)"
    },
    {
      "description": "Get the history of Index Linked Plan Redemption transactions",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/lending/auto-invest/redeem/history",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/lending/auto-invest/redeem/history",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "requestId": {
          "name": "requestId",
          "type": "LONG",
          "required": true,
          "description": "request id"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1,Default:1"
        },
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10, Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "no more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "requestId": {
              "name": "requestId",
              "type": "LONG",
              "required": true,
              "description": "request id"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1,Default:1"
            },
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10, Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "no more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "indexId": "number", //index identifier
                "indexName": "string", //index name
                "redemptionId": "number", //redemption record identifier
                "status": "string", //redemption SUCCESS/FAILED
                "asset": "string", //asset invovled
                "amount": "NumberString", //redemption amount
                "redemptionDateTime": "number", //redemption timestamp
                "transactionFee": "NumberString", //redemption fee
                "transactionFeeUnit": "string" //denomination of redemption fee amount
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "indexId": 1, //index identifier
                "indexName": "BINANCE TOP 10 EW", //index name
                "redemptionId": 11, //redemption record identifier
                "status": "SUCCESS", //redemption SUCCESS/FAILED
                "asset": "BTC", //asset invovled
                "amount": "0.005", //redemption amount
                "redemptionDateTime": 1648378800000, //redemption timestamp
                "transactionFee": "0", //redemption fee
                "transactionFeeUnit": "USDT" //denomination of redemption fee amount
              },
              {
                "indexId": 1,
                "indexName": "BINANCE TOP 10 EW",
                "redemptionId": 12,
                "status": "SUCCESS",
                "asset": "BNB",
                "amount": "0.005",
                "redemptionDateTime": 1648378800000,
                "transactionFee": "0",
                "transactionFeeUnit": "USDT"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Auto-Invest Endpoints",
      "path": "toc.auto-invest-endpoints.index-linked-plan-redemption-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#index-linked-plan-redemption-user_data",
      "name": "Index Linked Plan Redemption(USER_DATA)"
    },
    {
      "description": "Get the history of Index Linked Plan Redemption transactions",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/lending/auto-invest/rebalance/history",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/lending/auto-invest/rebalance/history",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1,Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10, Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "no more than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1,Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10, Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "no more than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "indexId": "number", //index identifier
                "indexName": "string", //index name
                "rebalanceId": "number", //rebalance identifier
                "status": "string", //rebalance status  SUCCESS/INIT
                "rebalanceFee": "NumberString", //rebalance fee
                "rebalanceFeeUnit": "string", // rebalance fee unit
                "transactionDetails": [
                  {
                    "asset": "string", //assets to be rebalanced
                    "transactionDateTime": "number", //rebalance transaction timestamp
                    "rebalanceDirection": "string", //rebalance direction
                    "rebalanceAmount": "NumberString" //rebalance amount for the asset
                  },
                  null
                ]
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "indexId": 1, //index identifier
                "indexName": "BINANCE TOP 10 EW", //index name
                "rebalanceId": 11, //rebalance identifier
                "status": "SUCCESS", //rebalance status  SUCCESS/INIT
                "rebalanceFee": "10", //rebalance fee
                "rebalanceFeeUnit": "USDT", // rebalance fee unit
                "transactionDetails": [
                  {
                    "asset": "BTC", //assets to be rebalanced
                    "transactionDateTime": 1648378800000, //rebalance transaction timestamp
                    "rebalanceDirection": "BUY", //rebalance direction
                    "rebalanceAmount": "0.005" //rebalance amount for the asset
                  },
                  {
                    "asset": "ETH",
                    "transactionDateTime": 1648378800000,
                    "rebalanceDirection": "BUY",
                    "rebalanceAmount": "0.005"
                  }
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Auto-Invest Endpoints",
      "path": "toc.auto-invest-endpoints.index-linked-plan-rebalance-details-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#index-linked-plan-rebalance-details-user_data",
      "name": "Index Linked Plan Rebalance Details(USER_DATA)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /sapi/v1/eth-staking/eth/stake",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/eth-staking/eth/stake",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": "Amount in ETH, limit 4 decimals"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": "Amount in ETH, limit 4 decimals"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Staking Endpoints",
      "path": "toc.staking-endpoints.subscribe-eth-staking-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#subscribe-eth-staking-trade",
      "name": "Subscribe ETH Staking(TRADE)"
    },
    {
      "description": "Stake ETH to get WBETH",
      "securityType": "TRADE",
      "request": "POST /sapi/v2/eth-staking/eth/stake",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v2/eth-staking/eth/stake",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": "Amount in ETH, limit 4 decimals"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": "Amount in ETH, limit 4 decimals"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "success": "boolean",
              "wbethAmount": "NumberString",
              "conversionRatio": "NumberString" // ETH amount per 1 WBETH
            }
          ],
          "responseExamples": [
            {
              "success": true,
              "wbethAmount": "0.23092091",
              "conversionRatio": "1.001212342342" // ETH amount per 1 WBETH
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Staking Endpoints",
      "path": "toc.staking-endpoints.subscribe-eth-staking-v2-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#subscribe-eth-staking-v2-trade",
      "name": "Subscribe ETH Staking V2(TRADE)"
    },
    {
      "description": "Redeem WBETH or BETH and get ETH",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/eth-staking/eth/redeem",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/eth-staking/eth/redeem",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": "WBETH or BETH, default to BETH"
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": "Amount in BETH, limit 8 decimals"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": "WBETH or BETH, default to BETH"
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": "Amount in BETH, limit 8 decimals"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "success": "boolean",
              "arrivalTime": "number",
              "ethAmount": "NumberString",
              "conversionRatio": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "success": true,
              "arrivalTime": 1575018510000,
              "ethAmount": "0.23092091",
              "conversionRatio": "1.00121234"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Staking Endpoints",
      "path": "toc.staking-endpoints.redeem-eth-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#redeem-eth-trade",
      "name": "Redeem ETH (TRADE)"
    },
    {
      "description": "150",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/eth-staking/eth/history/stakingHistory",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/eth-staking/eth/history/stakingHistory",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default: 1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default: 10, Max: 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default: 1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default: 10, Max: 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "time": "number",
                  "asset": "string",
                  "amount": "NumberString",
                  "status": "string", //PENDING,SUCCESS,FAILED
                  "distributeAmount": "NumberString",
                  "conversionRatio": "NumberString"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "time": 1575018510000,
                  "asset": "ETH",
                  "amount": "21312.23223",
                  "status": "SUCCESS", //PENDING,SUCCESS,FAILED
                  "distributeAmount": "21286.42584",
                  "conversionRatio": "1.00121234"
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Staking Endpoints",
      "path": "toc.staking-endpoints.get-eth-staking-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-eth-staking-history-user_data",
      "name": "Get ETH staking history (USER_DATA)"
    },
    {
      "description": "150",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/eth-staking/eth/history/redemptionHistory",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/eth-staking/eth/history/redemptionHistory",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default: 1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default: 10, Max: 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default: 1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default: 10, Max: 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "time": "number",
                  "arrivalTime": "number",
                  "amount": "NumberString",
                  "status": "string",
                  "asset": "string",
                  "distributeAsset": "string", //PENDING,SUCCESS,FAILED
                  "distributeAmount": "NumberString",
                  "conversionRatio": "NumberString"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "time": 1575018510000,
                  "arrivalTime": 1575018510000,
                  "amount": "21312.23223",
                  "status": "SUCCESS",
                  "asset": "WBETH",
                  "distributeAsset": "ETH", //PENDING,SUCCESS,FAILED
                  "distributeAmount": "21338.0699",
                  "conversionRatio": "1.00121234"
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Staking Endpoints",
      "path": "toc.staking-endpoints.get-eth-redemption-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-eth-redemption-history-user_data",
      "name": "Get ETH redemption history (USER_DATA)"
    },
    {
      "description": "150",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/eth-staking/eth/history/rewardsHistory",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/eth-staking/eth/history/rewardsHistory",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default: 1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default: 10, Max: 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default: 1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default: 10, Max: 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "time": "number",
                  "asset": "string",
                  "holding": "NumberString", // BETH holding balance
                  "amount": "NumberString", // Distributed rewards
                  "annualPercentageRate": "NumberString", // 0.5 means 50% here
                  "status": "string"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "time": 1575018510000,
                  "asset": "BETH",
                  "holding": "2.3223", // BETH holding balance
                  "amount": "0.23223", // Distributed rewards
                  "annualPercentageRate": "0.5", // 0.5 means 50% here
                  "status": "SUCCESS"
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Staking Endpoints",
      "path": "toc.staking-endpoints.get-beth-rewards-distribution-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-beth-rewards-distribution-history-user_data",
      "name": "Get BETH rewards distribution history(USER_DATA)"
    },
    {
      "description": "150",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/eth-staking/eth/quota",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/eth-staking/eth/quota",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "leftStakingPersonalQuota": "NumberString", // Show min(Daily available limit, total personal staking quota)
              "leftRedemptionPersonalQuota": "NumberString" // Show min(Daily personal redeem quota, total redemption limit)
            }
          ],
          "responseExamples": [
            {
              "leftStakingPersonalQuota": "1000", // Show min(Daily available limit, total personal staking quota)
              "leftRedemptionPersonalQuota": "1000" // Show min(Daily personal redeem quota, total redemption limit)
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Staking Endpoints",
      "path": "toc.staking-endpoints.get-current-eth-staking-quota-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-current-eth-staking-quota-user_data",
      "name": "Get current ETH staking quota (USER_DATA)"
    },
    {
      "description": "150",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/eth-staking/eth/history/rateHistory",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/eth-staking/eth/history/rateHistory",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10, Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10, Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "annualPercentageRate": "NumberString", // BETH APR
                  "exchangeRate": "NumberString", // BETH value per 1 WBETH
                  "time": "number"
                }
              ],
              "total": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "annualPercentageRate": "0.00006408", // BETH APR
                  "exchangeRate": "1.00121234", // BETH value per 1 WBETH
                  "time": 1577233578000
                }
              ],
              "total": "1"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Staking Endpoints",
      "path": "toc.staking-endpoints.get-wbeth-rate-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-wbeth-rate-history-user_data",
      "name": "Get WBETH Rate History (USER_DATA)"
    },
    {
      "description": "150",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/eth-staking/account",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/eth-staking/account",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "cumulativeProfitInBETH": "NumberString",
              "lastDayProfitInBETH": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "cumulativeProfitInBETH": "0.01067982",
              "lastDayProfitInBETH": "0.01067982"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Staking Endpoints",
      "path": "toc.staking-endpoints.eth-staking-account-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#eth-staking-account-user_data",
      "name": "ETH Staking account (USER_DATA)"
    },
    {
      "description": "150",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v2/eth-staking/account",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v2/eth-staking/account",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "holdingInETH": "NumberString",
              "holdings": {
                "wbethAmount": "NumberString",
                "bethAmount": "NumberString"
              },
              "thirtyDaysProfitInETH": "NumberString",
              "profit": {
                "amountFromWBETH": "NumberString", //Profit accrued within WBETH
                "amountFromBETH": "NumberString" //BETH distributed to your Spot Wallet
              }
            }
          ],
          "responseExamples": [
            {
              "holdingInETH": "1.22330928",
              "holdings": {
                "wbethAmount": "1.10928781",
                "bethAmount": "1.90002112"
              },
              "thirtyDaysProfitInETH": "0.22330928",
              "profit": {
                "amountFromWBETH": "0.12330928", //Profit accrued within WBETH
                "amountFromBETH": "0.1" //BETH distributed to your Spot Wallet
              }
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Staking Endpoints",
      "path": "toc.staking-endpoints.eth-staking-account-v2-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#eth-staking-account-v2-user_data",
      "name": "ETH Staking account V2(USER_DATA)"
    },
    {
      "description": "150",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/eth-staking/wbeth/wrap",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/eth-staking/wbeth/wrap",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": "Amount in BETH, limit 4 decimals"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": "Amount in BETH, limit 4 decimals"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "success": "boolean",
              "wbethAmount": "NumberString",
              "exchangeRate": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "success": true,
              "wbethAmount": "0.23092091",
              "exchangeRate": "1.001212343432"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Staking Endpoints",
      "path": "toc.staking-endpoints.wrap-beth-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#wrap-beth-trade",
      "name": "Wrap BETH(TRADE)"
    },
    {
      "description": "150",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/eth-staking/wbeth/history/wrapHistory",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/eth-staking/wbeth/history/wrapHistory",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10, Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10, Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "time": "number",
                  "fromAsset": "string",
                  "fromAmount": "NumberString",
                  "toAsset": "string",
                  "toAmount": "NumberString",
                  "exchangeRate": "NumberString", // BETH amount per 1 WBETH
                  "status": "string" //PENDING,SUCCESS,FAILED
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "time": 1575018510000,
                  "fromAsset": "BETH",
                  "fromAmount": "21312.23223",
                  "toAsset": "WBETH",
                  "toAmount": "21312.23223",
                  "exchangeRate": "1.01243253", // BETH amount per 1 WBETH
                  "status": "SUCCESS" //PENDING,SUCCESS,FAILED
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Staking Endpoints",
      "path": "toc.staking-endpoints.get-wbeth-wrap-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-wbeth-wrap-history-user_data",
      "name": "Get WBETH wrap history (USER_DATA)"
    },
    {
      "description": "150",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/eth-staking/wbeth/history/unwrapHistory",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/eth-staking/wbeth/history/unwrapHistory",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10, Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10, Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "time": "number",
                  "fromAsset": "string",
                  "fromAmount": "NumberString",
                  "toAsset": "string",
                  "toAmount": "NumberString",
                  "exchangeRate": "NumberString", // BETH value per 1 WBETH
                  "status": "string" //PENDING,SUCCESS,FAILED
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "time": 1575018510000,
                  "fromAsset": "WBETH",
                  "fromAmount": "21312.23223",
                  "toAsset": "BETH",
                  "toAmount": "21312.23223",
                  "exchangeRate": "1.01243253", // BETH value per 1 WBETH
                  "status": "SUCCESS" //PENDING,SUCCESS,FAILED
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Staking Endpoints",
      "path": "toc.staking-endpoints.get-wbeth-unwrap-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-wbeth-unwrap-history-user_data",
      "name": "Get WBETH unwrap history (USER_DATA)"
    },
    {
      "description": "150",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/eth-staking/eth/history/wbethRewardsHistory",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/eth-staking/eth/history/wbethRewardsHistory",
      "hmacSHA256": false,
      "weights": {
        "IP": 150,
        "IP_text": "150"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10, Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10, Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "estRewardsInETH": "NumberString",
              "rows": [
                {
                  "time": "number",
                  "amountInETH": "NumberString", // Estimated rewards accrued within WBETH
                  "holding": "NumberString", // WBETH holding balance
                  "holdingInETH": "NumberString",
                  "annualPercentageRate": "NumberString"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "estRewardsInETH": "1.23230920",
              "rows": [
                {
                  "time": 1575018510000,
                  "amountInETH": "0.23223", // Estimated rewards accrued within WBETH
                  "holding": "2.3223", // WBETH holding balance
                  "holdingInETH": "2.4231",
                  "annualPercentageRate": "0.5"
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Staking Endpoints",
      "path": "toc.staking-endpoints.get-wbeth-rewards-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-wbeth-rewards-history-user_data",
      "name": "Get WBETH rewards history(USER_DATA)"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /sapi/v1/mining/pub/algoList",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/mining/pub/algoList",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string",
              "data": [
                {
                  "algoName": "string", //  Algorithm name
                  "algoId": "number", // Algorithm ID
                  "poolIndex": "number", // Sequence
                  "unit": "string" //   Unit
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "code": 0,
              "msg": "",
              "data": [
                {
                  "algoName": "sha256", //  Algorithm name
                  "algoId": 1, // Algorithm ID
                  "poolIndex": 0, // Sequence
                  "unit": "h/s" //   Unit
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Mining Endpoints",
      "path": "toc.mining-endpoints.acquiring-algorithm-market_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#acquiring-algorithm-market_data",
      "name": "Acquiring Algorithm (MARKET_DATA)"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /sapi/v1/mining/pub/coinList",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/mining/pub/coinList",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string",
              "data": [
                {
                  "coinName": "string", //  Currencyname
                  "coinId": "number", // id
                  "poolIndex": "number", // Sort
                  "algoId": "number", // Algorithm
                  "algoName": "string" //Name of algorithm
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "code": 0,
              "msg": "",
              "data": [
                {
                  "coinName": "BTC", //  Currencyname
                  "coinId": 1, // id
                  "poolIndex": 0, // Sort
                  "algoId": 1, // Algorithm
                  "algoName": "sha256" //Name of algorithm
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Mining Endpoints",
      "path": "toc.mining-endpoints.acquiring-coinname-market_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#acquiring-coinname-market_data",
      "name": "Acquiring CoinName (MARKET_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/mining/worker/detail",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/mining/worker/detail",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "algo": {
          "name": "algo",
          "type": "string",
          "required": true,
          "description": "Algorithm(sha256)"
        },
        "userName": {
          "name": "userName",
          "type": "string",
          "required": true,
          "description": "Mining account"
        },
        "workerName": {
          "name": "workerName",
          "type": "string",
          "required": true,
          "description": "Miner’s name(required)"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "algo": {
              "name": "algo",
              "type": "string",
              "required": true,
              "description": "Algorithm(sha256)"
            },
            "userName": {
              "name": "userName",
              "type": "string",
              "required": true,
              "description": "Mining account"
            },
            "workerName": {
              "name": "workerName",
              "type": "string",
              "required": true,
              "description": "Miner’s name(required)"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string",
              "data": [
                {
                  "workerName": "string", //Mining Account name
                  "type": "string", // Type of hourly hashrate
                  "hashrateDatas": [
                    {
                      "time": "number", //  Time
                      "hashrate": "NumberString", // Hashrate
                      "reject": "number" //Rejection Rate
                    },
                    null
                  ]
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "code": 0,
              "msg": "",
              "data": [
                {
                  "workerName": "bhdc1.16A10404B", //Mining Account name
                  "type": "H_hashrate", // Type of hourly hashrate
                  "hashrateDatas": [
                    {
                      "time": 1587902400000, //  Time
                      "hashrate": "0", // Hashrate
                      "reject": 0 //Rejection Rate
                    },
                    {
                      "time": 1587906000000,
                      "hashrate": "0",
                      "reject": 0
                    }
                  ]
                },
                {
                  "workerName": "bhdc1.16A10404B", //Mining Account name
                  "type": "D_hashrate", //Type of daily hashrate
                  "hashrateDatas": [
                    {
                      "time": 1587902400000, //  Time
                      "hashrate": "0", // Hashrate
                      "reject": 0 //Rejection Rate
                    },
                    {
                      "time": 1587906000000,
                      "hashrate": "0",
                      "reject": 0
                    }
                  ]
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Mining Endpoints",
      "path": "toc.mining-endpoints.request-for-detail-miner-list-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#request-for-detail-miner-list-user_data",
      "name": "Request for Detail Miner List (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/mining/worker/list",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/mining/worker/list",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "algo": {
          "name": "algo",
          "type": "string",
          "required": true,
          "description": "Algorithm(sha256)"
        },
        "userName": {
          "name": "userName",
          "type": "string",
          "required": true,
          "description": "Mining account"
        },
        "pageIndex": {
          "name": "pageIndex",
          "type": "INTEGER",
          "required": false,
          "description": "Page number，default is first page，start from 1"
        },
        "sort": {
          "name": "sort",
          "type": "INTEGER",
          "required": false,
          "description": "sort sequence(default=0)0 positive sequence，1 negative sequence"
        },
        "sortColumn": {
          "name": "sortColumn",
          "type": "INTEGER",
          "required": false,
          "description": "Sort by( default 1): 1: miner name, 2: real-time computing power, 3: daily average computing power, 4: real-time rejection rate, 5: last submission time"
        },
        "workerStatus": {
          "name": "workerStatus",
          "type": "INTEGER",
          "required": false,
          "description": "miners status(default=0), 0 all, 1 valid，2 invalid, 3 failure"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "algo": {
              "name": "algo",
              "type": "string",
              "required": true,
              "description": "Algorithm(sha256)"
            },
            "userName": {
              "name": "userName",
              "type": "string",
              "required": true,
              "description": "Mining account"
            },
            "pageIndex": {
              "name": "pageIndex",
              "type": "INTEGER",
              "required": false,
              "description": "Page number，default is first page，start from 1"
            },
            "sort": {
              "name": "sort",
              "type": "INTEGER",
              "required": false,
              "description": "sort sequence(default=0)0 positive sequence，1 negative sequence"
            },
            "sortColumn": {
              "name": "sortColumn",
              "type": "INTEGER",
              "required": false,
              "description": "Sort by( default 1): 1: miner name, 2: real-time computing power, 3: daily average computing power, 4: real-time rejection rate, 5: last submission time"
            },
            "workerStatus": {
              "name": "workerStatus",
              "type": "INTEGER",
              "required": false,
              "description": "miners status(default=0), 0 all, 1 valid，2 invalid, 3 failure"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string",
              "data": {
                "workerDatas": [
                  {
                    "workerId": "NumberString", //Miner ID
                    "workerName": "string", //Miner's name
                    "status": "number", // Status:1 valid, 2 invalid, 3 no longer valid
                    "hashRate": "number", // Real-time rate
                    "dayHashRate": "number", //24H Hashrate
                    "rejectRate": "number", //Real-time Rejection Rate
                    "lastShareTime": "number" // Last submission time
                  },
                  null
                ],
                "totalNum": "number", // Total amount
                "pageSize": "number" // Rows per page
              }
            }
          ],
          "responseExamples": [
            {
              "code": 0,
              "msg": "",
              "data": {
                "workerDatas": [
                  {
                    "workerId": "1420554439452400131", //Miner ID
                    "workerName": "2X73", //Miner's name
                    "status": 3, // Status:1 valid, 2 invalid, 3 no longer valid
                    "hashRate": 0, // Real-time rate
                    "dayHashRate": 0, //24H Hashrate
                    "rejectRate": 0, //Real-time Rejection Rate
                    "lastShareTime": 1587712919000 // Last submission time
                  },
                  {
                    "workerId": "7893926126382807951",
                    "workerName": "AZDC1.1A10101",
                    "status": 2,
                    "hashRate": 29711247541680,
                    "dayHashRate": 12697781298013.66,
                    "rejectRate": 0,
                    "lastShareTime": 1587969727000
                  }
                ],
                "totalNum": 18530, // Total amount
                "pageSize": 20 // Rows per page
              }
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Mining Endpoints",
      "path": "toc.mining-endpoints.request-for-miner-list-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#request-for-miner-list-user_data",
      "name": "Request for Miner List (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/mining/payment/list",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/mining/payment/list",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "algo": {
          "name": "algo",
          "type": "string",
          "required": true,
          "description": "Transfer algorithm(sha256)"
        },
        "userName": {
          "name": "userName",
          "type": "string",
          "required": true,
          "description": "Mining account"
        },
        "coin": {
          "name": "coin",
          "type": "string",
          "required": false,
          "description": "Coin name"
        },
        "startDate": {
          "name": "startDate",
          "type": "LONG",
          "required": false,
          "description": "Search date, millisecond timestamp, while empty query all"
        },
        "endDate": {
          "name": "endDate",
          "type": "LONG",
          "required": false,
          "description": "Search date, millisecond timestamp, while empty query all"
        },
        "pageIndex": {
          "name": "pageIndex",
          "type": "INTEGER",
          "required": false,
          "description": "Page number, empty default first page, starting from 1"
        },
        "pageSize": {
          "name": "pageSize",
          "type": "INTEGER",
          "required": false,
          "description": "Number of pages, minimum 10, maximum 200"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "algo": {
              "name": "algo",
              "type": "string",
              "required": true,
              "description": "Transfer algorithm(sha256)"
            },
            "userName": {
              "name": "userName",
              "type": "string",
              "required": true,
              "description": "Mining account"
            },
            "coin": {
              "name": "coin",
              "type": "string",
              "required": false,
              "description": "Coin name"
            },
            "startDate": {
              "name": "startDate",
              "type": "LONG",
              "required": false,
              "description": "Search date, millisecond timestamp, while empty query all"
            },
            "endDate": {
              "name": "endDate",
              "type": "LONG",
              "required": false,
              "description": "Search date, millisecond timestamp, while empty query all"
            },
            "pageIndex": {
              "name": "pageIndex",
              "type": "INTEGER",
              "required": false,
              "description": "Page number, empty default first page, starting from 1"
            },
            "pageSize": {
              "name": "pageSize",
              "type": "INTEGER",
              "required": false,
              "description": "Number of pages, minimum 10, maximum 200"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string",
              "data": {
                "accountProfits": [
                  {
                    "time": "number", // Mining date
                    "type": "number", // 0:Mining Wallet,5:Mining Address,7:Pool Savings,8:Transferred,31:Income Transfer ,32:Hashrate Resale-Mining Wallet 33:Hashrate Resale-Pool Savings
                    "hashTransfer": "null", // Transferred Hashrate
                    "transferAmount": "null", // Transferred Income
                    "dayHashRate": "number", // Daily Hashrate
                    "profitAmount": "number", //Earnings Amount
                    "coinName": "string", // Coin Type
                    "status": "number" //Status:0:Unpaid, 1:Paying  2:Paid
                  },
                  {
                    "time": "number",
                    "coinName": "string",
                    "type": "number",
                    "dayHashRate": "number",
                    "profitAmount": "number",
                    "hashTransfer": "number",
                    "transferAmount": "number",
                    "status": "number"
                  },
                  null
                ],
                "totalNum": "number", // Total Rows
                "pageSize": "number" // Rows per page
              }
            }
          ],
          "responseExamples": [
            {
              "code": 0,
              "msg": "",
              "data": {
                "accountProfits": [
                  {
                    "time": 1586188800000, // Mining date
                    "type": 31, // 0:Mining Wallet,5:Mining Address,7:Pool Savings,8:Transferred,31:Income Transfer ,32:Hashrate Resale-Mining Wallet 33:Hashrate Resale-Pool Savings
                    "hashTransfer": null, // Transferred Hashrate
                    "transferAmount": null, // Transferred Income
                    "dayHashRate": 129129903378244, // Daily Hashrate
                    "profitAmount": 8.6083060304, //Earnings Amount
                    "coinName": "BTC", // Coin Type
                    "status": 2 //Status:0:Unpaid, 1:Paying  2:Paid
                  },
                  {
                    "time": 1607529600000,
                    "coinName": "BTC",
                    "type": 0,
                    "dayHashRate": 9942053925926,
                    "profitAmount": 0.85426469,
                    "hashTransfer": 200000000000,
                    "transferAmount": 0.02180958,
                    "status": 2
                  },
                  {
                    "time": 1607443200000,
                    "coinName": "BTC",
                    "type": 31,
                    "dayHashRate": 200000000000,
                    "profitAmount": 0.02905916,
                    "hashTransfer": null,
                    "transferAmount": null,
                    "status": 2
                  }
                ],
                "totalNum": 3, // Total Rows
                "pageSize": 20 // Rows per page
              }
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Mining Endpoints",
      "path": "toc.mining-endpoints.earnings-list-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#earnings-list-user_data",
      "name": "Earnings List(USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/mining/payment/other",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/mining/payment/other",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "algo": {
          "name": "algo",
          "type": "string",
          "required": true,
          "description": "Transfer algorithm(sha256)"
        },
        "userName": {
          "name": "userName",
          "type": "string",
          "required": true,
          "description": "Mining Account"
        },
        "coin": {
          "name": "coin",
          "type": "string",
          "required": false,
          "description": "Coin Name"
        },
        "startDate": {
          "name": "startDate",
          "type": "LONG",
          "required": false,
          "description": "Search date, millisecond timestamp, while empty query all"
        },
        "endDate": {
          "name": "endDate",
          "type": "LONG",
          "required": false,
          "description": "Search date, millisecond timestamp, while empty query all"
        },
        "pageIndex": {
          "name": "pageIndex",
          "type": "INTEGER",
          "required": false,
          "description": "Page number, empty default first page, starting from 1"
        },
        "pageSize": {
          "name": "pageSize",
          "type": "INTEGER",
          "required": false,
          "description": "Number of pages, minimum 10, maximum 200"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "algo": {
              "name": "algo",
              "type": "string",
              "required": true,
              "description": "Transfer algorithm(sha256)"
            },
            "userName": {
              "name": "userName",
              "type": "string",
              "required": true,
              "description": "Mining Account"
            },
            "coin": {
              "name": "coin",
              "type": "string",
              "required": false,
              "description": "Coin Name"
            },
            "startDate": {
              "name": "startDate",
              "type": "LONG",
              "required": false,
              "description": "Search date, millisecond timestamp, while empty query all"
            },
            "endDate": {
              "name": "endDate",
              "type": "LONG",
              "required": false,
              "description": "Search date, millisecond timestamp, while empty query all"
            },
            "pageIndex": {
              "name": "pageIndex",
              "type": "INTEGER",
              "required": false,
              "description": "Page number, empty default first page, starting from 1"
            },
            "pageSize": {
              "name": "pageSize",
              "type": "INTEGER",
              "required": false,
              "description": "Number of pages, minimum 10, maximum 200"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string",
              "data": {
                "otherProfits": [
                  {
                    "time": "number", // Mining date
                    "coinName": "string", // Coin Name
                    "type": "number", // 1: Merged Mining, 2: Activity Bonus, 3:Rebate 4:Smart Pool 6:Income Transfer 7:Pool Savings
                    "profitAmount": "number", //Amount
                    "status": "number" //Status:0:Unpaid, 1:Paying  2:Paid
                  }
                ],
                "totalNum": "number", // Total Rows
                "pageSize": "number" // Rows per page
              }
            }
          ],
          "responseExamples": [
            {
              "code": 0,
              "msg": "",
              "data": {
                "otherProfits": [
                  {
                    "time": 1607443200000, // Mining date
                    "coinName": "BTC", // Coin Name
                    "type": 4, // 1: Merged Mining, 2: Activity Bonus, 3:Rebate 4:Smart Pool 6:Income Transfer 7:Pool Savings
                    "profitAmount": 0.0011859, //Amount
                    "status": 2 //Status:0:Unpaid, 1:Paying  2:Paid
                  }
                ],
                "totalNum": 3, // Total Rows
                "pageSize": 20 // Rows per page
              }
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Mining Endpoints",
      "path": "toc.mining-endpoints.extra-bonus-list-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#extra-bonus-list-user_data",
      "name": "Extra Bonus List (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/mining/hash-transfer/config/details/list",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/mining/hash-transfer/config/details/list",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "pageIndex": {
          "name": "pageIndex",
          "type": "INTEGER",
          "required": false,
          "description": "Page number, empty default first page, starting from 1"
        },
        "pageSize": {
          "name": "pageSize",
          "type": "INTEGER",
          "required": false,
          "description": "Number of pages, minimum 10, maximum 200"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "pageIndex": {
              "name": "pageIndex",
              "type": "INTEGER",
              "required": false,
              "description": "Page number, empty default first page, starting from 1"
            },
            "pageSize": {
              "name": "pageSize",
              "type": "INTEGER",
              "required": false,
              "description": "Number of pages, minimum 10, maximum 200"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string",
              "data": {
                "configDetails": [
                  {
                    "configId": "number", // Mining ID
                    "poolUsername": "NumberString", //Transfer out of subaccount
                    "toPoolUsername": "string", //  Transfer into subaccount
                    "algoName": "string", // Transfer algorithm
                    "hashRate": "number", //  Transferred Hashrate quantity
                    "startDay": "number", // Start date
                    "endDay": "number", //End date
                    "status": "number" //Status:0 Processing,1:Cancelled,2:Terminated
                  },
                  {
                    "configId": "number",
                    "poolUsername": "string",
                    "toPoolUsername": "NumberString",
                    "algoName": "string",
                    "hashRate": "number",
                    "startDay": "number",
                    "endDay": "number",
                    "status": "number"
                  }
                ],
                "totalNum": "number",
                "pageSize": "number"
              }
            }
          ],
          "responseExamples": [
            {
              "code": 0,
              "msg": "",
              "data": {
                "configDetails": [
                  {
                    "configId": 168, // Mining ID
                    "poolUsername": "123", //Transfer out of subaccount
                    "toPoolUsername": "user1", //  Transfer into subaccount
                    "algoName": "Ethash", // Transfer algorithm
                    "hashRate": 5000000, //  Transferred Hashrate quantity
                    "startDay": 20201210, // Start date
                    "endDay": 20210405, //End date
                    "status": 1 //Status:0 Processing,1:Cancelled,2:Terminated
                  },
                  {
                    "configId": 166,
                    "poolUsername": "pop",
                    "toPoolUsername": "111111",
                    "algoName": "Ethash",
                    "hashRate": 3320000,
                    "startDay": 20201226,
                    "endDay": 20201227,
                    "status": 0
                  }
                ],
                "totalNum": 21,
                "pageSize": 200
              }
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Mining Endpoints",
      "path": "toc.mining-endpoints.hashrate-resale-list-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#hashrate-resale-list-user_data",
      "name": "Hashrate Resale List (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/mining/hash-transfer/profit/details",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/mining/hash-transfer/profit/details",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "configId": {
          "name": "configId",
          "type": "INTEGER",
          "required": true,
          "description": "Mining ID"
        },
        "userName": {
          "name": "userName",
          "type": "string",
          "required": true,
          "description": "Mining Account"
        },
        "pageIndex": {
          "name": "pageIndex",
          "type": "INTEGER",
          "required": false,
          "description": "Page number, empty default first page, starting from 1"
        },
        "pageSize": {
          "name": "pageSize",
          "type": "INTEGER",
          "required": false,
          "description": "Number of pages, minimum 10, maximum 200"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "configId": {
              "name": "configId",
              "type": "INTEGER",
              "required": true,
              "description": "Mining ID"
            },
            "userName": {
              "name": "userName",
              "type": "string",
              "required": true,
              "description": "Mining Account"
            },
            "pageIndex": {
              "name": "pageIndex",
              "type": "INTEGER",
              "required": false,
              "description": "Page number, empty default first page, starting from 1"
            },
            "pageSize": {
              "name": "pageSize",
              "type": "INTEGER",
              "required": false,
              "description": "Number of pages, minimum 10, maximum 200"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string",
              "data": {
                "profitTransferDetails": [
                  {
                    "poolUsername": "string", // Transfer out of sub-account
                    "toPoolUsername": "string", // Transfer into subaccount
                    "algoName": "string", // Transfer algorithm
                    "hashRate": "number", // Transferred Hashrate quantity
                    "day": "number", // Transfer date
                    "amount": "number", // Transferred income
                    "coinName": "string" // Coin Name
                  },
                  null
                ],
                "totalNum": "number",
                "pageSize": "number"
              }
            }
          ],
          "responseExamples": [
            {
              "code": 0,
              "msg": "",
              "data": {
                "profitTransferDetails": [
                  {
                    "poolUsername": "test4001", // Transfer out of sub-account
                    "toPoolUsername": "pop", // Transfer into subaccount
                    "algoName": "sha256", // Transfer algorithm
                    "hashRate": 200000000000, // Transferred Hashrate quantity
                    "day": 20201213, // Transfer date
                    "amount": 0.2256872, // Transferred income
                    "coinName": "BTC" // Coin Name
                  },
                  {
                    "poolUsername": "test4001",
                    "toPoolUsername": "pop",
                    "algoName": "sha256",
                    "hashRate": 200000000000,
                    "day": 20201213,
                    "amount": 0.2256872,
                    "coinName": "BTC"
                  }
                ],
                "totalNum": 8,
                "pageSize": 200
              }
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Mining Endpoints",
      "path": "toc.mining-endpoints.hashrate-resale-detail-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#hashrate-resale-detail-user_data",
      "name": "Hashrate Resale Detail (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/mining/hash-transfer/config",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/mining/hash-transfer/config",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "userName": {
          "name": "userName",
          "type": "string",
          "required": true,
          "description": "Mining Account"
        },
        "algo": {
          "name": "algo",
          "type": "string",
          "required": true,
          "description": "Transfer algorithm(sha256)"
        },
        "endDate": {
          "name": "endDate",
          "type": "LONG",
          "required": true,
          "description": "Resale End Time (Millisecond timestamp)"
        },
        "startDate": {
          "name": "startDate",
          "type": "LONG",
          "required": true,
          "description": "Resale Start Time(Millisecond timestamp)"
        },
        "toPoolUser": {
          "name": "toPoolUser",
          "type": "string",
          "required": true,
          "description": "Mining Account"
        },
        "hashRate": {
          "name": "hashRate",
          "type": "LONG",
          "required": true,
          "description": "Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000)"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "userName": {
              "name": "userName",
              "type": "string",
              "required": true,
              "description": "Mining Account"
            },
            "algo": {
              "name": "algo",
              "type": "string",
              "required": true,
              "description": "Transfer algorithm(sha256)"
            },
            "endDate": {
              "name": "endDate",
              "type": "LONG",
              "required": true,
              "description": "Resale End Time (Millisecond timestamp)"
            },
            "startDate": {
              "name": "startDate",
              "type": "LONG",
              "required": true,
              "description": "Resale Start Time(Millisecond timestamp)"
            },
            "toPoolUser": {
              "name": "toPoolUser",
              "type": "string",
              "required": true,
              "description": "Mining Account"
            },
            "hashRate": {
              "name": "hashRate",
              "type": "LONG",
              "required": true,
              "description": "Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000)"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string",
              "data": "number" // Mining Account
            }
          ],
          "responseExamples": [
            {
              "code": 0,
              "msg": "",
              "data": 171 // Mining Account
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Mining Endpoints",
      "path": "toc.mining-endpoints.hashrate-resale-request-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#hashrate-resale-request-user_data",
      "name": "Hashrate Resale Request (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/mining/hash-transfer/config/cancel",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/mining/hash-transfer/config/cancel",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "configId": {
          "name": "configId",
          "type": "INTEGER",
          "required": true,
          "description": "Mining ID"
        },
        "userName": {
          "name": "userName",
          "type": "string",
          "required": true,
          "description": "Mining Account"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "configId": {
              "name": "configId",
              "type": "INTEGER",
              "required": true,
              "description": "Mining ID"
            },
            "userName": {
              "name": "userName",
              "type": "string",
              "required": true,
              "description": "Mining Account"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string",
              "data": "boolean"
            }
          ],
          "responseExamples": [
            {
              "code": 0,
              "msg": "",
              "data": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Mining Endpoints",
      "path": "toc.mining-endpoints.cancel-hashrate-resale-configuration-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#cancel-hashrate-resale-configuration-user_data",
      "name": "Cancel hashrate resale configuration(USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/mining/statistics/user/status",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/mining/statistics/user/status",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "algo": {
          "name": "algo",
          "type": "string",
          "required": true,
          "description": "Algorithm(sha256)"
        },
        "userName": {
          "name": "userName",
          "type": "string",
          "required": true,
          "description": "Mining account"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "algo": {
              "name": "algo",
              "type": "string",
              "required": true,
              "description": "Algorithm(sha256)"
            },
            "userName": {
              "name": "userName",
              "type": "string",
              "required": true,
              "description": "Mining account"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string",
              "data": {
                "fifteenMinHashRate": "NumberString", // 15 mins hashrate
                "dayHashRate": "NumberString", //  24H Hashrate
                "validNum": "number", // Effective quantity
                "invalidNum": "number", // Invalid quantity
                "profitToday": { // Today's estimate
                  "BTC": "NumberString",
                  "BSV": "NumberString",
                  "BCH": "NumberString"
                },
                "profitYesterday": { //  Yesterday's earnings
                  "BTC": "NumberString",
                  "BSV": "NumberString",
                  "BCH": "NumberString"
                },
                "userName": "string", // Mining account
                "unit": "string", //  Hashrate unit
                "algo": "string" // Algorithm
              }
            }
          ],
          "responseExamples": [
            {
              "code": 0,
              "msg": "",
              "data": {
                "fifteenMinHashRate": "457835490067496409.00000000", // 15 mins hashrate
                "dayHashRate": "214289268068874127.65000000", //  24H Hashrate
                "validNum": 0, // Effective quantity
                "invalidNum": 17562, // Invalid quantity
                "profitToday": { // Today's estimate
                  "BTC": "0.00314332",
                  "BSV": "56.17055953",
                  "BCH": "106.61586001"
                },
                "profitYesterday": { //  Yesterday's earnings
                  "BTC": "0.00314332",
                  "BSV": "56.17055953",
                  "BCH": "106.61586001"
                },
                "userName": "test", // Mining account
                "unit": "h/s", //  Hashrate unit
                "algo": "sha256" // Algorithm
              }
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Mining Endpoints",
      "path": "toc.mining-endpoints.statistic-list-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#statistic-list-user_data",
      "name": "Statistic List (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/mining/statistics/user/list",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/mining/statistics/user/list",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "algo": {
          "name": "algo",
          "type": "string",
          "required": true,
          "description": "Algorithm(sha256)"
        },
        "userName": {
          "name": "userName",
          "type": "string",
          "required": true,
          "description": "Mining account"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "algo": {
              "name": "algo",
              "type": "string",
              "required": true,
              "description": "Algorithm(sha256)"
            },
            "userName": {
              "name": "userName",
              "type": "string",
              "required": true,
              "description": "Mining account"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string",
              "data": [
                {
                  "type": "string", //Type of hourly hashrate
                  "userName": "string", // Mining account
                  "list": [
                    {
                      "time": "number", // Time
                      "hashrate": "NumberString", // Hashrate
                      "reject": "NumberString" //Rejection Rate
                    },
                    null
                  ]
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "code": 0,
              "msg": "",
              "data": [
                {
                  "type": "H_hashrate", //Type of hourly hashrate
                  "userName": "test", // Mining account
                  "list": [
                    {
                      "time": 1585267200000, // Time
                      "hashrate": "0.00000000", // Hashrate
                      "reject": "0.00000000" //Rejection Rate
                    },
                    {
                      "time": 1585353600000,
                      "hashrate": "0.00000000",
                      "reject": "0.00000000"
                    }
                  ]
                },
                {
                  "type": "D_hashrate", //Type of daily hashrate
                  "userName": "test", // Mining account
                  "list": [
                    {
                      "time": 1587906000000, // Time
                      "hashrate": "0.00000000", // Hashrate
                      "reject": "0.00000000" //Rejection Rate
                    },
                    {
                      "time": 1587909600000,
                      "hashrate": "0.00000000",
                      "reject": "0.00000000"
                    }
                  ]
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Mining Endpoints",
      "path": "toc.mining-endpoints.account-list-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#account-list-user_data",
      "name": "Account List (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/mining/payment/uid",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/mining/payment/uid",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "algo": {
          "name": "algo",
          "type": "string",
          "required": true,
          "description": "Algorithm(sha256)"
        },
        "startDate": {
          "name": "startDate",
          "type": "LONG",
          "required": false,
          "description": "Millisecond timestamp"
        },
        "endDate": {
          "name": "endDate",
          "type": "LONG",
          "required": false,
          "description": "Millisecond timestamp"
        },
        "pageIndex": {
          "name": "pageIndex",
          "type": "INTEGER",
          "required": false,
          "description": "Default 1"
        },
        "pageSize": {
          "name": "pageSize",
          "type": "INTEGER",
          "required": false,
          "description": "Min 10,Max 200"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "algo": {
              "name": "algo",
              "type": "string",
              "required": true,
              "description": "Algorithm(sha256)"
            },
            "startDate": {
              "name": "startDate",
              "type": "LONG",
              "required": false,
              "description": "Millisecond timestamp"
            },
            "endDate": {
              "name": "endDate",
              "type": "LONG",
              "required": false,
              "description": "Millisecond timestamp"
            },
            "pageIndex": {
              "name": "pageIndex",
              "type": "INTEGER",
              "required": false,
              "description": "Default 1"
            },
            "pageSize": {
              "name": "pageSize",
              "type": "INTEGER",
              "required": false,
              "description": "Min 10,Max 200"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string",
              "data": {
                "accountProfits": [
                  {
                    "time": "number",
                    "coinName": "string", // Coin
                    "type": "number", // 0:Referral 1:Refund 2:Rebate
                    "puid": "number", //Sub-account id
                    "subName": "string", //Mining account
                    "amount": "number" //Amount
                  }
                ],
                "totalNum": "number", // Total records
                "pageSize": "number" // Size of one page
              }
            }
          ],
          "responseExamples": [
            {
              "code": 0,
              "msg": "",
              "data": {
                "accountProfits": [
                  {
                    "time": 1607443200000,
                    "coinName": "BTC", // Coin
                    "type": 2, // 0:Referral 1:Refund 2:Rebate
                    "puid": 59985472, //Sub-account id
                    "subName": "vdvaghani", //Mining account
                    "amount": 0.09186957 //Amount
                  }
                ],
                "totalNum": 3, // Total records
                "pageSize": 20 // Size of one page
              }
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Mining Endpoints",
      "path": "toc.mining-endpoints.mining-account-earning-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#mining-account-earning-user_data",
      "name": "Mining Account Earning (USER_DATA)"
    },
    {
      "description": "Execute transfer between spot account and futures account.",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/futures/transfer",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/futures/transfer",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": "The asset being transferred, e.g., USDT"
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": "The amount to be transferred"
        },
        "type": {
          "name": "type",
          "type": "INT",
          "required": true,
          "description": "1: transfer from spot account to USDT-Ⓜ futures account. 2: transfer from USDT-Ⓜ futures account to spot account. 3: transfer from spot account to COIN-Ⓜ futures account. 4: transfer from COIN-Ⓜ futures account to spot account."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": "The asset being transferred, e.g., USDT"
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": "The amount to be transferred"
            },
            "type": {
              "name": "type",
              "type": "INT",
              "required": true,
              "description": "1: transfer from spot account to USDT-Ⓜ futures account. 2: transfer from USDT-Ⓜ futures account to spot account. 3: transfer from spot account to COIN-Ⓜ futures account. 4: transfer from COIN-Ⓜ futures account to spot account."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "tranId": "number" //transaction id
            }
          ],
          "responseExamples": [
            {
              "tranId": 100000001 //transaction id
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Futures",
      "path": "toc.futures.new-future-account-transfer-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#new-future-account-transfer-user_data",
      "name": "New Future Account Transfer (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/futures/transfer",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/futures/transfer",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10 Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10 Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "asset": "string",
                  "tranId": "number",
                  "amount": "NumberString",
                  "type": "NumberString", // one of 1( from spot to USDT-Ⓜ), 2( from USDT-Ⓜ to spot), 3( from spot to COIN-Ⓜ), and 4( from COIN-Ⓜ to spot)
                  "timestamp": "number",
                  "status": "string" //one of PENDING (pending to execution), CONFIRMED (successfully transfered), FAILED (execution failed, nothing happened to your account);
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "asset": "USDT",
                  "tranId": 100000001,
                  "amount": "40.84624400",
                  "type": "1", // one of 1( from spot to USDT-Ⓜ), 2( from USDT-Ⓜ to spot), 3( from spot to COIN-Ⓜ), and 4( from COIN-Ⓜ to spot)
                  "timestamp": 1555056425000,
                  "status": "CONFIRMED" //one of PENDING (pending to execution), CONFIRMED (successfully transfered), FAILED (execution failed, nothing happened to your account);
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Futures",
      "path": "toc.futures.get-future-account-transaction-history-list-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-future-account-transaction-history-list-user_data",
      "name": "Get Future Account Transaction History List (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/futures/histDataLink",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/futures/histDataLink",
      "hmacSHA256": false,
      "weights": {
        "IP": 200,
        "IP_text": "200"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "symbol name, e.g. BTCUSDT or BTCUSD_PERP ｜"
        },
        "dataType": {
          "name": "dataType",
          "type": "ENUM",
          "required": true,
          "description": "T_DEPTH for ticklevel orderbook data, S_DEPTH for orderbook snapshot data"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "symbol name, e.g. BTCUSDT or BTCUSD_PERP ｜"
            },
            "dataType": {
              "name": "dataType",
              "type": "ENUM",
              "required": true,
              "description": "T_DEPTH for ticklevel orderbook data, S_DEPTH for orderbook snapshot data"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "data": [
                {
                  "day": "string",
                  "url": "string"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "data": [
                {
                  "day": "2023-06-30",
                  "url": "https://bin-prod-user-rebate-bucket.s3.ap-northeast-1.amazonaws.com/future-data-symbol-update/2023-06-30/BTCUSDT_T_DEPTH_2023-06-30.tar.gz?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20230925T025710Z&X-Amz-SignedHeaders=host&X-Amz-Expires=86399&X-Amz-Credential=AKIAVL364M5ZNFZ74IPP%2F20230925%2Fap-northeast-1%2Fs3%2Faws4_request&X-Amz-Signature=5fffcb390d10f34d71615726f81f99e42d80a11532edeac77b858c51a88cbf59"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Futures",
      "path": "toc.futures.get-future-ticklevel-orderbook-historical-data-download-link-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-future-ticklevel-orderbook-historical-data-download-link-user_data",
      "name": "Get Future TickLevel Orderbook Historical Data Download Link (USER_DATA)"
    },
    {
      "description": "Send in a VP new order. \nOnly support on USDⓈ-M Contracts.",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/algo/futures/newOrderVp",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/algo/futures/newOrderVp",
      "hmacSHA256": false,
      "weights": {
        "UID": 3000,
        "UID_text": "3000"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "Trading symbol eg. BTCUSDT"
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": "Trading side ( BUY or SELL )"
        },
        "positionSide": {
          "name": "positionSide",
          "type": "PositionSide",
          "required": false,
          "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode."
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": true,
          "description": "Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 1,000 USDT and less than the equivalent of 1,000,000 USDT"
        },
        "urgency": {
          "name": "urgency",
          "type": "ENUM",
          "required": true,
          "description": "Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH"
        },
        "clientAlgoId": {
          "name": "clientAlgoId",
          "type": "string",
          "required": false,
          "description": "A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value"
        },
        "reduceOnly": {
          "name": "reduceOnly",
          "type": "boolean",
          "required": false,
          "description": "\"true\" or \"false\". Default \"false\"; Cannot be sent in Hedge Mode; Cannot be sent when you open a position"
        },
        "limitPrice": {
          "name": "limitPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Limit price of the order; If it is not sent, will place order by market price by default"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Trading symbol eg. BTCUSDT"
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": "Trading side ( BUY or SELL )"
            },
            "positionSide": {
              "name": "positionSide",
              "type": "PositionSide",
              "required": false,
              "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode."
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": true,
              "description": "Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 1,000 USDT and less than the equivalent of 1,000,000 USDT"
            },
            "urgency": {
              "name": "urgency",
              "type": "ENUM",
              "required": true,
              "description": "Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH"
            },
            "clientAlgoId": {
              "name": "clientAlgoId",
              "type": "string",
              "required": false,
              "description": "A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value"
            },
            "reduceOnly": {
              "name": "reduceOnly",
              "type": "boolean",
              "required": false,
              "description": "\"true\" or \"false\". Default \"false\"; Cannot be sent in Hedge Mode; Cannot be sent when you open a position"
            },
            "limitPrice": {
              "name": "limitPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Limit price of the order; If it is not sent, will place order by market price by default"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "clientAlgoId": "string",
              "success": "boolean",
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "clientAlgoId": "00358ce6a268403398bd34eaa36dffe7",
              "success": true,
              "code": 0,
              "msg": "OK"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Futures Algo Endpoints",
      "path": "toc.futures-algo-endpoints.volume-participation-vp-new-order-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#volume-participation-vp-new-order-trade",
      "name": "Volume Participation(VP) New Order (TRADE)"
    },
    {
      "description": "Send in a Twap new order. \nOnly support on USDⓈ-M Contracts.",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/algo/futures/newOrderTwap",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/algo/futures/newOrderTwap",
      "hmacSHA256": false,
      "weights": {
        "UID": 3000,
        "UID_text": "3000"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "Trading symbol eg. BTCUSDT"
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": "Trading side ( BUY or SELL )"
        },
        "positionSide": {
          "name": "positionSide",
          "type": "PositionSide",
          "required": false,
          "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode."
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": true,
          "description": "Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 1,000 USDT and less than the equivalent of 1,000,000 USDT"
        },
        "duration": {
          "name": "duration",
          "type": "LONG",
          "required": true,
          "description": "Duration for TWAP orders in seconds. [300, 86400]"
        },
        "clientAlgoId": {
          "name": "clientAlgoId",
          "type": "string",
          "required": false,
          "description": "A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value"
        },
        "reduceOnly": {
          "name": "reduceOnly",
          "type": "boolean",
          "required": false,
          "description": "\"true\" or \"false\". Default \"false\"; Cannot be sent in Hedge Mode; Cannot be sent when you open a position"
        },
        "limitPrice": {
          "name": "limitPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Limit price of the order; If it is not sent, will place order by market price by default"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Trading symbol eg. BTCUSDT"
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": "Trading side ( BUY or SELL )"
            },
            "positionSide": {
              "name": "positionSide",
              "type": "PositionSide",
              "required": false,
              "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode."
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": true,
              "description": "Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 1,000 USDT and less than the equivalent of 1,000,000 USDT"
            },
            "duration": {
              "name": "duration",
              "type": "LONG",
              "required": true,
              "description": "Duration for TWAP orders in seconds. [300, 86400]"
            },
            "clientAlgoId": {
              "name": "clientAlgoId",
              "type": "string",
              "required": false,
              "description": "A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value"
            },
            "reduceOnly": {
              "name": "reduceOnly",
              "type": "boolean",
              "required": false,
              "description": "\"true\" or \"false\". Default \"false\"; Cannot be sent in Hedge Mode; Cannot be sent when you open a position"
            },
            "limitPrice": {
              "name": "limitPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Limit price of the order; If it is not sent, will place order by market price by default"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "clientAlgoId": "string",
              "success": "boolean",
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "clientAlgoId": "65ce1630101a480b85915d7e11fd5078",
              "success": true,
              "code": 0,
              "msg": "OK"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Futures Algo Endpoints",
      "path": "toc.futures-algo-endpoints.time-weighted-average-price-twap-new-order-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#time-weighted-average-price-twap-new-order-trade",
      "name": "Time-Weighted Average Price(Twap) New Order (TRADE)"
    },
    {
      "description": "Cancel an active order.",
      "securityType": "TRADE",
      "request": "DELETE  /sapi/v1/algo/futures/order",
      "requestMethod": "DELETE",
      "requestEndPoint": "/sapi/v1/algo/futures/order",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "algoId": {
          "name": "algoId",
          "type": "LONG",
          "required": true,
          "description": "eg. 14511"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "algoId": {
              "name": "algoId",
              "type": "LONG",
              "required": true,
              "description": "eg. 14511"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "algoId": "number",
              "success": "boolean",
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "algoId": 14511,
              "success": true,
              "code": 0,
              "msg": "OK"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Futures Algo Endpoints",
      "path": "toc.futures-algo-endpoints.cancel-algo-order-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#cancel-algo-order-trade",
      "name": "Cancel Algo Order (TRADE)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET  /sapi/v1/algo/futures/openOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/algo/futures/openOrders",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number",
              "orders": [
                {
                  "algoId": "number",
                  "symbol": "string",
                  "side": "OrderSide",
                  "positionSide": "PositionSide",
                  "totalQty": "NumberString",
                  "executedQty": "NumberString",
                  "executedAmt": "NumberString",
                  "avgPrice": "NumberString",
                  "clientAlgoId": "string",
                  "bookTime": "number",
                  "endTime": "number",
                  "algoStatus": "string",
                  "algoType": "string",
                  "urgency": "string"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 1,
              "orders": [
                {
                  "algoId": 14517,
                  "symbol": "ETHUSDT",
                  "side": "SELL",
                  "positionSide": "SHORT",
                  "totalQty": "5.000",
                  "executedQty": "0.000",
                  "executedAmt": "0.00000000",
                  "avgPrice": "0.00",
                  "clientAlgoId": "d7096549481642f8a0bb69e9e2e31f2e",
                  "bookTime": 1649756817004,
                  "endTime": 0,
                  "algoStatus": "WORKING",
                  "algoType": "VP",
                  "urgency": "LOW"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Futures Algo Endpoints",
      "path": "toc.futures-algo-endpoints.query-current-algo-open-orders-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-current-algo-open-orders-user_data",
      "name": "Query Current Algo Open Orders (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET  /sapi/v1/algo/futures/historicalOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/algo/futures/historicalOrders",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": "Trading symbol eg. BTCUSDT"
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": false,
          "description": "BUY or SELL"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "in milliseconds  eg.1641522717552"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "in milliseconds  eg.1641522526562"
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": "Default is 1"
        },
        "pageSize": {
          "name": "pageSize",
          "type": "INT",
          "required": false,
          "description": "MIN 1, MAX 100; Default 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": "Trading symbol eg. BTCUSDT"
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": false,
              "description": "BUY or SELL"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "in milliseconds  eg.1641522717552"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "in milliseconds  eg.1641522526562"
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "Default is 1"
            },
            "pageSize": {
              "name": "pageSize",
              "type": "INT",
              "required": false,
              "description": "MIN 1, MAX 100; Default 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number",
              "orders": [
                {
                  "algoId": "number",
                  "symbol": "string",
                  "side": "OrderSide",
                  "positionSide": "PositionSide",
                  "totalQty": "NumberString",
                  "executedQty": "NumberString",
                  "executedAmt": "NumberString",
                  "avgPrice": "NumberString",
                  "clientAlgoId": "string",
                  "bookTime": "number",
                  "endTime": "number",
                  "algoStatus": "string",
                  "algoType": "string",
                  "urgency": "string"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 1,
              "orders": [
                {
                  "algoId": 14518,
                  "symbol": "BNBUSDT",
                  "side": "BUY",
                  "positionSide": "BOTH",
                  "totalQty": "100.00",
                  "executedQty": "0.00",
                  "executedAmt": "0.00000000",
                  "avgPrice": "0.000",
                  "clientAlgoId": "acacab56b3c44bef9f6a8f8ebd2a8408",
                  "bookTime": 1649757019503,
                  "endTime": 1649757088101,
                  "algoStatus": "CANCELLED",
                  "algoType": "VP",
                  "urgency": "LOW"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Futures Algo Endpoints",
      "path": "toc.futures-algo-endpoints.query-historical-algo-orders-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-historical-algo-orders-user_data",
      "name": "Query Historical Algo Orders (USER_DATA)"
    },
    {
      "description": "Get respective sub orders for a specified algoId",
      "securityType": "USER_DATA",
      "request": "GET  /sapi/v1/algo/futures/subOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/algo/futures/subOrders",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "algoId": {
          "name": "algoId",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": "Default is 1"
        },
        "pageSize": {
          "name": "pageSize",
          "type": "INT",
          "required": false,
          "description": "MIN 1, MAX 100; Default 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "algoId": {
              "name": "algoId",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "Default is 1"
            },
            "pageSize": {
              "name": "pageSize",
              "type": "INT",
              "required": false,
              "description": "MIN 1, MAX 100; Default 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number",
              "executedQty": "NumberString",
              "executedAmt": "NumberString",
              "subOrders": [
                {
                  "algoId": "number",
                  "orderId": "number",
                  "orderStatus": "string",
                  "executedQty": "NumberString",
                  "executedAmt": "NumberString",
                  "feeAmt": "NumberString",
                  "feeAsset": "string",
                  "bookTime": "number",
                  "avgPrice": "NumberString",
                  "side": "OrderSide",
                  "symbol": "string",
                  "subId": "number",
                  "timeInForce": "string",
                  "origQty": "NumberString"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 1,
              "executedQty": "1.000",
              "executedAmt": "3229.44000000",
              "subOrders": [
                {
                  "algoId": 13723,
                  "orderId": 8389765519993909000,
                  "orderStatus": "FILLED",
                  "executedQty": "1.000",
                  "executedAmt": "3229.44000000",
                  "feeAmt": "-1.61471999",
                  "feeAsset": "USDT",
                  "bookTime": 1649319001964,
                  "avgPrice": "3229.44",
                  "side": "SELL",
                  "symbol": "ETHUSDT",
                  "subId": 1,
                  "timeInForce": "IMMEDIATE_OR_CANCEL",
                  "origQty": "1.000"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Futures Algo Endpoints",
      "path": "toc.futures-algo-endpoints.query-sub-orders-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-sub-orders-user_data",
      "name": "Query Sub Orders (USER_DATA)"
    },
    {
      "description": "Place a new spot TWAP order with Algo service. ",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/algo/spot/newOrderTwap",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/algo/spot/newOrderTwap",
      "hmacSHA256": false,
      "weights": {
        "UID": 3000,
        "UID_text": "3000"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "Trading symbol eg. BTCUSDT"
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": "Trading side ( BUY or SELL )"
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": true,
          "description": "Quantity of base asset; The notional (quantity * last price(base asset)) must be more than the equivalent of 1,000 USDT and less than the equivalent of 100,000 USDT"
        },
        "duration": {
          "name": "duration",
          "type": "LONG",
          "required": true,
          "description": "Duration for TWAP orders in seconds. [300, 86400]"
        },
        "clientAlgoId": {
          "name": "clientAlgoId",
          "type": "string",
          "required": false,
          "description": "A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value"
        },
        "limitPrice": {
          "name": "limitPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Limit price of the order; If it is not sent, will place order by market price by default"
        },
        "stpMode": {
          "name": "stpMode",
          "type": "ENUM",
          "required": false,
          "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Trading symbol eg. BTCUSDT"
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": "Trading side ( BUY or SELL )"
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": true,
              "description": "Quantity of base asset; The notional (quantity * last price(base asset)) must be more than the equivalent of 1,000 USDT and less than the equivalent of 100,000 USDT"
            },
            "duration": {
              "name": "duration",
              "type": "LONG",
              "required": true,
              "description": "Duration for TWAP orders in seconds. [300, 86400]"
            },
            "clientAlgoId": {
              "name": "clientAlgoId",
              "type": "string",
              "required": false,
              "description": "A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value"
            },
            "limitPrice": {
              "name": "limitPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Limit price of the order; If it is not sent, will place order by market price by default"
            },
            "stpMode": {
              "name": "stpMode",
              "type": "ENUM",
              "required": false,
              "description": "The allowed enums is dependent on what is configured on the symbol. The possible supported values are EXPIRE_TAKER, EXPIRE_MAKER, EXPIRE_BOTH, NONE"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "clientAlgoId": "string",
              "success": "boolean",
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "clientAlgoId": "65ce1630101a480b85915d7e11fd5078",
              "success": true,
              "code": 0,
              "msg": "OK"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Algo Endpoints",
      "path": "toc.spot-algo-endpoints.time-weighted-average-price-twap-new-order-trade-2",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#time-weighted-average-price-twap-new-order-trade-2",
      "name": "Time-Weighted Average Price (Twap) New Order (TRADE)"
    },
    {
      "description": "Cancel an open TWAP order",
      "securityType": "TRADE",
      "request": "DELETE /sapi/v1/algo/spot/order",
      "requestMethod": "DELETE",
      "requestEndPoint": "/sapi/v1/algo/spot/order",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "algoId": {
          "name": "algoId",
          "type": "LONG",
          "required": true,
          "description": "eg. 14511"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "algoId": {
              "name": "algoId",
              "type": "LONG",
              "required": true,
              "description": "eg. 14511"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "algoId": "number",
              "success": "boolean",
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "algoId": 14511,
              "success": true,
              "code": 0,
              "msg": "OK"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Algo Endpoints",
      "path": "toc.spot-algo-endpoints.cancel-algo-order-trade-2",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#cancel-algo-order-trade-2",
      "name": "Cancel Algo Order (TRADE)"
    },
    {
      "description": "Get all open SPOT TWAP orders",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/algo/spot/openOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/algo/spot/openOrders",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number",
              "orders": [
                {
                  "algoId": "number",
                  "symbol": "string",
                  "side": "OrderSide",
                  "totalQty": "NumberString",
                  "executedQty": "NumberString",
                  "executedAmt": "NumberString",
                  "avgPrice": "NumberString",
                  "clientAlgoId": "string",
                  "bookTime": "number",
                  "endTime": "number",
                  "algoStatus": "string",
                  "algoType": "string",
                  "urgency": "string"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 1,
              "orders": [
                {
                  "algoId": 14517,
                  "symbol": "ETHUSDT",
                  "side": "SELL",
                  "totalQty": "5.000",
                  "executedQty": "0.000",
                  "executedAmt": "0.00000000",
                  "avgPrice": "0.00",
                  "clientAlgoId": "d7096549481642f8a0bb69e9e2e31f2e",
                  "bookTime": 1649756817004,
                  "endTime": 0,
                  "algoStatus": "WORKING",
                  "algoType": "TWAP",
                  "urgency": "LOW"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Algo Endpoints",
      "path": "toc.spot-algo-endpoints.query-current-algo-open-orders-user_data-2",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-current-algo-open-orders-user_data-2",
      "name": "Query Current Algo Open Orders (USER_DATA)"
    },
    {
      "description": "Get all historical SPOT TWAP orders",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/algo/spot/historicalOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/algo/spot/historicalOrders",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": "Trading symbol eg. BTCUSDT"
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": false,
          "description": "BUY or SELL"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "in milliseconds  eg.1641522717552"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "in milliseconds  eg.1641522526562"
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": "Default is 1"
        },
        "pageSize": {
          "name": "pageSize",
          "type": "INT",
          "required": false,
          "description": "MIN 1, MAX 100; Default 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": "Trading symbol eg. BTCUSDT"
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": false,
              "description": "BUY or SELL"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "in milliseconds  eg.1641522717552"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "in milliseconds  eg.1641522526562"
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "Default is 1"
            },
            "pageSize": {
              "name": "pageSize",
              "type": "INT",
              "required": false,
              "description": "MIN 1, MAX 100; Default 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number",
              "orders": [
                {
                  "algoId": "number",
                  "symbol": "string",
                  "side": "OrderSide",
                  "totalQty": "NumberString",
                  "executedQty": "NumberString",
                  "executedAmt": "NumberString",
                  "avgPrice": "NumberString",
                  "clientAlgoId": "string",
                  "bookTime": "number",
                  "endTime": "number",
                  "algoStatus": "string",
                  "algoType": "string",
                  "urgency": "string"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 1,
              "orders": [
                {
                  "algoId": 14518,
                  "symbol": "BNBUSDT",
                  "side": "BUY",
                  "totalQty": "100.00",
                  "executedQty": "0.00",
                  "executedAmt": "0.00000000",
                  "avgPrice": "0.000",
                  "clientAlgoId": "acacab56b3c44bef9f6a8f8ebd2a8408",
                  "bookTime": 1649757019503,
                  "endTime": 1649757088101,
                  "algoStatus": "CANCELLED",
                  "algoType": "VP",
                  "urgency": "LOW"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Algo Endpoints",
      "path": "toc.spot-algo-endpoints.query-historical-algo-orders-user_data-2",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-historical-algo-orders-user_data-2",
      "name": "Query Historical Algo Orders (USER_DATA)"
    },
    {
      "description": "Get respective sub orders for a specified algoId",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/algo/spot/subOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/algo/spot/subOrders",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "algoId": {
          "name": "algoId",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": "Default is 1"
        },
        "pageSize": {
          "name": "pageSize",
          "type": "INT",
          "required": false,
          "description": "MIN 1, MAX 100; Default 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "algoId": {
              "name": "algoId",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "Default is 1"
            },
            "pageSize": {
              "name": "pageSize",
              "type": "INT",
              "required": false,
              "description": "MIN 1, MAX 100; Default 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number",
              "executedQty": "NumberString",
              "executedAmt": "NumberString",
              "subOrders": [
                {
                  "algoId": "number",
                  "orderId": "number",
                  "orderStatus": "string",
                  "executedQty": "NumberString",
                  "executedAmt": "NumberString",
                  "feeAmt": "NumberString",
                  "feeAsset": "string",
                  "bookTime": "number",
                  "avgPrice": "NumberString",
                  "side": "OrderSide",
                  "symbol": "string",
                  "subId": "number",
                  "timeInForce": "string",
                  "origQty": "NumberString"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 1,
              "executedQty": "1.000",
              "executedAmt": "3229.44000000",
              "subOrders": [
                {
                  "algoId": 13723,
                  "orderId": 8389765519993909000,
                  "orderStatus": "FILLED",
                  "executedQty": "1.000",
                  "executedAmt": "3229.44000000",
                  "feeAmt": "-1.61471999",
                  "feeAsset": "USDT",
                  "bookTime": 1649319001964,
                  "avgPrice": "3229.44",
                  "side": "SELL",
                  "symbol": "ETHUSDT",
                  "subId": 1,
                  "timeInForce": "IMMEDIATE_OR_CANCEL",
                  "origQty": "1.000"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Spot Algo Endpoints",
      "path": "toc.spot-algo-endpoints.query-sub-orders-user_data-2",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-sub-orders-user_data-2",
      "name": "Query Sub Orders (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/portfolio/account",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/portfolio/account",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "uniMMR": "NumberString", // Portfolio Margin Pro account maintenance margin rate
              "accountEquity": "NumberString", // Account equity, unit:USD
              "actualEquity": "NumberString", // Actual equity, unit:USD
              "accountMaintMargin": "NumberString", // Portfolio Margin Pro account maintenance margin, unit:USD
              "accountStatus": "string", // Portfolio Margin Pro account status:"NORMAL", "MARGIN_CALL", "SUPPLY_MARGIN", "REDUCE_ONLY", "ACTIVE_LIQUIDATION", "FORCE_LIQUIDATION", "BANKRUPTED"
              "accountType": "string" //PM_1 for PM Pro, PM_2 for PM ,PM_3 for PM Pro(SPAN)
            }
          ],
          "responseExamples": [
            {
              "uniMMR": "5167.92171923", // Portfolio Margin Pro account maintenance margin rate
              "accountEquity": "122607.35137903", // Account equity, unit:USD
              "actualEquity": "142607.35137903", // Actual equity, unit:USD
              "accountMaintMargin": "23.72469206", // Portfolio Margin Pro account maintenance margin, unit:USD
              "accountStatus": "NORMAL", // Portfolio Margin Pro account status:"NORMAL", "MARGIN_CALL", "SUPPLY_MARGIN", "REDUCE_ONLY", "ACTIVE_LIQUIDATION", "FORCE_LIQUIDATION", "BANKRUPTED"
              "accountType": "PM_1" //PM_1 for PM Pro, PM_2 for PM ,PM_3 for PM Pro(SPAN)
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Portfolio Margin Pro Endpoints",
      "path": "toc.portfolio-margin-pro-endpoints.get-portfolio-margin-pro-account-info-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-portfolio-margin-pro-account-info-user_data",
      "name": "Get Portfolio Margin Pro Account Info (USER_DATA)"
    },
    {
      "description": "Portfolio Margin Pro Collateral Rate",
      "securityType": "MARKET_DATA",
      "request": "GET /sapi/v1/portfolio/collateralRate",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/portfolio/collateralRate",
      "hmacSHA256": false,
      "weights": {
        "IP": 50,
        "IP_text": "50"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "asset": "string",
                "collateralRate": "NumberString"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "asset": "USDC",
                "collateralRate": "1.0000"
              },
              {
                "asset": "BUSD",
                "collateralRate": "1.0000"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Portfolio Margin Pro Endpoints",
      "path": "toc.portfolio-margin-pro-endpoints.portfolio-margin-pro-collateral-rate-market_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#portfolio-margin-pro-collateral-rate-market_data",
      "name": "Portfolio Margin Pro Collateral Rate (MARKET_DATA)"
    },
    {
      "description": "Query Portfolio Margin Pro Bankruptcy Loan Amount",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/portfolio/pmLoan",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/portfolio/pmLoan",
      "hmacSHA256": false,
      "weights": {
        "UID": 500,
        "UID_text": "500"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "asset": "string",
              "amount": "NumberString" // portfolio margin bankruptcy loan amount in BUSD
            }
          ],
          "responseExamples": [
            {
              "asset": "BUSD",
              "amount": "579.45" // portfolio margin bankruptcy loan amount in BUSD
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Portfolio Margin Pro Endpoints",
      "path": "toc.portfolio-margin-pro-endpoints.query-portfolio-margin-pro-bankruptcy-loan-amount-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-portfolio-margin-pro-bankruptcy-loan-amount-user_data",
      "name": "Query Portfolio Margin Pro Bankruptcy Loan Amount (USER_DATA)"
    },
    {
      "description": "Repay Portfolio Margin Pro Bankruptcy Loan",
      "securityType": "",
      "request": "POST /sapi/v1/portfolio/repay",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/portfolio/repay",
      "hmacSHA256": false,
      "weights": {
        "UID": 3000,
        "UID_text": "3000"
      },
      "baseParams": {
        "from": {
          "name": "from",
          "type": "string",
          "required": false,
          "description": "SPOT or MARGIN，default SPOT"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "from": {
              "name": "from",
              "type": "string",
              "required": false,
              "description": "SPOT or MARGIN，default SPOT"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "tranId": "number"
            }
          ],
          "responseExamples": [
            {
              "tranId": 58203331886213500
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Portfolio Margin Pro Endpoints",
      "path": "toc.portfolio-margin-pro-endpoints.portfolio-margin-pro-bankruptcy-loan-repay",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#portfolio-margin-pro-bankruptcy-loan-repay",
      "name": "Portfolio Margin Pro Bankruptcy Loan Repay"
    },
    {
      "description": "Query interest history of negative balance for portfolio margin.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/portfolio/interest-history",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/portfolio/interest-history",
      "hmacSHA256": false,
      "weights": {
        "IP": 50,
        "IP_text": "50"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10 Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10 Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "asset": "string",
                "interest": "NumberString", //interest amount
                "interestAccruedTime": "number",
                "interestRate": "NumberString", //daily interest rate
                "principal": "NumberString"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "asset": "USDT",
                "interest": "24.4440", //interest amount
                "interestAccruedTime": 1670227200000,
                "interestRate": "0.0001164", //daily interest rate
                "principal": "210000"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Portfolio Margin Pro Endpoints",
      "path": "toc.portfolio-margin-pro-endpoints.query-portfolio-margin-pro-negative-balance-interest-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-portfolio-margin-pro-negative-balance-interest-history-user_data",
      "name": "Query Portfolio Margin Pro Negative Balance Interest History(USER_DATA)"
    },
    {
      "description": "Query Portfolio Margin Asset Index Price",
      "securityType": "MARKET_DATA",
      "request": "GET /sapi/v1/portfolio/asset-index-price",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/portfolio/asset-index-price",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "1 if send asset or 50 if not send asset"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "asset": "string",
                "assetIndexPrice": "NumberString", // in USD
                "time": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "asset": "BTC",
                "assetIndexPrice": "28251.9136906", // in USD
                "time": 1683518338121
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Portfolio Margin Pro Endpoints",
      "path": "toc.portfolio-margin-pro-endpoints.query-portfolio-margin-asset-index-price-market_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-portfolio-margin-asset-index-price-market_data",
      "name": "Query Portfolio Margin Asset Index Price (MARKET_DATA)"
    },
    {
      "description": "Transfers all assets from Futures Account to Margin account",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/portfolio/auto-collection",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/portfolio/auto-collection",
      "hmacSHA256": false,
      "weights": {
        "IP": 1500,
        "IP_text": "1500"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "msg": "success"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Portfolio Margin Pro Endpoints",
      "path": "toc.portfolio-margin-pro-endpoints.fund-auto-collection-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#fund-auto-collection-user_data",
      "name": "Fund Auto-collection (USER_DATA)"
    },
    {
      "description": "Transfers specific asset from Futures Account to Margin account",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/portfolio/asset-collection",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/portfolio/asset-collection",
      "hmacSHA256": false,
      "weights": {
        "IP": 60,
        "IP_text": "60"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "msg": "success"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Portfolio Margin Pro Endpoints",
      "path": "toc.portfolio-margin-pro-endpoints.fund-collection-by-asset-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#fund-collection-by-asset-user_data",
      "name": "Fund Collection by Asset(USER_DATA)"
    },
    {
      "description": "BNB transfer can be between Margin Account and USDM Account",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/portfolio/bnb-transfer",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/portfolio/bnb-transfer",
      "hmacSHA256": false,
      "weights": {
        "IP": 1500,
        "IP_text": "1500"
      },
      "baseParams": {
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "transferSide": {
          "name": "transferSide",
          "type": "\"TO_UM\"|\"FROM_UM\"",
          "required": true,
          "description": "\"TO_UM\",\"FROM_UM\""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "transferSide": {
              "name": "transferSide",
              "type": "\"TO_UM\"|\"FROM_UM\"",
              "required": true,
              "description": "\"TO_UM\",\"FROM_UM\""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "tranId": "number"
            }
          ],
          "responseExamples": [
            {
              "tranId": 100000001
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Portfolio Margin Pro Endpoints",
      "path": "toc.portfolio-margin-pro-endpoints.bnb-transfer-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#bnb-transfer-user_data",
      "name": "BNB transfer(USER_DATA)"
    },
    {
      "description": "Change Auto-repay-futures Status",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/portfolio/repay-futures-switch",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/portfolio/repay-futures-switch",
      "hmacSHA256": false,
      "weights": {
        "IP": 1500,
        "IP_text": "1500"
      },
      "baseParams": {
        "autoRepay": {
          "name": "autoRepay",
          "type": "string",
          "required": true,
          "description": "Default: true; false for turn off the auto-repay futures negative balance function"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "autoRepay": {
              "name": "autoRepay",
              "type": "string",
              "required": true,
              "description": "Default: true; false for turn off the auto-repay futures negative balance function"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "msg": "success"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Portfolio Margin Pro Endpoints",
      "path": "toc.portfolio-margin-pro-endpoints.change-auto-repay-futures-status-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#change-auto-repay-futures-status-trade",
      "name": "Change Auto-repay-futures Status (TRADE)"
    },
    {
      "description": "Query Auto-repay-futures Status",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/portfolio/repay-futures-switch",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/portfolio/repay-futures-switch",
      "hmacSHA256": false,
      "weights": {
        "IP": 30,
        "IP_text": "30"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "autoRepay": "boolean" //  "true" for turn on the auto-repay futures; "false" for turn off the auto-repay futures
            }
          ],
          "responseExamples": [
            {
              "autoRepay": true //  "true" for turn on the auto-repay futures; "false" for turn off the auto-repay futures
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Portfolio Margin Pro Endpoints",
      "path": "toc.portfolio-margin-pro-endpoints.get-auto-repay-futures-status-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-auto-repay-futures-status-user_data",
      "name": "Get Auto-repay-futures Status (USER_DATA)"
    },
    {
      "description": "Repay futures Negative Balance",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/portfolio/repay-futures-negative-balance",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/portfolio/repay-futures-negative-balance",
      "hmacSHA256": false,
      "weights": {
        "IP": 1500,
        "IP_text": "1500"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "msg": "success"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Portfolio Margin Pro Endpoints",
      "path": "toc.portfolio-margin-pro-endpoints.repay-futures-negative-balance-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#repay-futures-negative-balance-user_data",
      "name": "Repay futures Negative Balance (USER_DATA)"
    },
    {
      "description": "50",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/portfolio/margin-asset-leverage",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/portfolio/margin-asset-leverage",
      "hmacSHA256": false,
      "weights": {
        "IP": 50,
        "IP_text": "50"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "asset": "string",
                "leverage": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "asset": "USDC",
                "leverage": 10
              },
              {
                "asset": "USDT",
                "leverage": 10
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Portfolio Margin Pro Endpoints",
      "path": "toc.portfolio-margin-pro-endpoints.get-portfolio-margin-asset-leverage-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-portfolio-margin-asset-leverage-user_data",
      "name": "Get Portfolio Margin Asset Leverage (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/fiat/orders",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/fiat/orders",
      "hmacSHA256": false,
      "weights": {
        "UID": 90000,
        "UID_text": "90000"
      },
      "baseParams": {
        "transactionType": {
          "name": "transactionType",
          "type": "string",
          "required": true,
          "description": "0-deposit,1-withdraw"
        },
        "beginTime": {
          "name": "beginTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": "default 1"
        },
        "rows": {
          "name": "rows",
          "type": "INT",
          "required": false,
          "description": "default 100, max 500"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "transactionType": {
              "name": "transactionType",
              "type": "string",
              "required": true,
              "description": "0-deposit,1-withdraw"
            },
            "beginTime": {
              "name": "beginTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "default 1"
            },
            "rows": {
              "name": "rows",
              "type": "INT",
              "required": false,
              "description": "default 100, max 500"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "NumberString",
              "message": "string",
              "data": [
                {
                  "orderNo": "string",
                  "fiatCurrency": "string",
                  "indicatedAmount": "NumberString",
                  "amount": "NumberString",
                  "totalFee": "NumberString", // Trade fee
                  "method": "string", // Trade method
                  "status": "string", // Processing, Failed, Successful, Finished, Refunding, Refunded, Refund Failed, Order Partial credit Stopped
                  "createTime": "number",
                  "updateTime": "number"
                }
              ],
              "total": "number",
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "code": "000000",
              "message": "success",
              "data": [
                {
                  "orderNo": "7d76d611-0568-4f43-afb6-24cac7767365",
                  "fiatCurrency": "BRL",
                  "indicatedAmount": "10.00",
                  "amount": "10.00",
                  "totalFee": "0.00", // Trade fee
                  "method": "BankAccount", // Trade method
                  "status": "Expired", // Processing, Failed, Successful, Finished, Refunding, Refunded, Refund Failed, Order Partial credit Stopped
                  "createTime": 1626144956000,
                  "updateTime": 1626400907000
                }
              ],
              "total": 1,
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Fiat Endpoints",
      "path": "toc.fiat-endpoints.get-fiat-deposit-withdraw-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-fiat-deposit-withdraw-history-user_data",
      "name": "Get Fiat Deposit/Withdraw History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/fiat/payments",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/fiat/payments",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "transactionType": {
          "name": "transactionType",
          "type": "string",
          "required": true,
          "description": "0-buy,1-sell"
        },
        "beginTime": {
          "name": "beginTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": "default 1"
        },
        "rows": {
          "name": "rows",
          "type": "INT",
          "required": false,
          "description": "default 100, max 500"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "transactionType": {
              "name": "transactionType",
              "type": "string",
              "required": true,
              "description": "0-buy,1-sell"
            },
            "beginTime": {
              "name": "beginTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "default 1"
            },
            "rows": {
              "name": "rows",
              "type": "INT",
              "required": false,
              "description": "default 100, max 500"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "NumberString",
              "message": "string",
              "data": [
                {
                  "orderNo": "string",
                  "sourceAmount": "NumberString", // Fiat trade amount
                  "fiatCurrency": "string", // Fiat token
                  "obtainAmount": "NumberString", // Crypto trade amount
                  "cryptoCurrency": "string", // Crypto token
                  "totalFee": "NumberString", // Trade fee
                  "price": "NumberString",
                  "status": "string", // Processing, Completed, Failed, Refunded
                  "paymentMethod": "string",
                  "createTime": "number",
                  "updateTime": "number"
                }
              ],
              "total": "number",
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "code": "000000",
              "message": "success",
              "data": [
                {
                  "orderNo": "353fca443f06466db0c4dc89f94f027a",
                  "sourceAmount": "20.0", // Fiat trade amount
                  "fiatCurrency": "EUR", // Fiat token
                  "obtainAmount": "4.462", // Crypto trade amount
                  "cryptoCurrency": "LUNA", // Crypto token
                  "totalFee": "0.2", // Trade fee
                  "price": "4.437472",
                  "status": "Failed", // Processing, Completed, Failed, Refunded
                  "paymentMethod": "Credit Card",
                  "createTime": 1624529919000,
                  "updateTime": 1624529919000
                }
              ],
              "total": 1,
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Fiat Endpoints",
      "path": "toc.fiat-endpoints.get-fiat-payments-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-fiat-payments-history-user_data",
      "name": "Get Fiat Payments History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/c2c/orderMatch/listUserOrderHistory",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/c2c/orderMatch/listUserOrderHistory",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "tradeType": {
          "name": "tradeType",
          "type": "string",
          "required": true,
          "description": "BUY, SELL"
        },
        "startTimestamp": {
          "name": "startTimestamp",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTimestamp": {
          "name": "endTimestamp",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": "default 1"
        },
        "rows": {
          "name": "rows",
          "type": "INT",
          "required": false,
          "description": "default 100, max 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "tradeType": {
              "name": "tradeType",
              "type": "string",
              "required": true,
              "description": "BUY, SELL"
            },
            "startTimestamp": {
              "name": "startTimestamp",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTimestamp": {
              "name": "endTimestamp",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "default 1"
            },
            "rows": {
              "name": "rows",
              "type": "INT",
              "required": false,
              "description": "default 100, max 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "NumberString",
              "message": "string",
              "data": [
                {
                  "orderNumber": "NumberString",
                  "advNo": "NumberString",
                  "tradeType": "string",
                  "asset": "string",
                  "fiat": "string",
                  "fiatSymbol": "string",
                  "amount": "NumberString", // Quantity (in Crypto)
                  "totalPrice": "NumberString",
                  "unitPrice": "NumberString", // Unit Price (in Fiat)
                  "orderStatus": "string", // PENDING, TRADING, BUYER_PAYED, DISTRIBUTING, COMPLETED, IN_APPEAL, CANCELLED, CANCELLED_BY_SYSTEM
                  "createTime": "number",
                  "commission": "NumberString", // Transaction Fee (in Crypto)
                  "counterPartNickName": "string",
                  "advertisementRole": "string"
                }
              ],
              "total": "number",
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "code": "000000",
              "message": "success",
              "data": [
                {
                  "orderNumber": "20219644646554779648",
                  "advNo": "11218246497340923904",
                  "tradeType": "SELL",
                  "asset": "BUSD",
                  "fiat": "CNY",
                  "fiatSymbol": "￥",
                  "amount": "5000.00000000", // Quantity (in Crypto)
                  "totalPrice": "33400.00000000",
                  "unitPrice": "6.68", // Unit Price (in Fiat)
                  "orderStatus": "COMPLETED", // PENDING, TRADING, BUYER_PAYED, DISTRIBUTING, COMPLETED, IN_APPEAL, CANCELLED, CANCELLED_BY_SYSTEM
                  "createTime": 1619361369000,
                  "commission": "0", // Transaction Fee (in Crypto)
                  "counterPartNickName": "ab***",
                  "advertisementRole": "TAKER"
                }
              ],
              "total": 1,
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "C2C Endpoints",
      "path": "toc.c2c-endpoints.get-c2c-trade-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-c2c-trade-history-user_data",
      "name": "Get C2C Trade History (USER_DATA)"
    },
    {
      "description": "VIP loan is available for VIP users only.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/vip/ongoing/orders",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/vip/ongoing/orders",
      "hmacSHA256": false,
      "weights": {
        "IP": 400,
        "IP_text": "400"
      },
      "baseParams": {
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "collateralAccountId": {
          "name": "collateralAccountId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1, Default:1, Max: 1000."
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "Default: 10, Max: 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "collateralAccountId": {
              "name": "collateralAccountId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1, Default:1, Max: 1000."
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "Default: 10, Max: 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "orderId": "number",
                  "loanCoin": "string",
                  "totalDebt": "NumberString",
                  "loanRate": "NumberString", // "flexible rate" for flexible rate loan
                  "residualInterest": "NumberString",
                  "collateralAccountId": "string",
                  "collateralCoin": "string",
                  "totalCollateralValueAfterHaircut": "NumberString",
                  "lockedCollateralValue": "NumberString",
                  "currentLTV": "NumberString",
                  "expirationTime": "number", // 0 means open term
                  "loanDate": "NumberString",
                  "loanTerm": "string", //  "open term" for open term loan
                  "initialLtv": "string",
                  "marginCallLtv": "string",
                  "liquidationLtv": "string"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "orderId": 100000001,
                  "loanCoin": "BUSD",
                  "totalDebt": "10000",
                  "loanRate": "0.0123", // "flexible rate" for flexible rate loan
                  "residualInterest": "10.27687923",
                  "collateralAccountId": "12345678,23456789",
                  "collateralCoin": "BNB,BTC,ETH",
                  "totalCollateralValueAfterHaircut": "25000.27565492",
                  "lockedCollateralValue": "25000.27565492",
                  "currentLTV": "0.57",
                  "expirationTime": 1575018510000, // 0 means open term
                  "loanDate": "1676851200000",
                  "loanTerm": "30days", //  "open term" for open term loan
                  "initialLtv": "72%",
                  "marginCallLtv": "77%",
                  "liquidationLtv": "91%"
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "VIP Loans Endpoints",
      "path": "toc.vip-loans-endpoints.get-vip-loan-ongoing-orders-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-vip-loan-ongoing-orders-user_data",
      "name": "Get VIP Loan Ongoing Orders (USER_DATA)"
    },
    {
      "description": "VIP loan is available for VIP users only.",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/loan/vip/repay",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/loan/vip/repay",
      "hmacSHA256": false,
      "weights": {
        "UID": 6000,
        "UID_text": "6000"
      },
      "baseParams": {
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "loanCoin": "string",
              "repayAmount": "NumberString",
              "remainingPrincipal": "NumberString",
              "remainingInterest": "NumberString",
              "collateralCoin": "string",
              "currentLTV": "NumberString",
              "repayStatus": "string" // Repaid, Repaying, Failed
            }
          ],
          "responseExamples": [
            {
              "loanCoin": "BUSD",
              "repayAmount": "200.5",
              "remainingPrincipal": "100.5",
              "remainingInterest": "0",
              "collateralCoin": "BNB,BTC,ETH",
              "currentLTV": "0.25",
              "repayStatus": "Repaid" // Repaid, Repaying, Failed
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "VIP Loans Endpoints",
      "path": "toc.vip-loans-endpoints.vip-loan-repay-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#vip-loan-repay-trade",
      "name": "VIP Loan Repay (TRADE)"
    },
    {
      "description": "VIP loan is available for VIP users only.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/vip/repay/history",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/vip/repay/history",
      "hmacSHA256": false,
      "weights": {
        "IP": 400,
        "IP_text": "400"
      },
      "baseParams": {
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1, Default:1, Max: 1000"
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "Default: 10, Max: 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1, Default:1, Max: 1000"
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "Default: 10, Max: 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "loanCoin": "string",
                  "repayAmount": "NumberString",
                  "collateralCoin": "string",
                  "repayStatus": "string", // Repaid, Repaying, Failed
                  "loanDate": "NumberString",
                  "repayTime": "NumberString",
                  "orderId": "NumberString"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "loanCoin": "BUSD",
                  "repayAmount": "10000",
                  "collateralCoin": "BNB,BTC,ETH",
                  "repayStatus": "Repaid", // Repaid, Repaying, Failed
                  "loanDate": "1676851200000",
                  "repayTime": "1575018510000",
                  "orderId": "756783308056935434"
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "VIP Loans Endpoints",
      "path": "toc.vip-loans-endpoints.get-vip-loan-repayment-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-vip-loan-repayment-history-user_data",
      "name": "Get VIP Loan Repayment History (USER_DATA)"
    },
    {
      "description": "VIP loan is available for VIP users only.",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/loan/vip/renew",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/loan/vip/renew",
      "hmacSHA256": false,
      "weights": {
        "UID": 6000,
        "UID_text": "6000"
      },
      "baseParams": {
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "loanTerm": {
          "name": "loanTerm",
          "type": "INT",
          "required": false,
          "description": "30/60 days"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "loanTerm": {
              "name": "loanTerm",
              "type": "INT",
              "required": false,
              "description": "30/60 days"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "loanAccountId": "NumberString", //loan receiving account
              "loanCoin": "string",
              "loanAmount": "NumberString",
              "collateralAccountId": "string",
              "collateralCoin": "string",
              "loanTerm": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "loanAccountId": "12345678", //loan receiving account
              "loanCoin": "BTC",
              "loanAmount": "100.55",
              "collateralAccountId": "12345677,12345678,12345679",
              "collateralCoin": "BUSD,USDT,ETH",
              "loanTerm": "30"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "VIP Loans Endpoints",
      "path": "toc.vip-loans-endpoints.vip-loan-renew-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#vip-loan-renew-trade",
      "name": "VIP Loan Renew (TRADE)"
    },
    {
      "description": "VIP loan is available for VIP users only.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/vip/collateral/account",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/vip/collateral/account",
      "hmacSHA256": false,
      "weights": {
        "IP": 6000,
        "IP_text": "6000"
      },
      "baseParams": {
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "collateralAccountId": {
          "name": "collateralAccountId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "collateralAccountId": {
              "name": "collateralAccountId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "collateralAccountId": "NumberString",
                  "collateralCoin": "string"
                },
                null
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "collateralAccountId": "12345678",
                  "collateralCoin": "BNB,BTC,ETH"
                },
                {
                  "collateralAccountId": "23456789",
                  "collateralCoin": "BNB,BTC,ETH"
                }
              ],
              "total": 2
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "VIP Loans Endpoints",
      "path": "toc.vip-loans-endpoints.check-locked-value-of-vip-collateral-account-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#check-locked-value-of-vip-collateral-account-user_data",
      "name": "Check Locked Value of VIP Collateral Account (USER_DATA)"
    },
    {
      "description": "VIP loan is available for VIP users only.",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/loan/vip/borrow",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/loan/vip/borrow",
      "hmacSHA256": false,
      "weights": {
        "UID": 6000,
        "UID_text": "6000"
      },
      "baseParams": {
        "loanAccountId": {
          "name": "loanAccountId",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": true,
          "description": ""
        },
        "loanAmount": {
          "name": "loanAmount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "collateralAccountId": {
          "name": "collateralAccountId",
          "type": "string",
          "required": true,
          "description": "Multiple split by ,"
        },
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "string",
          "required": true,
          "description": "Multiple split by ,"
        },
        "isFlexibleRate": {
          "name": "isFlexibleRate",
          "type": "boolean",
          "required": true,
          "description": "Default: TRUE. TRUE : flexible rate; FALSE: fixed rate"
        },
        "loanTerm": {
          "name": "loanTerm",
          "type": "INT",
          "required": false,
          "description": "Mandatory for fixed rate. Optional for fixed interest rate. Eg: 30/60 days"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "loanAccountId": {
              "name": "loanAccountId",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": true,
              "description": ""
            },
            "loanAmount": {
              "name": "loanAmount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "collateralAccountId": {
              "name": "collateralAccountId",
              "type": "string",
              "required": true,
              "description": "Multiple split by ,"
            },
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "string",
              "required": true,
              "description": "Multiple split by ,"
            },
            "isFlexibleRate": {
              "name": "isFlexibleRate",
              "type": "boolean",
              "required": true,
              "description": "Default: TRUE. TRUE : flexible rate; FALSE: fixed rate"
            },
            "loanTerm": {
              "name": "loanTerm",
              "type": "INT",
              "required": false,
              "description": "Mandatory for fixed rate. Optional for fixed interest rate. Eg: 30/60 days"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "",
            "or"
          ],
          "responseTypes": [
            {
              "loanAccountId": "NumberString", //loan receiving account
              "requestId": "NumberString",
              "loanCoin": "string",
              "isFlexibleRate": "string",
              "loanAmount": "NumberString",
              "collateralAccountId": "string",
              "collateralCoin": "string",
              "loanTerm": "NumberString"
            },
            {
              "loanAccountId": "NumberString", //loan receiving account
              "requestId": "NumberString",
              "loanCoin": "string",
              "isFlexibleRate": "string",
              "loanAmount": "NumberString",
              "collateralAccountId": "string",
              "collateralCoin": "string"
            }
          ],
          "responseExamples": [
            {
              "loanAccountId": "12345678", //loan receiving account
              "requestId": "12345678",
              "loanCoin": "BTC",
              "isFlexibleRate": "No",
              "loanAmount": "100.55",
              "collateralAccountId": "12345678,12345678,12345678",
              "collateralCoin": "BUSD,USDT,ETH",
              "loanTerm": "30"
            },
            {
              "loanAccountId": "12345678", //loan receiving account
              "requestId": "12345678",
              "loanCoin": "BTC",
              "isFlexibleRate": "Yes",
              "loanAmount": "100.55",
              "collateralAccountId": "12345678,12345678,12345678",
              "collateralCoin": "BUSD,USDT,ETH"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "VIP Loans Endpoints",
      "path": "toc.vip-loans-endpoints.vip-loan-borrow-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#vip-loan-borrow-trade",
      "name": "VIP Loan Borrow (TRADE)"
    },
    {
      "description": "Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/vip/loanable/data",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/vip/loanable/data",
      "hmacSHA256": false,
      "weights": {
        "IP": 400,
        "IP_text": "400"
      },
      "baseParams": {
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "vipLevel": {
          "name": "vipLevel",
          "type": "INT",
          "required": false,
          "description": "default:user's vip level"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "vipLevel": {
              "name": "vipLevel",
              "type": "INT",
              "required": false,
              "description": "default:user's vip level"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "loanCoin": "string",
                  "_flexibleHourlyInterestRate": "NumberString",
                  "_flexibleYearlyInterestRate": "NumberString",
                  "_30dDailyInterestRate": "NumberString",
                  "_30dYearlyInterestRate": "NumberString",
                  "_60dDailyInterestRate": "NumberString",
                  "_60dYearlyInterestRate": "NumberString",
                  "minLimit": "NumberString",
                  "maxLimit": "NumberString",
                  "vipLevel": "number"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "loanCoin": "BUSD",
                  "_flexibleHourlyInterestRate": "0.000103",
                  "_flexibleYearlyInterestRate": "0.548595",
                  "_30dDailyInterestRate": "0.000136",
                  "_30dYearlyInterestRate": "0.03450",
                  "_60dDailyInterestRate": "0.000145",
                  "_60dYearlyInterestRate": "0.04103",
                  "minLimit": "100",
                  "maxLimit": "1000000",
                  "vipLevel": 1
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "VIP Loans Endpoints",
      "path": "toc.vip-loans-endpoints.get-loanable-assets-data-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-loanable-assets-data-user_data",
      "name": "Get Loanable Assets Data (USER_DATA)"
    },
    {
      "description": "Get Collateral Asset Data",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/vip/collateral/data",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/vip/collateral/data",
      "hmacSHA256": false,
      "weights": {
        "IP": 400,
        "IP_text": "400"
      },
      "baseParams": {
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "collateralCoin": "string",
                  "_1stCollateralRatio": "string",
                  "_1stCollateralRange": "string",
                  "_2ndCollateralRatio": "string",
                  "_2ndCollateralRange": "string",
                  "_3rdCollateralRatio": "string",
                  "_3rdCollateralRange": "string",
                  "_4thCollateralRatio": "string",
                  "_4thCollateralRange": "string"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "collateralCoin": "BUSD",
                  "_1stCollateralRatio": "100%",
                  "_1stCollateralRange": "1-10000000",
                  "_2ndCollateralRatio": "80%",
                  "_2ndCollateralRange": "10000000-100000000",
                  "_3rdCollateralRatio": "60%",
                  "_3rdCollateralRange": "100000000-1000000000",
                  "_4thCollateralRatio": "0%",
                  "_4thCollateralRange": ">10000000000"
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "VIP Loans Endpoints",
      "path": "toc.vip-loans-endpoints.get-collateral-asset-data-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-collateral-asset-data-user_data",
      "name": "Get Collateral Asset Data (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/vip/request/data",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/vip/request/data",
      "hmacSHA256": false,
      "weights": {
        "UID": 400,
        "UID_text": "400"
      },
      "baseParams": {
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1, Default:1, Max: 1000"
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "Default: 10, Max: 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1, Default:1, Max: 1000"
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "Default: 10, Max: 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "loanAccountId": "NumberString", //loan receiving account
                  "orderId": "NumberString",
                  "requestId": "NumberString",
                  "loanCoin": "string",
                  "loanAmount": "NumberString",
                  "collateralAccountId": "string",
                  "collateralCoin": "string",
                  "loanTerm": "NumberString",
                  "status": "string", // Accruing_Interest, Overdue, Liquidating, Repaying, Repaid, Liquidated, Pending, Failed
                  "loanDate": "NumberString"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "loanAccountId": "12345678", //loan receiving account
                  "orderId": "12345678",
                  "requestId": "12345678",
                  "loanCoin": "BTC",
                  "loanAmount": "100.55",
                  "collateralAccountId": "12345678,12345678,12345678",
                  "collateralCoin": "BUSD,USDT,ETH",
                  "loanTerm": "30",
                  "status": "Repaid", // Accruing_Interest, Overdue, Liquidating, Repaying, Repaid, Liquidated, Pending, Failed
                  "loanDate": "1676851200000"
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "VIP Loans Endpoints",
      "path": "toc.vip-loans-endpoints.query-application-status-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-application-status-user_data",
      "name": "Query Application Status (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/vip/request/interestRate",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/vip/request/interestRate",
      "hmacSHA256": false,
      "weights": {
        "UID": 400,
        "UID_text": "400"
      },
      "baseParams": {
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": true,
          "description": "Max 10 assets, Multiple split by \",\""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": true,
              "description": "Max 10 assets, Multiple split by \",\""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "asset": "string",
                "flexibleDailyInterestRate": "NumberString",
                "flexibleYearlyInterestRate": "NumberString",
                "time": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "asset": "BUSD",
                "flexibleDailyInterestRate": "0.001503",
                "flexibleYearlyInterestRate": "0.548595",
                "time": 1577233578000
              },
              {
                "asset": "BTC",
                "flexibleDailyInterestRate": "0.001503",
                "flexibleYearlyInterestRate": "0.548595",
                "time": 1577233562000
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "VIP Loans Endpoints",
      "path": "toc.vip-loans-endpoints.get-borrow-interest-rate-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-borrow-interest-rate-user_data",
      "name": "Get Borrow Interest Rate (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/income",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/income",
      "hmacSHA256": false,
      "weights": {
        "UID": 6000,
        "UID_text": "6000"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "type": {
          "name": "type",
          "type": "string",
          "required": false,
          "description": "All types will be returned by default. Enum：borrowIn ,collateralSpent, repayAmount, collateralReturn(Collateral return after repayment), addCollateral, removeCollateral, collateralReturnAfterLiquidation"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "default 20, max 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "type": {
              "name": "type",
              "type": "string",
              "required": false,
              "description": "All types will be returned by default. Enum：borrowIn ,collateralSpent, repayAmount, collateralReturn(Collateral return after repayment), addCollateral, removeCollateral, collateralReturnAfterLiquidation"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "default 20, max 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "asset": "string",
                "type": "string",
                "amount": "NumberString",
                "timestamp": "number",
                "tranId": "NumberString"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "asset": "BUSD",
                "type": "borrowIn",
                "amount": "100",
                "timestamp": 1633771139847,
                "tranId": "80423589583"
              },
              {
                "asset": "BUSD",
                "type": "borrowIn",
                "amount": "100",
                "timestamp": 1634638371496,
                "tranId": "81685123491"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.get-crypto-loans-income-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-crypto-loans-income-history-user_data",
      "name": "Get Crypto Loans Income History (USER_DATA)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /sapi/v1/loan/borrow",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/loan/borrow",
      "hmacSHA256": false,
      "weights": {
        "UID": 36000,
        "UID_text": "36000"
      },
      "baseParams": {
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": true,
          "description": ""
        },
        "loanAmount": {
          "name": "loanAmount",
          "type": "DECIMAL",
          "required": false,
          "description": "Mandatory when collateralAmount is empty"
        },
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "string",
          "required": true,
          "description": ""
        },
        "collateralAmount": {
          "name": "collateralAmount",
          "type": "DECIMAL",
          "required": false,
          "description": "Mandatory when loanAmount is empty"
        },
        "loanTerm": {
          "name": "loanTerm",
          "type": "INT",
          "required": true,
          "description": "7/30 days"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": true,
              "description": ""
            },
            "loanAmount": {
              "name": "loanAmount",
              "type": "DECIMAL",
              "required": false,
              "description": "Mandatory when collateralAmount is empty"
            },
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "string",
              "required": true,
              "description": ""
            },
            "collateralAmount": {
              "name": "collateralAmount",
              "type": "DECIMAL",
              "required": false,
              "description": "Mandatory when loanAmount is empty"
            },
            "loanTerm": {
              "name": "loanTerm",
              "type": "INT",
              "required": true,
              "description": "7/30 days"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "loanCoin": "string",
              "loanAmount": "NumberString",
              "collateralCoin": "string",
              "collateralAmount": "NumberString",
              "hourlyInterestRate": "NumberString",
              "orderId": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "loanCoin": "BUSD",
              "loanAmount": "100.5",
              "collateralCoin": "BNB",
              "collateralAmount": "50.5",
              "hourlyInterestRate": "0.001234",
              "orderId": "100000001"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.borrow-crypto-loan-borrow-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#borrow-crypto-loan-borrow-trade",
      "name": "Borrow - Crypto Loan Borrow (TRADE)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/borrow/history",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/borrow/history",
      "hmacSHA256": false,
      "weights": {
        "IP": 400,
        "IP_text": "400"
      },
      "baseParams": {
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": "orderId in POST /sapi/v1/loan/borrow"
        },
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Current querying page. Start from 1; default: 1; max: 1000."
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "Default: 10; max: 100."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": "orderId in POST /sapi/v1/loan/borrow"
            },
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Current querying page. Start from 1; default: 1; max: 1000."
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "Default: 10; max: 100."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "orderId": "number",
                  "loanCoin": "string",
                  "initialLoanAmount": "NumberString",
                  "hourlyInterestRate": "NumberString",
                  "loanTerm": "NumberString",
                  "collateralCoin": "string",
                  "initialCollateralAmount": "NumberString",
                  "borrowTime": "number",
                  "status": "string" // Accruing_Interest, Overdue, Liquidating, Repaying, Repaid, Liquidated, Pending, Failed
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "orderId": 100000001,
                  "loanCoin": "BUSD",
                  "initialLoanAmount": "10000",
                  "hourlyInterestRate": "0.000057",
                  "loanTerm": "7",
                  "collateralCoin": "BNB",
                  "initialCollateralAmount": "49.27565492",
                  "borrowTime": 1575018510000,
                  "status": "Repaid" // Accruing_Interest, Overdue, Liquidating, Repaying, Repaid, Liquidated, Pending, Failed
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.borrow-get-loan-borrow-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#borrow-get-loan-borrow-history-user_data",
      "name": "Borrow - Get Loan Borrow History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/ongoing/orders",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/ongoing/orders",
      "hmacSHA256": false,
      "weights": {
        "IP": 300,
        "IP_text": "300"
      },
      "baseParams": {
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": "orderId in POST /sapi/v1/loan/borrow"
        },
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Current querying page. Start from 1; default: 1; max: 1000"
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "Default: 10; max: 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": "orderId in POST /sapi/v1/loan/borrow"
            },
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Current querying page. Start from 1; default: 1; max: 1000"
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "Default: 10; max: 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "orderId": "number",
                  "loanCoin": "string",
                  "totalDebt": "NumberString",
                  "residualInterest": "NumberString",
                  "collateralCoin": "string",
                  "collateralAmount": "NumberString",
                  "currentLTV": "NumberString",
                  "expirationTime": "number"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "orderId": 100000001,
                  "loanCoin": "BUSD",
                  "totalDebt": "10000",
                  "residualInterest": "10.27687923",
                  "collateralCoin": "BNB",
                  "collateralAmount": "49.27565492",
                  "currentLTV": "0.57",
                  "expirationTime": 1575018510000
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.borrow-get-loan-ongoing-orders-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#borrow-get-loan-ongoing-orders-user_data",
      "name": "Borrow - Get Loan Ongoing Orders (USER_DATA)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /sapi/v1/loan/repay",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/loan/repay",
      "hmacSHA256": false,
      "weights": {
        "UID": 6000,
        "UID_text": "6000"
      },
      "baseParams": {
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "type": {
          "name": "type",
          "type": "INT",
          "required": false,
          "description": "Default: 1. 1 for \"repay with borrowed coin\"; 2 for \"repay with collateral\"."
        },
        "collateralReturn": {
          "name": "collateralReturn",
          "type": "boolean",
          "required": false,
          "description": "Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "type": {
              "name": "type",
              "type": "INT",
              "required": false,
              "description": "Default: 1. 1 for \"repay with borrowed coin\"; 2 for \"repay with collateral\"."
            },
            "collateralReturn": {
              "name": "collateralReturn",
              "type": "boolean",
              "required": false,
              "description": "Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "",
            ""
          ],
          "responseTypes": [
            {
              "loanCoin": "string",
              "remainingPrincipal": "NumberString",
              "remainingInterest": "NumberString",
              "collateralCoin": "string",
              "remainingCollateral": "NumberString",
              "currentLTV": "NumberString",
              "repayStatus": "string" // Repaid, Repaying
            },
            {
              "loanCoin": "string",
              "collateralCoin": "string",
              "repayStatus": "string" // Repaid, Repaying
            }
          ],
          "responseExamples": [
            {
              "loanCoin": "BUSD",
              "remainingPrincipal": "100.5",
              "remainingInterest": "0",
              "collateralCoin": "BNB",
              "remainingCollateral": "5.253",
              "currentLTV": "0.25",
              "repayStatus": "Repaid" // Repaid, Repaying
            },
            {
              "loanCoin": "BUSD",
              "collateralCoin": "BNB",
              "repayStatus": "Repaying" // Repaid, Repaying
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.repay-crypto-loan-repay-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#repay-crypto-loan-repay-trade",
      "name": "Repay - Crypto Loan Repay (TRADE)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/repay/history",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/repay/history",
      "hmacSHA256": false,
      "weights": {
        "IP": 400,
        "IP_text": "400"
      },
      "baseParams": {
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Current querying page. Start from 1; default: 1; max: 1000"
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "Default: 10; max: 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Current querying page. Start from 1; default: 1; max: 1000"
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "Default: 10; max: 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "loanCoin": "string",
                  "repayAmount": "NumberString",
                  "collateralCoin": "string",
                  "collateralUsed": "NumberString",
                  "collateralReturn": "NumberString",
                  "repayType": "NumberString", // 1 for "repay with borrowed coin", 2 for "repay with collateral"
                  "repayStatus": "string", // Repaid, Repaying, Failed
                  "repayTime": "number",
                  "orderId": "number"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "loanCoin": "BUSD",
                  "repayAmount": "10000",
                  "collateralCoin": "BNB",
                  "collateralUsed": "0",
                  "collateralReturn": "49.27565492",
                  "repayType": "1", // 1 for "repay with borrowed coin", 2 for "repay with collateral"
                  "repayStatus": "Repaid", // Repaid, Repaying, Failed
                  "repayTime": 1575018510000,
                  "orderId": 756783308056935400
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.repay-get-loan-repayment-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#repay-get-loan-repayment-history-user_data",
      "name": "Repay - Get Loan Repayment History (USER_DATA)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /sapi/v1/loan/adjust/ltv",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/loan/adjust/ltv",
      "hmacSHA256": false,
      "weights": {
        "UID": 6000,
        "UID_text": "6000"
      },
      "baseParams": {
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "direction": {
          "name": "direction",
          "type": "\"ADDITIONAL\"|\"REDUCED\"",
          "required": true,
          "description": "\"ADDITIONAL\", \"REDUCED\""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "direction": {
              "name": "direction",
              "type": "\"ADDITIONAL\"|\"REDUCED\"",
              "required": true,
              "description": "\"ADDITIONAL\", \"REDUCED\""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "loanCoin": "string",
              "collateralCoin": "string",
              "direction": "string",
              "amount": "NumberString",
              "currentLTV": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "loanCoin": "BUSD",
              "collateralCoin": "BNB",
              "direction": "ADDITIONAL",
              "amount": "5.235",
              "currentLTV": "0.52"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.adjust-ltv-crypto-loan-adjust-ltv-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#adjust-ltv-crypto-loan-adjust-ltv-trade",
      "name": "Adjust LTV - Crypto Loan Adjust LTV (TRADE)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/ltv/adjustment/history",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/ltv/adjustment/history",
      "hmacSHA256": false,
      "weights": {
        "IP": 400,
        "IP_text": "400"
      },
      "baseParams": {
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Current querying page. Start from 1; default: 1; max: 1000"
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "Default: 10; max: 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Current querying page. Start from 1; default: 1; max: 1000"
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "Default: 10; max: 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "loanCoin": "string",
                  "collateralCoin": "string",
                  "direction": "string",
                  "amount": "NumberString",
                  "preLTV": "NumberString",
                  "afterLTV": "NumberString",
                  "adjustTime": "number",
                  "orderId": "number"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "loanCoin": "BUSD",
                  "collateralCoin": "BNB",
                  "direction": "ADDITIONAL",
                  "amount": "5.235",
                  "preLTV": "0.78",
                  "afterLTV": "0.56",
                  "adjustTime": 1575018510000,
                  "orderId": 756783308056935400
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.adjust-ltv-get-loan-ltv-adjustment-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#adjust-ltv-get-loan-ltv-adjustment-history-user_data",
      "name": "Adjust LTV - Get Loan LTV Adjustment History (USER_DATA)"
    },
    {
      "description": "Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/loanable/data",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/loanable/data",
      "hmacSHA256": false,
      "weights": {
        "IP": 400,
        "IP_text": "400"
      },
      "baseParams": {
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "vipLevel": {
          "name": "vipLevel",
          "type": "INT",
          "required": false,
          "description": "Default: user's vip level. Send \"-1\" to check specified configuration"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "vipLevel": {
              "name": "vipLevel",
              "type": "INT",
              "required": false,
              "description": "Default: user's vip level. Send \"-1\" to check specified configuration"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "loanCoin": "string",
                  "_7dHourlyInterestRate": "NumberString",
                  "_7dDailyInterestRate": "NumberString",
                  "_14dHourlyInterestRate": "NumberString",
                  "_14dDailyInterestRate": "NumberString",
                  "_30dHourlyInterestRate": "NumberString",
                  "_30dDailyInterestRate": "NumberString",
                  "_90dHourlyInterestRate": "NumberString",
                  "_90dDailyInterestRate": "NumberString",
                  "_180dHourlyInterestRate": "NumberString",
                  "_180dDailyInterestRate": "NumberString",
                  "minLimit": "NumberString",
                  "maxLimit": "NumberString",
                  "vipLevel": "number"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "loanCoin": "BUSD",
                  "_7dHourlyInterestRate": "0.00000491",
                  "_7dDailyInterestRate": "0.000118",
                  "_14dHourlyInterestRate": "0.00000491",
                  "_14dDailyInterestRate": "0.000118",
                  "_30dHourlyInterestRate": "0.00000567",
                  "_30dDailyInterestRate": "0.000136",
                  "_90dHourlyInterestRate": "0.00000596",
                  "_90dDailyInterestRate": "0.000143",
                  "_180dHourlyInterestRate": "0.00000631",
                  "_180dDailyInterestRate": "0.000151",
                  "minLimit": "100",
                  "maxLimit": "1000000",
                  "vipLevel": 1
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.get-loanable-assets-data-user_data-2",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-loanable-assets-data-user_data-2",
      "name": "Get Loanable Assets Data (USER_DATA)"
    },
    {
      "description": "Get LTV information and collateral limit of collateral assets. The collateral limit is shown in USD value.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/collateral/data",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/collateral/data",
      "hmacSHA256": false,
      "weights": {
        "IP": 400,
        "IP_text": "400"
      },
      "baseParams": {
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "vipLevel": {
          "name": "vipLevel",
          "type": "INT",
          "required": false,
          "description": "Default: user's vip level. Send \"-1\" to check specified configuration"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "vipLevel": {
              "name": "vipLevel",
              "type": "INT",
              "required": false,
              "description": "Default: user's vip level. Send \"-1\" to check specified configuration"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "collateralCoin": "string",
                  "initialLTV": "NumberString",
                  "marginCallLTV": "NumberString",
                  "liquidationLTV": "NumberString",
                  "maxLimit": "NumberString",
                  "vipLevel": "number"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "collateralCoin": "BNB",
                  "initialLTV": "0.65",
                  "marginCallLTV": "0.75",
                  "liquidationLTV": "0.83",
                  "maxLimit": "1000000",
                  "vipLevel": 1
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.get-collateral-assets-data-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-collateral-assets-data-user_data",
      "name": "Get Collateral Assets Data (USER_DATA)"
    },
    {
      "description": "Get the the rate of collateral coin / loan coin when using collateral repay, the rate will be valid within 8 second.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/repay/collateral/rate",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/repay/collateral/rate",
      "hmacSHA256": false,
      "weights": {
        "IP": 6000,
        "IP_text": "6000"
      },
      "baseParams": {
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": true,
          "description": ""
        },
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "string",
          "required": true,
          "description": ""
        },
        "repayAmount": {
          "name": "repayAmount",
          "type": "DECIMAL",
          "required": true,
          "description": "repay amount of loanCoin"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": true,
              "description": ""
            },
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "string",
              "required": true,
              "description": ""
            },
            "repayAmount": {
              "name": "repayAmount",
              "type": "DECIMAL",
              "required": true,
              "description": "repay amount of loanCoin"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "loanlCoin": "string",
              "collateralCoin": "string",
              "repayAmount": "NumberString",
              "rate": "NumberString" // rate of collateral coin/loan coin
            }
          ],
          "responseExamples": [
            {
              "loanlCoin": "BUSD",
              "collateralCoin": "BNB",
              "repayAmount": "1000",
              "rate": "300.36781234" // rate of collateral coin/loan coin
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.check-collateral-repay-rate-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#check-collateral-repay-rate-user_data",
      "name": "Check Collateral Repay Rate (USER_DATA)"
    },
    {
      "description": "Customize margin call for ongoing orders only.",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/loan/customize/margin_call",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/loan/customize/margin_call",
      "hmacSHA256": false,
      "weights": {
        "UID": 6000,
        "UID_text": "6000"
      },
      "baseParams": {
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": "Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only."
        },
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "string",
          "required": false,
          "description": "Mandatory when orderID is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only."
        },
        "marginCall": {
          "name": "marginCall",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": "Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only."
            },
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "string",
              "required": false,
              "description": "Mandatory when orderID is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only."
            },
            "marginCall": {
              "name": "marginCall",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "orderId": "NumberString",
                  "collateralCoin": "string",
                  "preMarginCall": "NumberString",
                  "afterMarginCall": "NumberString",
                  "customizeTime": "number"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "orderId": "100000001",
                  "collateralCoin": "BNB",
                  "preMarginCall": "0.8",
                  "afterMarginCall": "0.7",
                  "customizeTime": 1575018510000
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.crypto-loan-customize-margin-call-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#crypto-loan-customize-margin-call-trade",
      "name": "Crypto Loan Customize Margin Call (TRADE)"
    },
    {
      "description": "Please switch to:",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/loan/flexible/borrow",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/loan/flexible/borrow",
      "hmacSHA256": false,
      "weights": {
        "UID": 6000,
        "UID_text": "6000"
      },
      "baseParams": {
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": true,
          "description": ""
        },
        "loanAmount": {
          "name": "loanAmount",
          "type": "DECIMAL",
          "required": false,
          "description": "Mandatory when collateralAmount is empty"
        },
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "string",
          "required": true,
          "description": ""
        },
        "collateralAmount": {
          "name": "collateralAmount",
          "type": "DECIMAL",
          "required": false,
          "description": "Mandatory when loanAmount is empty"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": true,
              "description": ""
            },
            "loanAmount": {
              "name": "loanAmount",
              "type": "DECIMAL",
              "required": false,
              "description": "Mandatory when collateralAmount is empty"
            },
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "string",
              "required": true,
              "description": ""
            },
            "collateralAmount": {
              "name": "collateralAmount",
              "type": "DECIMAL",
              "required": false,
              "description": "Mandatory when loanAmount is empty"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "loanCoin": "string",
              "loanAmount": "NumberString",
              "collateralCoin": "string",
              "collateralAmount": "NumberString",
              "status": "string" //Succeeds, Failed, Processing
            }
          ],
          "responseExamples": [
            {
              "loanCoin": "BUSD",
              "loanAmount": "100.5",
              "collateralCoin": "BNB",
              "collateralAmount": "50.5",
              "status": "Succeeds" //Succeeds, Failed, Processing
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.borrow-flexible-loan-borrow-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#borrow-flexible-loan-borrow-trade",
      "name": "Borrow - Flexible Loan Borrow (TRADE)"
    },
    {
      "description": "Please switch to:",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/flexible/ongoing/orders",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/flexible/ongoing/orders",
      "hmacSHA256": false,
      "weights": {
        "IP": 300,
        "IP_text": "300"
      },
      "baseParams": {
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Current querying page. Start from 1; default: 1; max: 1000"
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "Default: 10; max: 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Current querying page. Start from 1; default: 1; max: 1000"
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "Default: 10; max: 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "loanCoin": "string",
                  "totalDebt": "NumberString",
                  "collateralCoin": "string",
                  "collateralAmount": "NumberString",
                  "currentLTV": "NumberString"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "loanCoin": "BUSD",
                  "totalDebt": "10000",
                  "collateralCoin": "BNB",
                  "collateralAmount": "49.27565492",
                  "currentLTV": "0.57"
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.borrow-get-flexible-loan-ongoing-orders-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#borrow-get-flexible-loan-ongoing-orders-user_data",
      "name": "Borrow - Get Flexible Loan Ongoing Orders (USER_DATA)"
    },
    {
      "description": "Please switch to:",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/flexible/borrow/history",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/flexible/borrow/history",
      "hmacSHA256": false,
      "weights": {
        "IP": 400,
        "IP_text": "400"
      },
      "baseParams": {
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Current querying page. Start from 1; default: 1; max: 1000"
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "Default: 10; max: 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Current querying page. Start from 1; default: 1; max: 1000"
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "Default: 10; max: 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "loanCoin": "string",
                  "initialLoanAmount": "NumberString",
                  "collateralCoin": "string",
                  "initialCollateralAmount": "NumberString",
                  "borrowTime": "number",
                  "status": "string" //Succeeds, Failed, Processing
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "loanCoin": "BUSD",
                  "initialLoanAmount": "10000",
                  "collateralCoin": "BNB",
                  "initialCollateralAmount": "49.27565492",
                  "borrowTime": 1575018510000,
                  "status": "Succeeds" //Succeeds, Failed, Processing
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.borrow-get-flexible-loan-borrow-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#borrow-get-flexible-loan-borrow-history-user_data",
      "name": "Borrow - Get Flexible Loan Borrow History (USER_DATA)"
    },
    {
      "description": "Please switch to:",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/loan/flexible/repay",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/loan/flexible/repay",
      "hmacSHA256": false,
      "weights": {
        "UID": 6000,
        "UID_text": "6000"
      },
      "baseParams": {
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": true,
          "description": ""
        },
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "repayAmount": {
          "name": "repayAmount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "collateralReturn": {
          "name": "collateralReturn",
          "type": "boolean",
          "required": false,
          "description": "Default: TRUE. TRUE: Return extra collateral to earn account; FALSE: Keep extra collateral in the order, and lower LTV."
        },
        "fullRepayment": {
          "name": "fullRepayment",
          "type": "boolean",
          "required": false,
          "description": "Default: FALSE. TRUE: Full repayment; FALSE: Partial repayment, based on loanAmount"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": true,
              "description": ""
            },
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "repayAmount": {
              "name": "repayAmount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "collateralReturn": {
              "name": "collateralReturn",
              "type": "boolean",
              "required": false,
              "description": "Default: TRUE. TRUE: Return extra collateral to earn account; FALSE: Keep extra collateral in the order, and lower LTV."
            },
            "fullRepayment": {
              "name": "fullRepayment",
              "type": "boolean",
              "required": false,
              "description": "Default: FALSE. TRUE: Full repayment; FALSE: Partial repayment, based on loanAmount"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "loanCoin": "string",
              "collateralCoin": "string",
              "remainingDebt": "NumberString",
              "remainingCollateral": "NumberString",
              "fullRepayment": "boolean",
              "currentLTV": "NumberString",
              "repayStatus": "string" // Repaid, Repaying, Failed
            }
          ],
          "responseExamples": [
            {
              "loanCoin": "BUSD",
              "collateralCoin": "BNB",
              "remainingDebt": "100.5",
              "remainingCollateral": "5.253",
              "fullRepayment": false,
              "currentLTV": "0.25",
              "repayStatus": "Repaid" // Repaid, Repaying, Failed
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.repay-flexible-loan-repay-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#repay-flexible-loan-repay-trade",
      "name": "Repay - Flexible Loan Repay (TRADE)"
    },
    {
      "description": "Please switch to:",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/flexible/repay/history",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/flexible/repay/history",
      "hmacSHA256": false,
      "weights": {
        "IP": 400,
        "IP_text": "400"
      },
      "baseParams": {
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Current querying page. Start from 1; default: 1; max: 1000"
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "Default: 10; max: 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Current querying page. Start from 1; default: 1; max: 1000"
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "Default: 10; max: 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "loanCoin": "string",
                  "repayAmount": "NumberString",
                  "collateralCoin": "string",
                  "collateralReturn": "NumberString",
                  "repayStatus": "string", // Repaid, Repaying, Failed
                  "repayTime": "number"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "loanCoin": "BUSD",
                  "repayAmount": "10000",
                  "collateralCoin": "BNB",
                  "collateralReturn": "49.27565492",
                  "repayStatus": "Repaid", // Repaid, Repaying, Failed
                  "repayTime": 1575018510000
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.repay-get-flexible-loan-repayment-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#repay-get-flexible-loan-repayment-history-user_data",
      "name": "Repay - Get Flexible Loan Repayment History (USER_DATA)"
    },
    {
      "description": "Please switch to:",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/loan/flexible/adjust/ltv",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/loan/flexible/adjust/ltv",
      "hmacSHA256": false,
      "weights": {
        "UID": 6000,
        "UID_text": "6000"
      },
      "baseParams": {
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": true,
          "description": ""
        },
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "string",
          "required": true,
          "description": ""
        },
        "adjustmentAmount": {
          "name": "adjustmentAmount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "direction": {
          "name": "direction",
          "type": "\"ADDITIONAL\"|\"REDUCED\"",
          "required": true,
          "description": "\"ADDITIONAL\", \"REDUCED\""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": true,
              "description": ""
            },
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "string",
              "required": true,
              "description": ""
            },
            "adjustmentAmount": {
              "name": "adjustmentAmount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "direction": {
              "name": "direction",
              "type": "\"ADDITIONAL\"|\"REDUCED\"",
              "required": true,
              "description": "\"ADDITIONAL\", \"REDUCED\""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "loanCoin": "string",
              "collateralCoin": "string",
              "direction": "string",
              "adjustmentAmount": "NumberString",
              "currentLTV": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "loanCoin": "BUSD",
              "collateralCoin": "BNB",
              "direction": "ADDITIONAL",
              "adjustmentAmount": "5.235",
              "currentLTV": "0.52"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.adjust-ltv-flexible-loan-adjust-ltv-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#adjust-ltv-flexible-loan-adjust-ltv-trade",
      "name": "Adjust LTV - Flexible Loan Adjust LTV (TRADE)"
    },
    {
      "description": "Please switch to:",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/flexible/ltv/adjustment/history",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/flexible/ltv/adjustment/history",
      "hmacSHA256": false,
      "weights": {
        "IP": 400,
        "IP_text": "400"
      },
      "baseParams": {
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Current querying page. Start from 1; default: 1; max: 1000"
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "Default: 10; max: 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Current querying page. Start from 1; default: 1; max: 1000"
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "Default: 10; max: 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "loanCoin": "string",
                  "collateralCoin": "string",
                  "direction": "string",
                  "collateralAmount": "NumberString",
                  "preLTV": "NumberString",
                  "afterLTV": "NumberString",
                  "adjustTime": "number"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "loanCoin": "BUSD",
                  "collateralCoin": "BNB",
                  "direction": "ADDITIONAL",
                  "collateralAmount": "5.235",
                  "preLTV": "0.78",
                  "afterLTV": "0.56",
                  "adjustTime": 1575018510000
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.adjust-ltv-get-flexible-loan-ltv-adjustment-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#adjust-ltv-get-flexible-loan-ltv-adjustment-history-user_data",
      "name": "Adjust LTV - Get Flexible Loan LTV Adjustment History (USER_DATA)"
    },
    {
      "description": "Please switch to:",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/flexible/loanable/data",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/flexible/loanable/data",
      "hmacSHA256": false,
      "weights": {
        "IP": 400,
        "IP_text": "400"
      },
      "baseParams": {
        "loanCoin": {
          "name": "loanCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "loanCoin": {
              "name": "loanCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "loanCoin": "string",
                  "flexibleInterestRate": "NumberString",
                  "flexibleMinLimit": "NumberString",
                  "flexibleMaxLimit": "NumberString"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "loanCoin": "BUSD",
                  "flexibleInterestRate": "0.00000491",
                  "flexibleMinLimit": "100",
                  "flexibleMaxLimit": "1000000"
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.get-flexible-loan-assets-data-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-flexible-loan-assets-data-user_data",
      "name": "Get Flexible Loan Assets Data (USER_DATA)"
    },
    {
      "description": "Please switch to:",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/loan/flexible/collateral/data",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/loan/flexible/collateral/data",
      "hmacSHA256": false,
      "weights": {
        "IP": 400,
        "IP_text": "400"
      },
      "baseParams": {
        "collateralCoin": {
          "name": "collateralCoin",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "collateralCoin": {
              "name": "collateralCoin",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "collateralCoin": "string",
                  "initialLTV": "NumberString",
                  "marginCallLTV": "NumberString",
                  "liquidationLTV": "NumberString",
                  "maxLimit": "NumberString"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "collateralCoin": "BNB",
                  "initialLTV": "0.65",
                  "marginCallLTV": "0.75",
                  "liquidationLTV": "0.83",
                  "maxLimit": "1000000"
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Crypto Loans Endpoints",
      "path": "toc.crypto-loans-endpoints.get-flexible-loan-collateral-assets-data-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-flexible-loan-collateral-assets-data-user_data",
      "name": "Get Flexible Loan Collateral Assets Data (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/copyTrading/futures/userStatus",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/copyTrading/futures/userStatus",
      "hmacSHA256": false,
      "weights": {
        "UID": 20,
        "UID_text": "20"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "NumberString",
              "message": "string",
              "data": {
                "isLeadTrader": "boolean",
                "time": "number"
              },
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "code": "000000",
              "message": "success",
              "data": {
                "isLeadTrader": true,
                "time": 1717382310843
              },
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Copy Trading Endpoints",
      "path": "toc.copy-trading-endpoints.get-futures-lead-trader-status-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-futures-lead-trader-status-user_data",
      "name": "Get Futures Lead Trader Status (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/copyTrading/futures/leadSymbol",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/copyTrading/futures/leadSymbol",
      "hmacSHA256": false,
      "weights": {
        "UID": 20,
        "UID_text": "20"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "NumberString",
              "message": "string",
              "data": [
                {
                  "symbol": "string",
                  "baseAsset": "string",
                  "quoteAsset": "string"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "code": "000000",
              "message": "success",
              "data": [
                {
                  "symbol": "BTCUSDT",
                  "baseAsset": "BTC",
                  "quoteAsset": "USDT"
                },
                {
                  "symbol": "ETHUSDT",
                  "baseAsset": "ETH",
                  "quoteAsset": "USDT"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Copy Trading Endpoints",
      "path": "toc.copy-trading-endpoints.get-futures-lead-trading-symbol-whitelist-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-futures-lead-trading-symbol-whitelist-user_data",
      "name": "Get Futures Lead Trading Symbol Whitelist(USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/pay/transactions",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/pay/transactions",
      "hmacSHA256": false,
      "weights": {
        "UID": 3000,
        "UID_text": "3000"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "default 100, max 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "default 100, max 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "NumberString",
              "message": "string",
              "data": [
                {
                  "orderType": "string", // Enum:PAY(C2B Merchant Acquiring Payment), PAY_REFUND(C2B Merchant Acquiring Payment,refund), C2C(C2C Transfer Payment),CRYPTO_BOX(Crypto box), CRYPTO_BOX_RF(Crypto Box, refund), C2C_HOLDING(Transfer to new Binance user), C2C_HOLDING_RF(Transfer to new Binance user,refund), PAYOUT(B2C Disbursement Payment), REMITTANCE（Send cash)
                  "transactionId": "string",
                  "transactionTime": "number", //trade timestamp
                  "amount": "NumberString", //order amount(up to 8 decimal places), positive is income, negative is expenditure
                  "currency": "string",
                  "walletType": "number", //main wallet type, 1 for funding wallet, 2 for spot wallet, 3 for fiat wallet, 4 or 6 for card payment, 5 for earn wallet
                  "walletTypes": [
                    "number"
                  ], //array format,there are multiple values when using combination payment
                  "fundsDetail": [ // details
                    {
                      "currency": "string", //asset
                      "amount": "NumberString",
                      "walletAssetCost": [ //details of asset cost per wallet
                        {
                          "1": "NumberString"
                        },
                        {
                          "2": "NumberString"
                        }
                      ]
                    },
                    null
                  ],
                  "payerInfo": {
                    "name": "string", //nickname or merchant name
                    "type": "string", //account type,USER for personal,MERCHANT for merchant
                    "binanceId": "NumberString", //binance uid
                    "accountId": "NumberString" //binance pay id
                  },
                  "receiverInfo": {
                    "name": "string", //nickname or merchant name
                    "type": "string", //account type,USER for personal,MERCHANT for merchant
                    "email": "string", //email
                    "binanceId": "NumberString", //binance uid
                    "accountId": "NumberString", //binance pay id
                    "countryCode": "NumberString", //International area code
                    "phoneNumber": "NumberString",
                    "mobileCode": "string", //country code
                    "extend": { //extension field
                      "institutionName": "string",
                      "cardNumber": "string",
                      "digitalWalletId": "string"
                    }
                  }
                }
              ],
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "code": "000000",
              "message": "success",
              "data": [
                {
                  "orderType": "C2C", // Enum:PAY(C2B Merchant Acquiring Payment), PAY_REFUND(C2B Merchant Acquiring Payment,refund), C2C(C2C Transfer Payment),CRYPTO_BOX(Crypto box), CRYPTO_BOX_RF(Crypto Box, refund), C2C_HOLDING(Transfer to new Binance user), C2C_HOLDING_RF(Transfer to new Binance user,refund), PAYOUT(B2C Disbursement Payment), REMITTANCE（Send cash)
                  "transactionId": "M_P_71505104267788288",
                  "transactionTime": 1610090460133, //trade timestamp
                  "amount": "23.72469206", //order amount(up to 8 decimal places), positive is income, negative is expenditure
                  "currency": "BNB",
                  "walletType": 1, //main wallet type, 1 for funding wallet, 2 for spot wallet, 3 for fiat wallet, 4 or 6 for card payment, 5 for earn wallet
                  "walletTypes": [
                    1,
                    2
                  ], //array format,there are multiple values when using combination payment
                  "fundsDetail": [ // details
                    {
                      "currency": "USDT", //asset
                      "amount": "1.2",
                      "walletAssetCost": [ //details of asset cost per wallet
                        {
                          "1": "0.6"
                        },
                        {
                          "2": "0.6"
                        }
                      ]
                    },
                    {
                      "currency": "ETH",
                      "amount": "0.0001",
                      "walletAssetCost": [
                        {
                          "1": "0.00005"
                        },
                        {
                          "2": "0.00005"
                        }
                      ]
                    }
                  ],
                  "payerInfo": {
                    "name": "Jack", //nickname or merchant name
                    "type": "USER", //account type,USER for personal,MERCHANT for merchant
                    "binanceId": "12345678", //binance uid
                    "accountId": "67736251" //binance pay id
                  },
                  "receiverInfo": {
                    "name": "Alan", //nickname or merchant name
                    "type": "MERCHANT", //account type,USER for personal,MERCHANT for merchant
                    "email": "alan@binance.com", //email
                    "binanceId": "34355667", //binance uid
                    "accountId": "21326891", //binance pay id
                    "countryCode": "1", //International area code
                    "phoneNumber": "8057651210",
                    "mobileCode": "US", //country code
                    "extend": { //extension field
                      "institutionName": "",
                      "cardNumber": "",
                      "digitalWalletId": ""
                    }
                  }
                }
              ],
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Pay Endpoints",
      "path": "toc.pay-endpoints.get-pay-trade-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-pay-trade-history-user_data",
      "name": "Get Pay Trade History (USER_DATA)"
    },
    {
      "description": "Query for all convertible token pairs and the tokens’ respective upper/lower limits",
      "securityType": "",
      "request": "GET /sapi/v1/convert/exchangeInfo",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/convert/exchangeInfo",
      "hmacSHA256": false,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "fromAsset": {
          "name": "fromAsset",
          "type": "string",
          "required": false,
          "description": "User spends coin"
        },
        "toAsset": {
          "name": "toAsset",
          "type": "string",
          "required": false,
          "description": "User receives coin"
        }
      },
      "overloads": [
        {
          "params": {
            "fromAsset": {
              "name": "fromAsset",
              "type": "string",
              "required": false,
              "description": "User spends coin"
            },
            "toAsset": {
              "name": "toAsset",
              "type": "string",
              "required": false,
              "description": "User receives coin"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "fromAsset": "string",
                "toAsset": "string",
                "fromAssetMinAmount": "NumberString",
                "fromAssetMaxAmount": "NumberString",
                "toAssetMinAmount": "NumberString",
                "toAssetMaxAmount": "NumberString",
                "fromIsBase": "string"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "fromAsset": "BTC",
                "toAsset": "USDT",
                "fromAssetMinAmount": "0.0004",
                "fromAssetMaxAmount": "50",
                "toAssetMinAmount": "20",
                "toAssetMaxAmount": "2500000",
                "fromIsBase": "True"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Convert Endpoints",
      "path": "toc.convert-endpoints.list-all-convert-pairs",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#list-all-convert-pairs",
      "name": "List All Convert Pairs"
    },
    {
      "description": "Query for supported asset’s precision information",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/convert/assetInfo",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/convert/assetInfo",
      "hmacSHA256": false,
      "weights": {
        "IP": 100,
        "IP_text": "100"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "asset": "string",
                "fraction": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "asset": "BTC",
                "fraction": 8
              },
              {
                "asset": "SHIB",
                "fraction": 2
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Convert Endpoints",
      "path": "toc.convert-endpoints.query-order-quantity-precision-per-asset-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-order-quantity-precision-per-asset-user_data",
      "name": "Query order quantity precision per asset (USER_DATA)"
    },
    {
      "description": "Request a quote for the requested token pairs",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/convert/getQuote",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/convert/getQuote",
      "hmacSHA256": false,
      "weights": {
        "UID": 200,
        "UID_text": "200"
      },
      "baseParams": {
        "fromAsset": {
          "name": "fromAsset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "toAsset": {
          "name": "toAsset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "fromAmount": {
          "name": "fromAmount",
          "type": "DECIMAL",
          "required": true,
          "description": "When specified, it is the amount you will be debited after the conversion"
        },
        "toAmount": {
          "name": "toAmount",
          "type": "DECIMAL",
          "required": true,
          "description": "When specified, it is the amount you will be credited after the conversion"
        },
        "walletType": {
          "name": "walletType",
          "type": "\"SPOT\"|\"FUNDING\"",
          "required": false,
          "description": "SPOT or FUNDING. Default is SPOT"
        },
        "validTime": {
          "name": "validTime",
          "type": "\"10s\"|\"30s\"|\"1m\"|\"2m\"",
          "required": false,
          "description": "10s, 30s, 1m, 2m, default 10s"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "fromAsset": {
              "name": "fromAsset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "toAsset": {
              "name": "toAsset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "fromAmount": {
              "name": "fromAmount",
              "type": "DECIMAL",
              "required": true,
              "description": "When specified, it is the amount you will be debited after the conversion"
            },
            "toAmount": {
              "name": "toAmount",
              "type": "DECIMAL",
              "required": true,
              "description": "When specified, it is the amount you will be credited after the conversion"
            },
            "walletType": {
              "name": "walletType",
              "type": "\"SPOT\"|\"FUNDING\"",
              "required": false,
              "description": "SPOT or FUNDING. Default is SPOT"
            },
            "validTime": {
              "name": "validTime",
              "type": "\"10s\"|\"30s\"|\"1m\"|\"2m\"",
              "required": false,
              "description": "10s, 30s, 1m, 2m, default 10s"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "quoteId": "NumberString",
              "ratio": "NumberString",
              "inverseRatio": "NumberString",
              "validTimestamp": "number",
              "toAmount": "NumberString",
              "fromAmount": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "quoteId": "12415572564",
              "ratio": "38163.7",
              "inverseRatio": "0.0000262",
              "validTimestamp": 1623319461670,
              "toAmount": "3816.37",
              "fromAmount": "0.1"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Convert Endpoints",
      "path": "toc.convert-endpoints.send-quote-request-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#send-quote-request-user_data",
      "name": "Send quote request (USER_DATA)"
    },
    {
      "description": "Accept the offered quote by quote ID.",
      "securityType": "TRADE",
      "request": "POST /sapi/v1/convert/acceptQuote",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/convert/acceptQuote",
      "hmacSHA256": false,
      "weights": {
        "UID": 500,
        "UID_text": "500"
      },
      "baseParams": {
        "quoteId": {
          "name": "quoteId",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "quoteId": {
              "name": "quoteId",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderId": "NumberString",
              "createTime": "number",
              "orderStatus": "string" //PROCESS/ACCEPT_SUCCESS/SUCCESS/FAIL
            }
          ],
          "responseExamples": [
            {
              "orderId": "933256278426274426",
              "createTime": 1623381330472,
              "orderStatus": "PROCESS" //PROCESS/ACCEPT_SUCCESS/SUCCESS/FAIL
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Convert Endpoints",
      "path": "toc.convert-endpoints.accept-quote-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#accept-quote-trade",
      "name": "Accept Quote (TRADE)"
    },
    {
      "description": "Query order status by order ID.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/convert/orderStatus",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/convert/orderStatus",
      "hmacSHA256": false,
      "weights": {
        "UID": 100,
        "UID_text": "100"
      },
      "baseParams": {
        "orderId": {
          "name": "orderId",
          "type": "string",
          "required": false,
          "description": "Either orderId or quoteId is required"
        },
        "quoteId": {
          "name": "quoteId",
          "type": "string",
          "required": false,
          "description": "Either orderId or quoteId is required"
        }
      },
      "overloads": [
        {
          "params": {
            "orderId": {
              "name": "orderId",
              "type": "string",
              "required": false,
              "description": "Either orderId or quoteId is required"
            },
            "quoteId": {
              "name": "quoteId",
              "type": "string",
              "required": false,
              "description": "Either orderId or quoteId is required"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderId": "number",
              "orderStatus": "string",
              "fromAsset": "string",
              "fromAmount": "NumberString",
              "toAsset": "string",
              "toAmount": "NumberString",
              "ratio": "NumberString",
              "inverseRatio": "NumberString",
              "createTime": "number"
            }
          ],
          "responseExamples": [
            {
              "orderId": 933256278426274400,
              "orderStatus": "SUCCESS",
              "fromAsset": "BTC",
              "fromAmount": "0.00054414",
              "toAsset": "USDT",
              "toAmount": "20",
              "ratio": "36755",
              "inverseRatio": "0.00002721",
              "createTime": 1623381330472
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Convert Endpoints",
      "path": "toc.convert-endpoints.order-status-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#order-status-user_data",
      "name": "Order status (USER_DATA)"
    },
    {
      "description": "Enable users to place a limit order",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/convert/limit/placeOrder",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/convert/limit/placeOrder",
      "hmacSHA256": false,
      "weights": {
        "UID": 500,
        "UID_text": "500"
      },
      "baseParams": {
        "baseAsset": {
          "name": "baseAsset",
          "type": "string",
          "required": true,
          "description": "base asset (use the response fromIsBase from GET /sapi/v1/convert/exchangeInfo api to check which one is baseAsset )"
        },
        "quoteAsset": {
          "name": "quoteAsset",
          "type": "string",
          "required": true,
          "description": "quote asset"
        },
        "limitPrice": {
          "name": "limitPrice",
          "type": "DECIMAL",
          "required": true,
          "description": "Symbol limit price (from baseAsset to quoteAsset)"
        },
        "baseAmount": {
          "name": "baseAmount",
          "type": "DECIMAL",
          "required": false,
          "description": "Base asset amount.  (One of baseAmount or quoteAmount is required)"
        },
        "quoteAmount": {
          "name": "quoteAmount",
          "type": "DECIMAL",
          "required": false,
          "description": "Quote asset amount.  (One of baseAmount or quoteAmount is required)"
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": "BUY or SELL"
        },
        "walletType": {
          "name": "walletType",
          "type": "ENUM",
          "required": false,
          "description": "SPOT or FUNDING or SPOT_FUNDING.  It is to use which type of assets. Default is SPOT."
        },
        "expiredType": {
          "name": "expiredType",
          "type": "ENUM",
          "required": true,
          "description": "1_D, 3_D, 7_D, 30_D  (D means day)"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "baseAsset": {
              "name": "baseAsset",
              "type": "string",
              "required": true,
              "description": "base asset (use the response fromIsBase from GET /sapi/v1/convert/exchangeInfo api to check which one is baseAsset )"
            },
            "quoteAsset": {
              "name": "quoteAsset",
              "type": "string",
              "required": true,
              "description": "quote asset"
            },
            "limitPrice": {
              "name": "limitPrice",
              "type": "DECIMAL",
              "required": true,
              "description": "Symbol limit price (from baseAsset to quoteAsset)"
            },
            "baseAmount": {
              "name": "baseAmount",
              "type": "DECIMAL",
              "required": false,
              "description": "Base asset amount.  (One of baseAmount or quoteAmount is required)"
            },
            "quoteAmount": {
              "name": "quoteAmount",
              "type": "DECIMAL",
              "required": false,
              "description": "Quote asset amount.  (One of baseAmount or quoteAmount is required)"
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": "BUY or SELL"
            },
            "walletType": {
              "name": "walletType",
              "type": "ENUM",
              "required": false,
              "description": "SPOT or FUNDING or SPOT_FUNDING.  It is to use which type of assets. Default is SPOT."
            },
            "expiredType": {
              "name": "expiredType",
              "type": "ENUM",
              "required": true,
              "description": "1_D, 3_D, 7_D, 30_D  (D means day)"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderId": "number",
              "status": "string"
            }
          ],
          "responseExamples": [
            {
              "orderId": 1603680255057330400,
              "status": "PROCESS"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Convert Endpoints",
      "path": "toc.convert-endpoints.place-limit-order-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#place-limit-order-user_data",
      "name": "Place limit order (USER_DATA)"
    },
    {
      "description": "Enable users to cancel a limit order",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/convert/limit/cancelOrder",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/convert/limit/cancelOrder",
      "hmacSHA256": false,
      "weights": {
        "UID": 200,
        "UID_text": "200"
      },
      "baseParams": {
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": true,
          "description": "The orderId from placeOrder api"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": true,
              "description": "The orderId from placeOrder api"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderId": "number",
              "status": "string"
            }
          ],
          "responseExamples": [
            {
              "orderId": 1603680255057330400,
              "status": "CANCELED"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Convert Endpoints",
      "path": "toc.convert-endpoints.cancel-limit-order-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#cancel-limit-order-user_data",
      "name": "Cancel limit order (USER_DATA)"
    },
    {
      "description": "Enable users to query for all existing limit orders",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/convert/limit/queryOpenOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/convert/limit/queryOpenOrders",
      "hmacSHA256": false,
      "weights": {
        "UID": 3000,
        "UID_text": "3000"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "list": [
                {
                  "quoteId": "string",
                  "orderId": "number",
                  "orderStatus": "string",
                  "fromAsset": "string",
                  "fromAmount": "NumberString",
                  "toAsset": "string",
                  "toAmount": "NumberString",
                  "ratio": "NumberString",
                  "inverseRatio": "NumberString",
                  "createTime": "number",
                  "expiredTimestamp": "number"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "list": [
                {
                  "quoteId": "18sdf87kh9df",
                  "orderId": 1150901289839,
                  "orderStatus": "SUCCESS",
                  "fromAsset": "BNB",
                  "fromAmount": "10",
                  "toAsset": "USDT",
                  "toAmount": "2317.89",
                  "ratio": "231.789",
                  "inverseRatio": "0.00431427",
                  "createTime": 1614089498000,
                  "expiredTimestamp": 1614099498000
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Convert Endpoints",
      "path": "toc.convert-endpoints.query-limit-open-orders-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#query-limit-open-orders-user_data",
      "name": "Query limit open orders (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/convert/tradeFlow",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/convert/tradeFlow",
      "hmacSHA256": false,
      "weights": {
        "UID": 3000,
        "UID_text": "3000"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": true,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 100, Max 1000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": true,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 100, Max 1000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "list": [
                {
                  "quoteId": "string",
                  "orderId": "number",
                  "orderStatus": "string", // order status
                  "fromAsset": "string", // from asset
                  "fromAmount": "NumberString", // from amount
                  "toAsset": "string", // to asset
                  "toAmount": "NumberString", // to amount
                  "ratio": "NumberString", // price ratio
                  "inverseRatio": "NumberString", // inverse price
                  "createTime": "number"
                }
              ],
              "startTime": "number",
              "endTime": "number",
              "limit": "number",
              "moreData": "boolean"
            }
          ],
          "responseExamples": [
            {
              "list": [
                {
                  "quoteId": "f3b91c525b2644c7bc1e1cd31b6e1aa6",
                  "orderId": 940708407462087200,
                  "orderStatus": "SUCCESS", // order status
                  "fromAsset": "USDT", // from asset
                  "fromAmount": "20", // from amount
                  "toAsset": "BNB", // to asset
                  "toAmount": "0.06154036", // to amount
                  "ratio": "0.00307702", // price ratio
                  "inverseRatio": "324.99", // inverse price
                  "createTime": 1624248872184
                }
              ],
              "startTime": 1623824139000,
              "endTime": 1626416139000,
              "limit": 100,
              "moreData": false
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Convert Endpoints",
      "path": "toc.convert-endpoints.get-convert-trade-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-convert-trade-history-user_data",
      "name": "Get Convert Trade History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET  /sapi/v1/rebate/taxQuery",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/rebate/taxQuery",
      "hmacSHA256": false,
      "weights": {
        "UID": 12000,
        "UID_text": "12000"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": "Default 1"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "Default 1"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "status": "string",
              "type": "string",
              "code": "NumberString",
              "data": {
                "page": "number", // current page
                "totalRecords": "number", // total records
                "totalPageNum": "number", // total pages
                "data": [
                  {
                    "asset": "string", // rebate asset
                    "type": "number", // rebate type:1 is commission rebate,2 is referral kickback
                    "amount": "NumberString",
                    "updateTime": "number"
                  },
                  null
                ]
              }
            }
          ],
          "responseExamples": [
            {
              "status": "OK",
              "type": "GENERAL",
              "code": "000000000",
              "data": {
                "page": 1, // current page
                "totalRecords": 2, // total records
                "totalPageNum": 1, // total pages
                "data": [
                  {
                    "asset": "USDT", // rebate asset
                    "type": 1, // rebate type:1 is commission rebate,2 is referral kickback
                    "amount": "0.0001126",
                    "updateTime": 1637651320000
                  },
                  {
                    "asset": "ETH",
                    "type": 1,
                    "amount": "0.00000056",
                    "updateTime": 1637928379000
                  }
                ]
              }
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Rebate Endpoints",
      "path": "toc.rebate-endpoints.get-spot-rebate-history-records-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-spot-rebate-history-records-user_data",
      "name": "Get Spot Rebate History Records (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET  /sapi/v1/nft/history/transactions",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/nft/history/transactions",
      "hmacSHA256": false,
      "weights": {
        "UID": 3000,
        "UID_text": "3000"
      },
      "baseParams": {
        "orderType": {
          "name": "orderType",
          "type": "INT",
          "required": true,
          "description": "0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 50, Max 50"
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": "Default 1"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderType": {
              "name": "orderType",
              "type": "INT",
              "required": true,
              "description": "0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 50, Max 50"
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "Default 1"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number", //total records
              "list": [
                {
                  "orderNo": "string", // 0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee
                  "tokens": [
                    {
                      "network": "string", // NFT Network
                      "tokenId": "NumberString", // NFT Token ID
                      "contractAddress": "string" // NFT Contract Address
                    }
                  ],
                  "tradeTime": "number",
                  "tradeAmount": "NumberString",
                  "tradeCurrency": "string"
                },
                {
                  "orderNo": "string",
                  "tokens": [
                    {
                      "network": "string",
                      "tokenId": "NumberString",
                      "contractAddress": "NumberString"
                    }
                  ],
                  "tradeTime": "number",
                  "tradeAmount": "NumberString",
                  "tradeCurrency": "string"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 2, //total records
              "list": [
                {
                  "orderNo": "1_470502070600699904", // 0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee
                  "tokens": [
                    {
                      "network": "BSC", // NFT Network
                      "tokenId": "216000000496", // NFT Token ID
                      "contractAddress": "MYSTERY_BOX0000087" // NFT Contract Address
                    }
                  ],
                  "tradeTime": 1626941236000,
                  "tradeAmount": "19.60000000",
                  "tradeCurrency": "BNB"
                },
                {
                  "orderNo": "1_488306442479116288",
                  "tokens": [
                    {
                      "network": "BSC",
                      "tokenId": "132900000007",
                      "contractAddress": "0xAf12111a592e408DAbC740849fcd5e68629D9fb6"
                    }
                  ],
                  "tradeTime": 1631186130000,
                  "tradeAmount": "192.00000000",
                  "tradeCurrency": "BNB"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "NFT Endpoints",
      "path": "toc.nft-endpoints.get-nft-transaction-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-nft-transaction-history-user_data",
      "name": "Get NFT Transaction History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET  /sapi/v1/nft/history/deposit",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/nft/history/deposit",
      "hmacSHA256": false,
      "weights": {
        "UID": 3000,
        "UID_text": "3000"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 50, Max 50"
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": "Default 1"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 50, Max 50"
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "Default 1"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number",
              "list": [
                {
                  "network": "string", // NFT Network
                  "txID": "null", // Transaction ID
                  "contractAdrress": "NumberString", // NFT Contract Address
                  "tokenId": "NumberString", // NFT Token ID
                  "timestamp": "number"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 2,
              "list": [
                {
                  "network": "ETH", // NFT Network
                  "txID": null, // Transaction ID
                  "contractAdrress": "0xe507c961ee127d4439977a61af39c34eafee0dc6", // NFT Contract Address
                  "tokenId": "10014", // NFT Token ID
                  "timestamp": 1629986047000
                },
                {
                  "network": "BSC",
                  "txID": null,
                  "contractAdrress": "0x058451b463bab04f52c0799d55c4094f507acfa9",
                  "tokenId": "10016",
                  "timestamp": 1630083581000
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "NFT Endpoints",
      "path": "toc.nft-endpoints.get-nft-deposit-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-nft-deposit-history-user_data",
      "name": "Get NFT Deposit History(USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET  /sapi/v1/nft/history/withdraw",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/nft/history/withdraw",
      "hmacSHA256": false,
      "weights": {
        "UID": 3000,
        "UID_text": "3000"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 50, Max 50"
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": "Default 1"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 50, Max 50"
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "Default 1"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number",
              "list": [
                {
                  "network": "string",
                  "txID": "NumberString",
                  "contractAdrress": "NumberString", // NFT Contract Address
                  "tokenId": "NumberString", // NFT Token ID
                  "timestamp": "number",
                  "fee": "number", // Withdraw Fee
                  "feeAsset": "string" // Asset
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 178,
              "list": [
                {
                  "network": "ETH",
                  "txID": "0x2be5eed31d787fdb4880bc631c8e76bdfb6150e137f5cf1732e0416ea206f57f",
                  "contractAdrress": "0xe507c961ee127d4439977a61af39c34eafee0dc6", // NFT Contract Address
                  "tokenId": "1000001247", // NFT Token ID
                  "timestamp": 1633674433000,
                  "fee": 0.1, // Withdraw Fee
                  "feeAsset": "ETH" // Asset
                },
                {
                  "network": "ETH",
                  "txID": "0x3b3aea5c0a4faccd6f306641e6deb9713ab229ac233be3be227f580311e4362a",
                  "contractAdrress": "0xe507c961ee127d4439977a61af39c34eafee0dc6",
                  "tokenId": "40000030",
                  "timestamp": 1633677022000,
                  "fee": 0.1,
                  "feeAsset": "ETH"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "NFT Endpoints",
      "path": "toc.nft-endpoints.get-nft-withdraw-history-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-nft-withdraw-history-user_data",
      "name": "Get NFT Withdraw History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET  /sapi/v1/nft/user/getAsset",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/nft/user/getAsset",
      "hmacSHA256": false,
      "weights": {
        "UID": 3000,
        "UID_text": "3000"
      },
      "baseParams": {
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 50, Max 50"
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": "Default 1"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 50, Max 50"
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": "Default 1"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "total": "number",
              "list": [
                {
                  "network": "string", // NFT Network
                  "contractAddress": "string", // NFT Contract Address
                  "tokenId": "NumberString" // NFT Token ID
                },
                null,
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "total": 347,
              "list": [
                {
                  "network": "BSC", // NFT Network
                  "contractAddress": "REGULAR11234567891779", // NFT Contract Address
                  "tokenId": "100900000017" // NFT Token ID
                },
                {
                  "network": "BSC",
                  "contractAddress": "SSMDQ8W59",
                  "tokenId": "200500000011"
                },
                {
                  "network": "BSC",
                  "contractAddress": "SSMDQ8W59",
                  "tokenId": "200500000019"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "NFT Endpoints",
      "path": "toc.nft-endpoints.get-nft-asset-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#get-nft-asset-user_data",
      "name": "Get NFT Asset (USER_DATA)"
    },
    {
      "description": "This API is for creating a Binance Gift Card.",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/giftcard/createCode",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/giftcard/createCode",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "token": {
          "name": "token",
          "type": "string",
          "required": true,
          "description": "The token type contained in the Binance Gift Card"
        },
        "amount": {
          "name": "amount",
          "type": "DOUBLE",
          "required": true,
          "description": "The amount of the token contained in the Binance Gift Card"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "token": {
              "name": "token",
              "type": "string",
              "required": true,
              "description": "The token type contained in the Binance Gift Card"
            },
            "amount": {
              "name": "amount",
              "type": "DOUBLE",
              "required": true,
              "description": "The amount of the token contained in the Binance Gift Card"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "NumberString",
              "message": "string",
              "data": {
                "referenceNo": "NumberString",
                "code": "string",
                "expiredTime": "number"
              },
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "code": "000000",
              "message": "success",
              "data": {
                "referenceNo": "0033002144060553",
                "code": "6H9EKF5ECCWFBHGE",
                "expiredTime": 1727417154000
              },
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Binance Gift Card Endpoints",
      "path": "toc.binance-gift-card-endpoints.create-a-single-token-gift-card-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#create-a-single-token-gift-card-user_data",
      "name": "Create a single-token gift card (USER_DATA)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /sapi/v1/giftcard/buyCode",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/giftcard/buyCode",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "baseToken": {
          "name": "baseToken",
          "type": "string",
          "required": true,
          "description": "The token you want to pay, example: BUSD"
        },
        "faceToken": {
          "name": "faceToken",
          "type": "string",
          "required": true,
          "description": "The token you want to buy, example: BNB. If faceToken = baseToken, it's the same as createCode endpoint."
        },
        "baseTokenAmount": {
          "name": "baseTokenAmount",
          "type": "DOUBLE",
          "required": true,
          "description": "The base token asset quantity, example : 1.002"
        },
        "discount": {
          "name": "discount",
          "type": "DOUBLE",
          "required": false,
          "description": "Stablecoin-denominated card discount percentage, Example: 1 for 1% discount. Scale should be less than 6."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "baseToken": {
              "name": "baseToken",
              "type": "string",
              "required": true,
              "description": "The token you want to pay, example: BUSD"
            },
            "faceToken": {
              "name": "faceToken",
              "type": "string",
              "required": true,
              "description": "The token you want to buy, example: BNB. If faceToken = baseToken, it's the same as createCode endpoint."
            },
            "baseTokenAmount": {
              "name": "baseTokenAmount",
              "type": "DOUBLE",
              "required": true,
              "description": "The base token asset quantity, example : 1.002"
            },
            "discount": {
              "name": "discount",
              "type": "DOUBLE",
              "required": false,
              "description": "Stablecoin-denominated card discount percentage, Example: 1 for 1% discount. Scale should be less than 6."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "NumberString",
              "message": "string",
              "data": {
                "referenceNo": "NumberString",
                "code": "string",
                "expiredTime": "number"
              },
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "code": "000000",
              "message": "success",
              "data": {
                "referenceNo": "0033002144060553",
                "code": "6H9EKF5ECCWFBHGE",
                "expiredTime": 1727417154000
              },
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Binance Gift Card Endpoints",
      "path": "toc.binance-gift-card-endpoints.create-a-dual-token-gift-card-fixed-value-discount-feature-trade",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#create-a-dual-token-gift-card-fixed-value-discount-feature-trade",
      "name": "Create a dual-token gift card (fixed value, discount feature) (TRADE)"
    },
    {
      "description": "This API is for redeeming a Binance Gift Card",
      "securityType": "USER_DATA",
      "request": "POST /sapi/v1/giftcard/redeemCode",
      "requestMethod": "POST",
      "requestEndPoint": "/sapi/v1/giftcard/redeemCode",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "code": {
          "name": "code",
          "type": "string",
          "required": true,
          "description": "Redemption code of Binance Gift Card to be redeemed, supports both Plaintext & Encrypted code."
        },
        "externalUid": {
          "name": "externalUid",
          "type": "string",
          "required": false,
          "description": "Each external unique ID represents a unique user on the partner platform. The function helps you to identify the redemption behavior of different users, such as redemption frequency and amount. It also helps risk and limit control of a single account, such as daily limit on redemption volume, frequency, and incorrect number of entries. This will also prevent a single user account reach the partner's daily redemption limits. We strongly recommend you to use this feature and transfer us the User ID of your users if you have different users redeeming Binance Gift Cards on your platform. To protect user data privacy, you may choose to transfer the user id in any desired format (max. 400 characters)."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "code": {
              "name": "code",
              "type": "string",
              "required": true,
              "description": "Redemption code of Binance Gift Card to be redeemed, supports both Plaintext & Encrypted code."
            },
            "externalUid": {
              "name": "externalUid",
              "type": "string",
              "required": false,
              "description": "Each external unique ID represents a unique user on the partner platform. The function helps you to identify the redemption behavior of different users, such as redemption frequency and amount. It also helps risk and limit control of a single account, such as daily limit on redemption volume, frequency, and incorrect number of entries. This will also prevent a single user account reach the partner's daily redemption limits. We strongly recommend you to use this feature and transfer us the User ID of your users if you have different users redeeming Binance Gift Cards on your platform. To protect user data privacy, you may choose to transfer the user id in any desired format (max. 400 characters)."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "NumberString",
              "message": "string",
              "data": {
                "referenceNo": "NumberString",
                "identityNo": "NumberString",
                "token": "string",
                "amount": "NumberString"
              },
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "code": "000000",
              "message": "success",
              "data": {
                "referenceNo": "0033002328060227",
                "identityNo": "10317392647411060736",
                "token": "BNB",
                "amount": "0.00000001"
              },
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Binance Gift Card Endpoints",
      "path": "toc.binance-gift-card-endpoints.redeem-a-binance-gift-card-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#redeem-a-binance-gift-card-user_data",
      "name": "Redeem a Binance Gift Card (USER_DATA)"
    },
    {
      "description": "This API is for verifying whether the Binance Gift Card is valid or not by entering Gift Card Number.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/giftcard/verify",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/giftcard/verify",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "referenceNo": {
          "name": "referenceNo",
          "type": "string",
          "required": true,
          "description": "Enter the Gift Card Number"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "referenceNo": {
              "name": "referenceNo",
              "type": "string",
              "required": true,
              "description": "Enter the Gift Card Number"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "NumberString",
              "message": "string",
              "data": {
                "valid": "boolean",
                "token": "string", // coin
                "amount": "NumberString" // amount
              },
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "code": "000000",
              "message": "success",
              "data": {
                "valid": true,
                "token": "BNB", // coin
                "amount": "0.00000001" // amount
              },
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Binance Gift Card Endpoints",
      "path": "toc.binance-gift-card-endpoints.verify-binance-gift-card-by-gift-card-number-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#verify-binance-gift-card-by-gift-card-number-user_data",
      "name": "Verify Binance Gift Card by Gift Card Number (USER_DATA)"
    },
    {
      "description": "This API is for fetching the RSA Public Key.\nThis RSA Public key will be used to encrypt the card code.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/giftcard/cryptography/rsa-public-key",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/giftcard/cryptography/rsa-public-key",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "NumberString",
              "message": "string",
              "data": "string",
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "code": "000000",
              "message": "success",
              "data": "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCXBBVKLAc1GQ5FsIFFqOHrPTox5noBONIKr+IAedTR9FkVxq6e65updEbfdhRNkMOeYIO2i0UylrjGC0X8YSoIszmrVHeV0l06Zh1oJuZos1+7N+WLuz9JvlPaawof3GUakTxYWWCa9+8KIbLKsoKMdfS96VT+8iOXO3quMGKUmQIDAQAB",
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Binance Gift Card Endpoints",
      "path": "toc.binance-gift-card-endpoints.fetch-rsa-public-key-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#fetch-rsa-public-key-user_data",
      "name": "Fetch RSA Public Key (USER_DATA)"
    },
    {
      "description": "This API is to help you verify which tokens are available for you to create Stablecoin-Denominated gift cards as mentioned in section 2 and its’ limitation.",
      "securityType": "USER_DATA",
      "request": "GET /sapi/v1/giftcard/buyCode/token-limit",
      "requestMethod": "GET",
      "requestEndPoint": "/sapi/v1/giftcard/buyCode/token-limit",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "baseToken": {
          "name": "baseToken",
          "type": "string",
          "required": true,
          "description": "The token you want to pay, example: BUSD"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "baseToken": {
              "name": "baseToken",
              "type": "string",
              "required": true,
              "description": "The token you want to pay, example: BUSD"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "NumberString",
              "message": "string",
              "data": [
                {
                  "coin": "string",
                  "fromMin": "NumberString",
                  "fromMax": "NumberString"
                }
              ],
              "success": "boolean"
            }
          ],
          "responseExamples": [
            {
              "code": "000000",
              "message": "success",
              "data": [
                {
                  "coin": "BNB",
                  "fromMin": "0.01",
                  "fromMax": "1"
                }
              ],
              "success": true
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Binance Gift Card Endpoints",
      "path": "toc.binance-gift-card-endpoints.fetch-token-limit-user_data",
      "apiType": "spot",
      "ref": "https://binance-docs.github.io/apidocs/spot/en#fetch-token-limit-user_data",
      "name": "Fetch Token Limit (USER_DATA)"
    }
  ],
  "fapi": [
    {
      "description": "Test connectivity to the Rest API.",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/ping",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/ping",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.test-connectivity",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#test-connectivity",
      "name": "Test Connectivity"
    },
    {
      "description": "Test connectivity to the Rest API and get the current server time.",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/time",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/time",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "serverTime": "number"
            }
          ],
          "responseExamples": [
            {
              "serverTime": 1499827319559
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.check-server-time",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#check-server-time",
      "name": "Check Server Time"
    },
    {
      "description": "Current exchange trading rules and symbol information",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/exchangeInfo",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/exchangeInfo",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "exchangeFilters": [],
              "rateLimits": [
                {
                  "interval": "RateLimitInterval",
                  "intervalNum": "number",
                  "limit": "number",
                  "rateLimitType": "RateLimitType"
                },
                null
              ],
              "serverTime": "number", // Ignore please. If you want to check current server time, please check via "GET /fapi/v1/time"
              "assets": [ // assets information
                {
                  "asset": "string",
                  "marginAvailable": "boolean", // whether the asset can be used as margin in Multi-Assets mode
                  "autoAssetExchange": "number" // only valid for vip2-9 users
                },
                null,
                {
                  "asset": "string",
                  "marginAvailable": "boolean",
                  "autoAssetExchange": "null"
                }
              ],
              "symbols": [
                {
                  "symbol": "string",
                  "pair": "string",
                  "contractType": "string",
                  "deliveryDate": "number",
                  "onboardDate": "number",
                  "status": "string",
                  "maintMarginPercent": "NumberString", // ignore
                  "requiredMarginPercent": "NumberString", // ignore
                  "baseAsset": "string",
                  "quoteAsset": "string",
                  "marginAsset": "string",
                  "pricePrecision": "number", // please do not use it as tickSize
                  "quantityPrecision": "number", // please do not use it as stepSize
                  "baseAssetPrecision": "number",
                  "quotePrecision": "number",
                  "underlyingType": "string",
                  "underlyingSubType": [
                    "string"
                  ],
                  "settlePlan": "number",
                  "triggerProtect": "NumberString", // threshold for algo order with "priceProtect"
                  "filters": [
                    {
                      "filterType": "\"PRICE_FILTER\"",
                      "maxPrice": "NumberString",
                      "minPrice": "NumberString",
                      "tickSize": "NumberString"
                    },
                    {
                      "filterType": "\"LOT_SIZE\"",
                      "maxQty": "NumberString",
                      "minQty": "NumberString",
                      "stepSize": "NumberString"
                    },
                    {
                      "filterType": "\"MARKET_LOT_SIZE\"",
                      "maxQty": "NumberString",
                      "minQty": "NumberString",
                      "stepSize": "NumberString"
                    },
                    {
                      "filterType": "\"MAX_NUM_ORDERS\"",
                      "limit": "number"
                    },
                    {
                      "filterType": "\"MAX_NUM_ALGO_ORDERS\"",
                      "limit": "number"
                    },
                    {
                      "filterType": "\"MIN_NOTIONAL\"",
                      "notional": "NumberString"
                    },
                    {
                      "filterType": "\"PERCENT_PRICE\"",
                      "multiplierUp": "NumberString",
                      "multiplierDown": "NumberString",
                      "multiplierDecimal": "number"
                    }
                  ],
                  "OrderType": [
                    "string"
                  ],
                  "timeInForce": [
                    "TimeInForce"
                  ],
                  "liquidationFee": "NumberString", // liquidation fee rate
                  "marketTakeBound": "NumberString" // the max price difference rate( from mark price) a market order can make
                }
              ],
              "timezone": "string"
            }
          ],
          "responseExamples": [
            {
              "exchangeFilters": [],
              "rateLimits": [
                {
                  "interval": "MINUTE",
                  "intervalNum": 1,
                  "limit": 2400,
                  "rateLimitType": "REQUEST_WEIGHT"
                },
                {
                  "interval": "MINUTE",
                  "intervalNum": 1,
                  "limit": 1200,
                  "rateLimitType": "ORDERS"
                }
              ],
              "serverTime": 1565613908500, // Ignore please. If you want to check current server time, please check via "GET /fapi/v1/time"
              "assets": [ // assets information
                {
                  "asset": "BUSD",
                  "marginAvailable": true, // whether the asset can be used as margin in Multi-Assets mode
                  "autoAssetExchange": 0 // only valid for vip2-9 users
                },
                {
                  "asset": "USDT",
                  "marginAvailable": true,
                  "autoAssetExchange": 0 //only valid for vip2-9 users
                },
                {
                  "asset": "BNB",
                  "marginAvailable": false,
                  "autoAssetExchange": null
                }
              ],
              "symbols": [
                {
                  "symbol": "BLZUSDT",
                  "pair": "BLZUSDT",
                  "contractType": "PERPETUAL",
                  "deliveryDate": 4133404800000,
                  "onboardDate": 1598252400000,
                  "status": "TRADING",
                  "maintMarginPercent": "2.5000", // ignore
                  "requiredMarginPercent": "5.0000", // ignore
                  "baseAsset": "BLZ",
                  "quoteAsset": "USDT",
                  "marginAsset": "USDT",
                  "pricePrecision": 5, // please do not use it as tickSize
                  "quantityPrecision": 0, // please do not use it as stepSize
                  "baseAssetPrecision": 8,
                  "quotePrecision": 8,
                  "underlyingType": "COIN",
                  "underlyingSubType": [
                    "STORAGE"
                  ],
                  "settlePlan": 0,
                  "triggerProtect": "0.15", // threshold for algo order with "priceProtect"
                  "filters": [
                    {
                      "filterType": "PRICE_FILTER",
                      "maxPrice": "300",
                      "minPrice": "0.0001",
                      "tickSize": "0.0001"
                    },
                    {
                      "filterType": "LOT_SIZE",
                      "maxQty": "10000000",
                      "minQty": "1",
                      "stepSize": "1"
                    },
                    {
                      "filterType": "MARKET_LOT_SIZE",
                      "maxQty": "590119",
                      "minQty": "1",
                      "stepSize": "1"
                    },
                    {
                      "filterType": "MAX_NUM_ORDERS",
                      "limit": 200
                    },
                    {
                      "filterType": "MAX_NUM_ALGO_ORDERS",
                      "limit": 100
                    },
                    {
                      "filterType": "MIN_NOTIONAL",
                      "notional": "5.0"
                    },
                    {
                      "filterType": "PERCENT_PRICE",
                      "multiplierUp": "1.1500",
                      "multiplierDown": "0.8500",
                      "multiplierDecimal": 4
                    }
                  ],
                  "OrderType": [
                    "LIMIT",
                    "MARKET",
                    "STOP",
                    "STOP_MARKET",
                    "TAKE_PROFIT",
                    "TAKE_PROFIT_MARKET",
                    "TRAILING_STOP_MARKET"
                  ],
                  "timeInForce": [
                    "GTC",
                    "IOC",
                    "FOK",
                    "GTX"
                  ],
                  "liquidationFee": "0.010000", // liquidation fee rate
                  "marketTakeBound": "0.30" // the max price difference rate( from mark price) a market order can make
                }
              ],
              "timezone": "UTC"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.exchange-information",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#exchange-information",
      "name": "Exchange Information"
    },
    {
      "description": "Adjusted based on the limit:",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/depth",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/depth",
      "hmacSHA256": false,
      "weights": {
        "IP": "\n(params :QueryStruct) =>\n    typeof(params[\"limit\"])==\"number\"\n        ? [[1000,20],[500,10],[100,5],[5,2]].find((item,i)=> (params[\"limit\"] as number)>=item[0] || i==0)! [1]\n        : (()=>{throw new Error(\"Parameter 'limit' is not a number\")})()",
        "IP_text": "Adjusted based on the limit:\nLimit         Weight\n5, 10, 20, 50 2     \n100           5     \n500           10    \n1000          20    "
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; Valid limits:[5, 10, 20, 50, 100, 500, 1000]"
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; Valid limits:[5, 10, 20, 50, 100, 500, 1000]"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "lastUpdateId": "number",
              "E": "number", // Message output time
              "T": "number", // Transaction time
              "bids": [
                [
                  "NumberString" // PRICE
                ]
              ],
              "asks": [
                [
                  "NumberString"
                ]
              ]
            }
          ],
          "responseExamples": [
            {
              "lastUpdateId": 1027024,
              "E": 1589436922972, // Message output time
              "T": 1589436922959, // Transaction time
              "bids": [
                [
                  "4.00000000", // PRICE
                  "431.00000000" // QTY
                ]
              ],
              "asks": [
                [
                  "4.00000200",
                  "12.00000000"
                ]
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.order-book",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#order-book",
      "name": "Order Book"
    },
    {
      "description": "Get recent market trades",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/trades",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/trades",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "id": "number",
                "price": "NumberString",
                "qty": "NumberString",
                "quoteQty": "NumberString",
                "time": "number",
                "isBuyerMaker": "boolean"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "id": 28457,
                "price": "4.00000100",
                "qty": "12.00000000",
                "quoteQty": "48.00",
                "time": 1499865549590,
                "isBuyerMaker": true
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.recent-trades-list",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#recent-trades-list",
      "name": "Recent Trades List"
    },
    {
      "description": "Get older market historical trades.",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/historicalTrades",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/historicalTrades",
      "hmacSHA256": false,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        },
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "TradeId to fetch from. Default gets most recent trades."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            },
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "TradeId to fetch from. Default gets most recent trades."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "id": "number",
                "price": "NumberString",
                "qty": "NumberString",
                "quoteQty": "NumberString",
                "time": "number",
                "isBuyerMaker": "boolean"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "id": 28457,
                "price": "4.00000100",
                "qty": "12.00000000",
                "quoteQty": "8000.00",
                "time": 1499865549590,
                "isBuyerMaker": true
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.old-trades-lookup-market_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#old-trades-lookup-market_data",
      "name": "Old Trades Lookup (MARKET_DATA)"
    },
    {
      "description": "Get compressed, aggregate market trades. Market trades that fill in 100ms with the same price and the same taking side will have the quantity aggregated.",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/aggTrades",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/aggTrades",
      "hmacSHA256": false,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "ID to get aggregate trades from INCLUSIVE."
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get aggregate trades from INCLUSIVE."
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get aggregate trades until INCLUSIVE."
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "ID to get aggregate trades from INCLUSIVE."
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get aggregate trades from INCLUSIVE."
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get aggregate trades until INCLUSIVE."
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "a": "number", // Aggregate tradeId
                "p": "NumberString", // Price
                "q": "NumberString", // Quantity
                "f": "number", // First tradeId
                "l": "number", // Last tradeId
                "T": "number", // Timestamp
                "m": "boolean" // Was the buyer the maker?
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "a": 26129, // Aggregate tradeId
                "p": "0.01633102", // Price
                "q": "4.70443515", // Quantity
                "f": 27781, // First tradeId
                "l": 27781, // Last tradeId
                "T": 1498793709153, // Timestamp
                "m": true // Was the buyer the maker?
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.compressed-aggregate-trades-list",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#compressed-aggregate-trades-list",
      "name": "Compressed/Aggregate Trades List"
    },
    {
      "description": "Kline/candlestick bars for a symbol.\nKlines are uniquely identified by their open time.",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/klines",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/klines",
      "hmacSHA256": false,
      "weights": {
        "IP": "\n(params :QueryStruct) =>\n    typeof(params[\"limit\"])==\"number\"\n        ? [[1001,10],[500,5],[100,2],[1,1]].find((item,i)=> (params[\"limit\"] as number)>=item[0] || i==0)! [1]\n        : (()=>{throw new Error(\"Parameter 'limit' is not a number\")})()",
        "IP_text": "Adjusted based on the limit:\nLIMIT       weight\n[1,100)     1     \n[100, 500)  2     \n[500, 1000] 5     \n> 1000      10    "
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "interval": {
          "name": "interval",
          "type": "RateLimitInterval",
          "required": true,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1500."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "interval": {
              "name": "interval",
              "type": "RateLimitInterval",
              "required": true,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1500."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              [
                "number", // Open time
                "NumberString", // Open
                "NumberString", // High
                "NumberString", // Low
                "NumberString", // Close
                "NumberString", // Volume
                "number", // Close time
                "NumberString", // Quote asset volume
                "number", // Number of trades
                "NumberString", // Taker buy base asset volume
                "NumberString", // Taker buy quote asset volume
                "NumberString" // Ignore.
              ]
            ]
          ],
          "responseExamples": [
            [
              [
                1499040000000, // Open time
                "0.01634790", // Open
                "0.80000000", // High
                "0.01575800", // Low
                "0.01577100", // Close
                "148976.11427815", // Volume
                1499644799999, // Close time
                "2434.19055334", // Quote asset volume
                308, // Number of trades
                "1756.87402397", // Taker buy base asset volume
                "28.46694368", // Taker buy quote asset volume
                "17928899.62484339" // Ignore.
              ]
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.kline-candlestick-data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#kline-candlestick-data",
      "name": "Kline/Candlestick Data"
    },
    {
      "description": "Kline/candlestick bars for a specific contract type.",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/continuousKlines",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/continuousKlines",
      "hmacSHA256": false,
      "weights": {
        "IP": "\n(params :QueryStruct) =>\n    typeof(params[\"limit\"])==\"number\"\n        ? [[1001,10],[500,5],[100,2],[1,1]].find((item,i)=> (params[\"limit\"] as number)>=item[0] || i==0)! [1]\n        : (()=>{throw new Error(\"Parameter 'limit' is not a number\")})()",
        "IP_text": "Adjusted based on the limit:\nLIMIT       weight\n[1,100)     1     \n[100, 500)  2     \n[500, 1000] 5     \n> 1000      10    "
      },
      "baseParams": {
        "pair": {
          "name": "pair",
          "type": "string",
          "required": true,
          "description": ""
        },
        "contractType": {
          "name": "contractType",
          "type": "ENUM",
          "required": true,
          "description": ""
        },
        "interval": {
          "name": "interval",
          "type": "RateLimitInterval",
          "required": true,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1500."
        }
      },
      "overloads": [
        {
          "params": {
            "pair": {
              "name": "pair",
              "type": "string",
              "required": true,
              "description": ""
            },
            "contractType": {
              "name": "contractType",
              "type": "ENUM",
              "required": true,
              "description": ""
            },
            "interval": {
              "name": "interval",
              "type": "RateLimitInterval",
              "required": true,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1500."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              [
                "number", // Open time
                "NumberString", // Open
                "NumberString", // High
                "NumberString", // Low
                "NumberString", // Close (or latest price)
                "NumberString", // Volume
                "number", // Close time
                "NumberString", // Quote asset volume
                "number", // Number of trades
                "NumberString", // Taker buy volume
                "NumberString", // Taker buy quote asset volume
                "NumberString" // Ignore.
              ]
            ]
          ],
          "responseExamples": [
            [
              [
                1607444700000, // Open time
                "18879.99", // Open
                "18900.00", // High
                "18878.98", // Low
                "18896.13", // Close (or latest price)
                "492.363", // Volume
                1607444759999, // Close time
                "9302145.66080", // Quote asset volume
                1874, // Number of trades
                "385.983", // Taker buy volume
                "7292402.33267", // Taker buy quote asset volume
                "0" // Ignore.
              ]
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.continuous-contract-kline-candlestick-data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#continuous-contract-kline-candlestick-data",
      "name": "Continuous Contract Kline/Candlestick Data"
    },
    {
      "description": "Kline/candlestick bars for the index price of a pair.",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/indexPriceKlines",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/indexPriceKlines",
      "hmacSHA256": false,
      "weights": {
        "IP": "\n(params :QueryStruct) =>\n    typeof(params[\"limit\"])==\"number\"\n        ? [[1001,10],[500,5],[100,2],[1,1]].find((item,i)=> (params[\"limit\"] as number)>=item[0] || i==0)! [1]\n        : (()=>{throw new Error(\"Parameter 'limit' is not a number\")})()",
        "IP_text": "Adjusted based on the limit:\nLIMIT       weight\n[1,100)     1     \n[100, 500)  2     \n[500, 1000] 5     \n> 1000      10    "
      },
      "baseParams": {
        "pair": {
          "name": "pair",
          "type": "string",
          "required": true,
          "description": ""
        },
        "interval": {
          "name": "interval",
          "type": "RateLimitInterval",
          "required": true,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1500."
        }
      },
      "overloads": [
        {
          "params": {
            "pair": {
              "name": "pair",
              "type": "string",
              "required": true,
              "description": ""
            },
            "interval": {
              "name": "interval",
              "type": "RateLimitInterval",
              "required": true,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1500."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              [
                "number", // Open time
                "NumberString", // Open
                "NumberString", // High
                "NumberString", // Low
                "NumberString", // Close (or latest price)
                "NumberString", // Ignore
                "number", // Close time
                "NumberString", // Ignore
                "number", // Ignore
                "NumberString", // Ignore
                "NumberString", // Ignore
                "NumberString" // Ignore
              ]
            ]
          ],
          "responseExamples": [
            [
              [
                1591256400000, // Open time
                "9653.69440000", // Open
                "9653.69640000", // High
                "9651.38600000", // Low
                "9651.55200000", // Close (or latest price)
                "0  ", // Ignore
                1591256459999, // Close time
                "0", // Ignore
                60, // Ignore
                "0", // Ignore
                "0", // Ignore
                "0" // Ignore
              ]
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.index-price-kline-candlestick-data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#index-price-kline-candlestick-data",
      "name": "Index Price Kline/Candlestick Data"
    },
    {
      "description": "Kline/candlestick bars for the mark price of a symbol.",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/markPriceKlines",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/markPriceKlines",
      "hmacSHA256": false,
      "weights": {
        "IP": "\n(params :QueryStruct) =>\n    typeof(params[\"limit\"])==\"number\"\n        ? [[1001,10],[500,5],[100,2],[1,1]].find((item,i)=> (params[\"limit\"] as number)>=item[0] || i==0)! [1]\n        : (()=>{throw new Error(\"Parameter 'limit' is not a number\")})()",
        "IP_text": "Adjusted based on the limit:\nLIMIT       weight\n[1,100)     1     \n[100, 500)  2     \n[500, 1000] 5     \n> 1000      10    "
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "interval": {
          "name": "interval",
          "type": "RateLimitInterval",
          "required": true,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1500."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "interval": {
              "name": "interval",
              "type": "RateLimitInterval",
              "required": true,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1500."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              [
                "number", // Open time
                "NumberString", // Open
                "NumberString", // High
                "NumberString", // Low
                "NumberString", // Close (or latest price)
                "NumberString", // Ignore
                "number", // Close time
                "NumberString", // Ignore
                "number", // Ignore
                "NumberString", // Ignore
                "NumberString", // Ignore
                "NumberString" // Ignore
              ]
            ]
          ],
          "responseExamples": [
            [
              [
                1591256460000, // Open time
                "9653.29201333", // Open
                "9654.56401333", // High
                "9653.07367333", // Low
                "9653.07367333", // Close (or latest price)
                "0  ", // Ignore
                1591256519999, // Close time
                "0", // Ignore
                60, // Ignore
                "0", // Ignore
                "0", // Ignore
                "0" // Ignore
              ]
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.mark-price-kline-candlestick-data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#mark-price-kline-candlestick-data",
      "name": "Mark Price Kline/Candlestick Data"
    },
    {
      "description": "Premium index kline bars of a symbol.",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/premiumIndexKlines",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/premiumIndexKlines",
      "hmacSHA256": false,
      "weights": {
        "IP": "\n(params :QueryStruct) =>\n    typeof(params[\"limit\"])==\"number\"\n        ? [[1001,10],[500,5],[100,2],[1,1]].find((item,i)=> (params[\"limit\"] as number)>=item[0] || i==0)! [1]\n        : (()=>{throw new Error(\"Parameter 'limit' is not a number\")})()",
        "IP_text": "Adjusted based on the limit:\nLIMIT       weight\n[1,100)     1     \n[100, 500)  2     \n[500, 1000] 5     \n> 1000      10    "
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "interval": {
          "name": "interval",
          "type": "RateLimitInterval",
          "required": true,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1500."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "interval": {
              "name": "interval",
              "type": "RateLimitInterval",
              "required": true,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1500."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              [
                "number", // Open time
                "NumberString", // Open
                "NumberString", // High
                "NumberString", // Low
                "NumberString", // Close
                "NumberString", // Ignore
                "number", // Close time
                "NumberString", // Ignore
                "number", // Ignore
                "NumberString", // Ignore
                "NumberString", // Ignore
                "NumberString" // Ignore
              ]
            ]
          ],
          "responseExamples": [
            [
              [
                1691603820000, // Open time
                "-0.00042931", // Open
                "-0.00023641", // High
                "-0.00059406", // Low
                "-0.00043659", // Close
                "0", // Ignore
                1691603879999, // Close time
                "0", // Ignore
                12, // Ignore
                "0", // Ignore
                "0", // Ignore
                "0" // Ignore
              ]
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.premium-index-kline-data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#premium-index-kline-data",
      "name": "Premium index Kline Data"
    },
    {
      "description": "Mark Price and Funding Rate",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/premiumIndex",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/premiumIndex",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "1 with symbol; 10 without symbol"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            "",
            "(when symbol not sent)"
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "markPrice": "NumberString", // mark price
              "indexPrice": "NumberString", // index price
              "estimatedSettlePrice": "NumberString", // Estimated Settle Price, only useful in the last hour before the settlement starts.
              "lastFundingRate": "NumberString", // This is the Latest funding rate
              "nextFundingTime": "number",
              "interestRate": "NumberString",
              "time": "number"
            },
            [
              {
                "symbol": "string",
                "markPrice": "NumberString", // mark price
                "indexPrice": "NumberString", // index price
                "estimatedSettlePrice": "NumberString", // Estimated Settle Price, only useful in the last hour before the settlement starts.
                "lastFundingRate": "NumberString", // This is the lastest estimated funding rate
                "nextFundingTime": "number",
                "interestRate": "NumberString",
                "time": "number"
              }
            ]
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSDT",
              "markPrice": "11793.63104562", // mark price
              "indexPrice": "11781.80495970", // index price
              "estimatedSettlePrice": "11781.16138815", // Estimated Settle Price, only useful in the last hour before the settlement starts.
              "lastFundingRate": "0.00038246", // This is the Latest funding rate
              "nextFundingTime": 1597392000000,
              "interestRate": "0.00010000",
              "time": 1597370495002
            },
            [
              {
                "symbol": "BTCUSDT",
                "markPrice": "11793.63104562", // mark price
                "indexPrice": "11781.80495970", // index price
                "estimatedSettlePrice": "11781.16138815", // Estimated Settle Price, only useful in the last hour before the settlement starts.
                "lastFundingRate": "0.00038246", // This is the lastest estimated funding rate
                "nextFundingTime": 1597392000000,
                "interestRate": "0.00010000",
                "time": 1597370495002
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.mark-price",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#mark-price",
      "name": "Mark Price"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/fundingRate",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/fundingRate",
      "hmacSHA256": false,
      "weights": {
        "rateLimitPerIP": "500/5min",
        "sharedWithEndpoint": "/fapi/v1/fundingInfo"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get funding rate from INCLUSIVE."
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get funding rate  until INCLUSIVE."
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 100; max 1000"
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get funding rate from INCLUSIVE."
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get funding rate  until INCLUSIVE."
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 100; max 1000"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "fundingTime": "number",
                "fundingRate": "NumberString",
                "markPrice": "NumberString" // mark price associated with a particular funding fee charge
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSDT",
                "fundingTime": 1698768000000,
                "fundingRate": "0.00010000",
                "markPrice": "34287.54619963" // mark price associated with a particular funding fee charge
              },
              {
                "symbol": "BTCUSDT",
                "fundingTime": 1698796800000,
                "fundingRate": "0.00010000",
                "markPrice": "34651.40000000"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.get-funding-rate-history",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#get-funding-rate-history",
      "name": "Get Funding Rate History"
    },
    {
      "description": "Query funding rate info for symbols that had FundingRateCap/ FundingRateFloor / fundingIntervalHours adjustment",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/fundingInfo",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/fundingInfo",
      "hmacSHA256": false,
      "weights": {
        "rateLimitPerIP": "500/5min",
        "sharedWithEndpoint": "/fapi/v1/fundingInfo"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "adjustedFundingRateCap": "NumberString",
                "adjustedFundingRateFloor": "NumberString",
                "fundingIntervalHours": "number",
                "disclaimer": "boolean" // ingore
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BLZUSDT",
                "adjustedFundingRateCap": "0.02500000",
                "adjustedFundingRateFloor": "-0.02500000",
                "fundingIntervalHours": 8,
                "disclaimer": false // ingore
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.get-funding-rate-info",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#get-funding-rate-info",
      "name": "Get Funding Rate Info"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/ticker/24hr",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/ticker/24hr",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "1 for a single symbol;\n40 when the symbol parameter is omitted"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            "",
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "priceChange": "NumberString",
              "priceChangePercent": "NumberString",
              "weightedAvgPrice": "NumberString",
              "lastPrice": "NumberString",
              "lastQty": "NumberString",
              "openPrice": "NumberString",
              "highPrice": "NumberString",
              "lowPrice": "NumberString",
              "volume": "NumberString",
              "quoteVolume": "NumberString",
              "openTime": "number",
              "closeTime": "number",
              "firstId": "number", // First tradeId
              "lastId": "number", // Last tradeId
              "count": "number" // Trade count
            },
            [
              {
                "symbol": "string",
                "priceChange": "NumberString",
                "priceChangePercent": "NumberString",
                "weightedAvgPrice": "NumberString",
                "lastPrice": "NumberString",
                "lastQty": "NumberString",
                "openPrice": "NumberString",
                "highPrice": "NumberString",
                "lowPrice": "NumberString",
                "volume": "NumberString",
                "quoteVolume": "NumberString",
                "openTime": "number",
                "closeTime": "number",
                "firstId": "number", // First tradeId
                "lastId": "number", // Last tradeId
                "count": "number" // Trade count
              }
            ]
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSDT",
              "priceChange": "-94.99999800",
              "priceChangePercent": "-95.960",
              "weightedAvgPrice": "0.29628482",
              "lastPrice": "4.00000200",
              "lastQty": "200.00000000",
              "openPrice": "99.00000000",
              "highPrice": "100.00000000",
              "lowPrice": "0.10000000",
              "volume": "8913.30000000",
              "quoteVolume": "15.30000000",
              "openTime": 1499783499040,
              "closeTime": 1499869899040,
              "firstId": 28385, // First tradeId
              "lastId": 28460, // Last tradeId
              "count": 76 // Trade count
            },
            [
              {
                "symbol": "BTCUSDT",
                "priceChange": "-94.99999800",
                "priceChangePercent": "-95.960",
                "weightedAvgPrice": "0.29628482",
                "lastPrice": "4.00000200",
                "lastQty": "200.00000000",
                "openPrice": "99.00000000",
                "highPrice": "100.00000000",
                "lowPrice": "0.10000000",
                "volume": "8913.30000000",
                "quoteVolume": "15.30000000",
                "openTime": 1499783499040,
                "closeTime": 1499869899040,
                "firstId": 28385, // First tradeId
                "lastId": 28460, // Last tradeId
                "count": 76 // Trade count
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.24hr-ticker-price-change-statistics",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#24hr-ticker-price-change-statistics",
      "name": "24hr Ticker Price Change Statistics"
    },
    {
      "description": "Latest price for a symbol or symbols.",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/ticker/price",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/ticker/price",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "1 for a single symbol;\n2 when the symbol parameter is omitted"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            "",
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "price": "NumberString",
              "time": "number" // Transaction time
            },
            [
              {
                "symbol": "string",
                "price": "NumberString",
                "time": "number"
              }
            ]
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSDT",
              "price": "6000.01",
              "time": 1589437530011 // Transaction time
            },
            [
              {
                "symbol": "BTCUSDT",
                "price": "6000.01",
                "time": 1589437530011
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.symbol-price-ticker",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#symbol-price-ticker",
      "name": "Symbol Price Ticker"
    },
    {
      "description": "Latest price for a symbol or symbols.",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v2/ticker/price",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v2/ticker/price",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "with symbol 1\nno symbol 2"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            "",
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "price": "NumberString",
              "time": "number" // Transaction time
            },
            [
              {
                "symbol": "string",
                "price": "NumberString",
                "time": "number"
              }
            ]
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSDT",
              "price": "6000.01",
              "time": 1589437530011 // Transaction time
            },
            [
              {
                "symbol": "BTCUSDT",
                "price": "6000.01",
                "time": 1589437530011
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.symbol-price-ticker-v2",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#symbol-price-ticker-v2",
      "name": "Symbol Price Ticker V2"
    },
    {
      "description": "Best price/qty on the order book for a symbol or symbols.",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/ticker/bookTicker",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/ticker/bookTicker",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "2 for a single symbol;\n5 when the symbol parameter is omitted"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            "",
            ""
          ],
          "responseTypes": [
            {
              "lastUpdateId": "number",
              "symbol": "string",
              "bidPrice": "NumberString",
              "bidQty": "NumberString",
              "askPrice": "NumberString",
              "askQty": "NumberString",
              "time": "number" // Transaction time
            },
            [
              {
                "lastUpdateId": "number",
                "symbol": "string",
                "bidPrice": "NumberString",
                "bidQty": "NumberString",
                "askPrice": "NumberString",
                "askQty": "NumberString",
                "time": "number"
              }
            ]
          ],
          "responseExamples": [
            {
              "lastUpdateId": 1027024,
              "symbol": "BTCUSDT",
              "bidPrice": "4.00000000",
              "bidQty": "431.00000000",
              "askPrice": "4.00000200",
              "askQty": "9.00000000",
              "time": 1589437530011 // Transaction time
            },
            [
              {
                "lastUpdateId": 1027024,
                "symbol": "BTCUSDT",
                "bidPrice": "4.00000000",
                "bidQty": "431.00000000",
                "askPrice": "4.00000200",
                "askQty": "9.00000000",
                "time": 1589437530011
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.symbol-order-book-ticker",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#symbol-order-book-ticker",
      "name": "Symbol Order Book Ticker"
    },
    {
      "description": "Get present open interest of a specific symbol.",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/openInterest",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/openInterest",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "openInterest": "NumberString",
              "symbol": "string",
              "time": "number" // Transaction time
            }
          ],
          "responseExamples": [
            {
              "openInterest": "10659.509",
              "symbol": "BTCUSDT",
              "time": 1589437530011 // Transaction time
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.open-interest",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#open-interest",
      "name": "Open Interest"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /futures/data/delivery-price",
      "requestMethod": "GET",
      "requestEndPoint": "/futures/data/delivery-price",
      "hmacSHA256": false,
      "weights": {},
      "baseParams": {
        "pair": {
          "name": "pair",
          "type": "string",
          "required": true,
          "description": "e.g BTCUSDT"
        }
      },
      "overloads": [
        {
          "params": {
            "pair": {
              "name": "pair",
              "type": "string",
              "required": true,
              "description": "e.g BTCUSDT"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "deliveryTime": "number",
                "deliveryPrice": "number"
              },
              null,
              null,
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "deliveryTime": 1695945600000,
                "deliveryPrice": 27103
              },
              {
                "deliveryTime": 1688083200000,
                "deliveryPrice": 30733.6
              },
              {
                "deliveryTime": 1680220800000,
                "deliveryPrice": 27814.2
              },
              {
                "deliveryTime": 1648166400000,
                "deliveryPrice": 44066.3
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.quarterly-contract-settlement-price",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#quarterly-contract-settlement-price",
      "name": "Quarterly Contract Settlement Price"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /futures/data/openInterestHist",
      "requestMethod": "GET",
      "requestEndPoint": "/futures/data/openInterestHist",
      "hmacSHA256": false,
      "weights": {
        "rateLimitPerIP": "1000/5min"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "period": {
          "name": "period",
          "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
          "required": true,
          "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "default 30, max 500"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "period": {
              "name": "period",
              "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
              "required": true,
              "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "default 30, max 500"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "sumOpenInterest": "NumberString", // total open interest
                "sumOpenInterestValue": "NumberString", // total open interest value
                "timestamp": "NumberString"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSDT",
                "sumOpenInterest": "20403.63700000", // total open interest
                "sumOpenInterestValue": "150570784.07809979", // total open interest value
                "timestamp": "1583127900000"
              },
              {
                "symbol": "BTCUSDT",
                "sumOpenInterest": "20401.36700000",
                "sumOpenInterestValue": "149940752.14464448",
                "timestamp": "1583128200000"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.open-interest-statistics",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#open-interest-statistics",
      "name": "Open Interest Statistics"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /futures/data/topLongShortAccountRatio",
      "requestMethod": "GET",
      "requestEndPoint": "/futures/data/topLongShortAccountRatio",
      "hmacSHA256": false,
      "weights": {
        "rateLimitPerIP": "1000/5min"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "period": {
          "name": "period",
          "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
          "required": true,
          "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "default 30, max 500"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "period": {
              "name": "period",
              "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
              "required": true,
              "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "default 30, max 500"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "longShortRatio": "NumberString", // long/short account num ratio of top traders
                "longAccount": "NumberString", // long account num ratio of top traders
                "shortAccount": "NumberString", // long account num ratio of top traders
                "timestamp": "NumberString"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSDT",
                "longShortRatio": "1.8105", // long/short account num ratio of top traders
                "longAccount": "0.6442", // long account num ratio of top traders
                "shortAccount": "0.3558", // long account num ratio of top traders
                "timestamp": "1583139600000"
              },
              {
                "symbol": "BTCUSDT",
                "longShortRatio": "0.5576",
                "longAccount": "0.3580",
                "shortAccount": "0.6420",
                "timestamp": "1583139900000"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.top-trader-long-short-ratio-accounts",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#top-trader-long-short-ratio-accounts",
      "name": "Top Trader Long/Short Ratio (Accounts)"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /futures/data/topLongShortPositionRatio",
      "requestMethod": "GET",
      "requestEndPoint": "/futures/data/topLongShortPositionRatio",
      "hmacSHA256": false,
      "weights": {
        "rateLimitPerIP": "1000/5min"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "period": {
          "name": "period",
          "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
          "required": true,
          "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "default 30, max 500"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "period": {
              "name": "period",
              "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
              "required": true,
              "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "default 30, max 500"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "longShortRatio": "NumberString", // long/short position ratio of top traders
                "longAccount": "NumberString", // long positions ratio of top traders
                "shortAccount": "NumberString", // short positions ratio of top traders
                "timestamp": "NumberString"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSDT",
                "longShortRatio": "1.4342", // long/short position ratio of top traders
                "longAccount": "0.5891", // long positions ratio of top traders
                "shortAccount": "0.4656", // short positions ratio of top traders
                "timestamp": "1583139600000"
              },
              {
                "symbol": "BTCUSDT",
                "longShortRatio": "1.4337",
                "longAccount": "0.3583",
                "shortAccount": "0.6417",
                "timestamp": "1583139900000"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.top-trader-long-short-ratio-positions",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#top-trader-long-short-ratio-positions",
      "name": "Top Trader Long/Short Ratio (Positions)"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /futures/data/globalLongShortAccountRatio",
      "requestMethod": "GET",
      "requestEndPoint": "/futures/data/globalLongShortAccountRatio",
      "hmacSHA256": false,
      "weights": {
        "rateLimitPerIP": "1000/5min"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "period": {
          "name": "period",
          "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
          "required": true,
          "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "default 30, max 500"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "period": {
              "name": "period",
              "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
              "required": true,
              "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "default 30, max 500"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string", // long/short account num ratio of all traders
                "longShortRatio": "NumberString", //long account num ratio of all traders
                "longAccount": "NumberString", // short account num ratio of all traders
                "shortAccount": "NumberString",
                "timestamp": "NumberString"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSDT", // long/short account num ratio of all traders
                "longShortRatio": "0.1960", //long account num ratio of all traders
                "longAccount": "0.6622", // short account num ratio of all traders
                "shortAccount": "0.3378",
                "timestamp": "1583139600000"
              },
              {
                "symbol": "BTCUSDT",
                "longShortRatio": "1.9559",
                "longAccount": "0.6617",
                "shortAccount": "0.3382",
                "timestamp": "1583139900000"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.long-short-ratio",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#long-short-ratio",
      "name": "Long/Short Ratio"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /futures/data/takerlongshortRatio",
      "requestMethod": "GET",
      "requestEndPoint": "/futures/data/takerlongshortRatio",
      "hmacSHA256": false,
      "weights": {
        "rateLimitPerIP": "1000/5min"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "period": {
          "name": "period",
          "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
          "required": true,
          "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "default 30, max 500"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "period": {
              "name": "period",
              "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
              "required": true,
              "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "default 30, max 500"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "buySellRatio": "NumberString",
                "buyVol": "NumberString",
                "sellVol": "NumberString",
                "timestamp": "NumberString"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "buySellRatio": "1.5586",
                "buyVol": "387.3300",
                "sellVol": "248.5030",
                "timestamp": "1585614900000"
              },
              {
                "buySellRatio": "1.3104",
                "buyVol": "343.9290",
                "sellVol": "248.5030",
                "timestamp": "1583139900000"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.taker-buy-sell-volume",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#taker-buy-sell-volume",
      "name": "Taker Buy/Sell Volume"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /futures/data/basis",
      "requestMethod": "GET",
      "requestEndPoint": "/futures/data/basis",
      "hmacSHA256": false,
      "weights": {},
      "baseParams": {
        "pair": {
          "name": "pair",
          "type": "string",
          "required": true,
          "description": "BTCUSDT"
        },
        "contractType": {
          "name": "contractType",
          "type": "\"CURRENT_QUARTER\"|\"NEXT_QUARTER\"|\"PERPETUAL\"",
          "required": true,
          "description": "CURRENT_QUARTER, NEXT_QUARTER, PERPETUAL"
        },
        "period": {
          "name": "period",
          "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
          "required": true,
          "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": true,
          "description": "Default 30,Max 500"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "pair": {
              "name": "pair",
              "type": "string",
              "required": true,
              "description": "BTCUSDT"
            },
            "contractType": {
              "name": "contractType",
              "type": "\"CURRENT_QUARTER\"|\"NEXT_QUARTER\"|\"PERPETUAL\"",
              "required": true,
              "description": "CURRENT_QUARTER, NEXT_QUARTER, PERPETUAL"
            },
            "period": {
              "name": "period",
              "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
              "required": true,
              "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": true,
              "description": "Default 30,Max 500"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "indexPrice": "NumberString",
                "contractType": "string",
                "basisRate": "NumberString",
                "futuresPrice": "NumberString",
                "annualizedBasisRate": "string",
                "basis": "NumberString",
                "pair": "string",
                "timestamp": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "indexPrice": "34400.15945055",
                "contractType": "PERPETUAL",
                "basisRate": "0.0004",
                "futuresPrice": "34414.10",
                "annualizedBasisRate": "",
                "basis": "13.94054945",
                "pair": "BTCUSDT",
                "timestamp": 1698742800000
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.basis",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#basis",
      "name": "Basis"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/indexInfo",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/indexInfo",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "with symbol 1; without symbol 10"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "time": "number", // Current time
                "component": "string", //Component asset
                "baseAssetList": [
                  {
                    "baseAsset": "string",
                    "quoteAsset": "string",
                    "weightInQuantity": "NumberString",
                    "weightInPercentage": "NumberString"
                  },
                  null
                ]
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "DEFIUSDT",
                "time": 1589437530011, // Current time
                "component": "baseAsset", //Component asset
                "baseAssetList": [
                  {
                    "baseAsset": "BAL",
                    "quoteAsset": "USDT",
                    "weightInQuantity": "1.04406228",
                    "weightInPercentage": "0.02783900"
                  },
                  {
                    "baseAsset": "BAND",
                    "quoteAsset": "USDT",
                    "weightInQuantity": "3.53782729",
                    "weightInPercentage": "0.03935200"
                  }
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.composite-index-symbol-information",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#composite-index-symbol-information",
      "name": "Composite Index Symbol Information"
    },
    {
      "description": "asset index for Multi-Assets mode",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/assetIndex",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/assetIndex",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "1 for a single symbol; 10 when the symbol parameter is omitted"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": "Asset pair"
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": "Asset pair"
            }
          },
          "responseNames": [
            "",
            "Or(without symbol)"
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "time": "number",
              "index": "NumberString",
              "bidBuffer": "NumberString",
              "askBuffer": "NumberString",
              "bidRate": "NumberString",
              "askRate": "NumberString",
              "autoExchangeBidBuffer": "NumberString",
              "autoExchangeAskBuffer": "NumberString",
              "autoExchangeBidRate": "NumberString",
              "autoExchangeAskRate": "NumberString"
            },
            [
              {
                "symbol": "string",
                "time": "number",
                "index": "NumberString",
                "bidBuffer": "NumberString",
                "askBuffer": "NumberString",
                "bidRate": "NumberString",
                "askRate": "NumberString",
                "autoExchangeBidBuffer": "NumberString",
                "autoExchangeAskBuffer": "NumberString",
                "autoExchangeBidRate": "NumberString",
                "autoExchangeAskRate": "NumberString"
              }
            ]
          ],
          "responseExamples": [
            {
              "symbol": "ADAUSD",
              "time": 1635740268004,
              "index": "1.92957370",
              "bidBuffer": "0.10000000",
              "askBuffer": "0.10000000",
              "bidRate": "1.73661633",
              "askRate": "2.12253107",
              "autoExchangeBidBuffer": "0.05000000",
              "autoExchangeAskBuffer": "0.05000000",
              "autoExchangeBidRate": "1.83309501",
              "autoExchangeAskRate": "2.02605238"
            },
            [
              {
                "symbol": "ADAUSD",
                "time": 1635740268004,
                "index": "1.92957370",
                "bidBuffer": "0.10000000",
                "askBuffer": "0.10000000",
                "bidRate": "1.73661633",
                "askRate": "2.12253107",
                "autoExchangeBidBuffer": "0.05000000",
                "autoExchangeAskBuffer": "0.05000000",
                "autoExchangeBidRate": "1.83309501",
                "autoExchangeAskRate": "2.02605238"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.multi-assets-mode-asset-index",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#multi-assets-mode-asset-index",
      "name": "Multi-Assets Mode Asset Index"
    },
    {
      "description": "Query index price constituents ",
      "securityType": "MARKET_DATA",
      "request": "GET /fapi/v1/constituents",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/constituents",
      "hmacSHA256": false,
      "weights": {
        "IP": 2,
        "IP_text": "2"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "symbol"
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "symbol"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "time": "number",
              "constituents": [
                {
                  "exchange": "string",
                  "symbol": "string"
                },
                null,
                null,
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSDT",
              "time": 1697421272043,
              "constituents": [
                {
                  "exchange": "binance",
                  "symbol": "BTCUSDT"
                },
                {
                  "exchange": "okex",
                  "symbol": "BTC-USDT"
                },
                {
                  "exchange": "huobi",
                  "symbol": "btcusdt"
                },
                {
                  "exchange": "coinbase",
                  "symbol": "BTC-USDT"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.query-index-price-constituents",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#query-index-price-constituents",
      "name": "Query Index Price Constituents"
    },
    {
      "securityType": "TRADE",
      "request": "POST /fapi/v1/positionSide/dual",
      "requestMethod": "POST",
      "requestEndPoint": "/fapi/v1/positionSide/dual",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "dualSidePosition": {
          "name": "dualSidePosition",
          "type": "string",
          "required": true,
          "description": "\"true\": Hedge Mode; \"false\": One-way Mode"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "dualSidePosition": {
              "name": "dualSidePosition",
              "type": "string",
              "required": true,
              "description": "\"true\": Hedge Mode; \"false\": One-way Mode"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "code": 200,
              "msg": "success"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.change-position-mode-trade",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#change-position-mode-trade",
      "name": "Change Position Mode(TRADE)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/positionSide/dual",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/positionSide/dual",
      "hmacSHA256": false,
      "weights": {
        "IP": 30,
        "IP_text": "30"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "dualSidePosition": "boolean" // "true": Hedge Mode; "false": One-way Mode
            }
          ],
          "responseExamples": [
            {
              "dualSidePosition": true // "true": Hedge Mode; "false": One-way Mode
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-current-position-mode-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#get-current-position-mode-user_data",
      "name": "Get Current Position Mode(USER_DATA)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /fapi/v1/multiAssetsMargin",
      "requestMethod": "POST",
      "requestEndPoint": "/fapi/v1/multiAssetsMargin",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "multiAssetsMargin": {
          "name": "multiAssetsMargin",
          "type": "string",
          "required": true,
          "description": "\"true\": Multi-Assets Mode; \"false\": Single-Asset Mode"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "multiAssetsMargin": {
              "name": "multiAssetsMargin",
              "type": "string",
              "required": true,
              "description": "\"true\": Multi-Assets Mode; \"false\": Single-Asset Mode"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "code": 200,
              "msg": "success"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.change-multi-assets-mode-trade",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#change-multi-assets-mode-trade",
      "name": "Change Multi-Assets Mode (TRADE)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/multiAssetsMargin",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/multiAssetsMargin",
      "hmacSHA256": false,
      "weights": {
        "IP": 30,
        "IP_text": "30"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "multiAssetsMargin": "boolean" // "true": Multi-Assets Mode; "false": Single-Asset Mode
            }
          ],
          "responseExamples": [
            {
              "multiAssetsMargin": true // "true": Multi-Assets Mode; "false": Single-Asset Mode
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-current-multi-assets-mode-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#get-current-multi-assets-mode-user_data",
      "name": "Get Current Multi-Assets Mode (USER_DATA)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /fapi/v1/feeBurn",
      "requestMethod": "POST",
      "requestEndPoint": "/fapi/v1/feeBurn",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "feeBurn": {
          "name": "feeBurn",
          "type": "string",
          "required": true,
          "description": "\"true\": Fee Discount On; \"false\": Fee Discount Off"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "feeBurn": {
              "name": "feeBurn",
              "type": "string",
              "required": true,
              "description": "\"true\": Fee Discount On; \"false\": Fee Discount Off"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "code": 200,
              "msg": "success"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.toggle-bnb-burn-on-futures-trade-trade",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#toggle-bnb-burn-on-futures-trade-trade",
      "name": "Toggle BNB Burn On Futures Trade (TRADE)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/feeBurn",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/feeBurn",
      "hmacSHA256": true,
      "weights": {
        "IP": 30,
        "IP_text": "30"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "feeBurn": "boolean" // "true": Fee Discount On; "false": Fee Discount Off
            }
          ],
          "responseExamples": [
            {
              "feeBurn": true // "true": Fee Discount On; "false": Fee Discount Off
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-bnb-burn-status-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#get-bnb-burn-status-user_data",
      "name": "Get BNB Burn Status (USER_DATA)"
    },
    {
      "description": "Send in a new order.",
      "securityType": "TRADE",
      "request": "POST /fapi/v1/order",
      "requestMethod": "POST",
      "requestEndPoint": "/fapi/v1/order",
      "hmacSHA256": false,
      "weights": {
        "IP": 0,
        "IP_text": "0"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": ""
        },
        "positionSide": {
          "name": "positionSide",
          "type": "PositionSide",
          "required": false,
          "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode."
        },
        "type": {
          "name": "type",
          "type": "OrderType",
          "required": true,
          "description": ""
        },
        "timeInForce": {
          "name": "timeInForce",
          "type": "TimeInForce",
          "required": false,
          "description": ""
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": false,
          "description": "Cannot be sent with closePosition=true(Close-All)"
        },
        "reduceOnly": {
          "name": "reduceOnly",
          "type": "\"true\"|\"false\"",
          "required": false,
          "description": "\"true\" or \"false\". default \"false\". Cannot be sent in Hedge Mode; cannot be sent with closePosition=true"
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "newClientOrderId": {
          "name": "newClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: ^[\\.A-Z\\:/a-z0-9_-]{1,36}$"
        },
        "stopPrice": {
          "name": "stopPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
        },
        "closePosition": {
          "name": "closePosition",
          "type": "string",
          "required": false,
          "description": "true, false；Close-All，used with STOP_MARKET or TAKE_PROFIT_MARKET."
        },
        "activationPrice": {
          "name": "activationPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with TRAILING_STOP_MARKET orders, default as the latest price(supporting different workingType)"
        },
        "callbackRate": {
          "name": "callbackRate",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with TRAILING_STOP_MARKET orders, min 0.1, max 10, where 1 for 1%"
        },
        "workingType": {
          "name": "workingType",
          "type": "WorkingType",
          "required": false,
          "description": "stopPrice triggered by: \"MARK_PRICE\", \"CONTRACT_PRICE\". Default \"CONTRACT_PRICE\""
        },
        "priceProtect": {
          "name": "priceProtect",
          "type": "\"TRUE\"|\"FALSE\"",
          "required": false,
          "description": "\"TRUE\" or \"FALSE\", default \"FALSE\". Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "OrderResponseType",
          "required": false,
          "description": "\"ACK\", \"RESULT\", default \"ACK\""
        },
        "priceMatch": {
          "name": "priceMatch",
          "type": "PriceMatch",
          "required": false,
          "description": "only avaliable for LIMIT/STOP/TAKE_PROFIT order; can be set to OPPONENT/ OPPONENT_5/ OPPONENT_10/ OPPONENT_20: /QUEUE/ QUEUE_5/ QUEUE_10/ QUEUE_20; Can't be passed together with price"
        },
        "selfTradePreventionMode": {
          "name": "selfTradePreventionMode",
          "type": "ENUM",
          "required": false,
          "description": "NONE:No STP / EXPIRE_TAKER:expire taker order when STP triggers/ EXPIRE_MAKER:expire maker order when STP triggers/ EXPIRE_BOTH:expire both orders when STP triggers; default NONE"
        },
        "goodTillDate": {
          "name": "goodTillDate",
          "type": "LONG",
          "required": false,
          "description": "order cancel time for timeInForce GTD, mandatory when timeInforce set to GTD; order the timestamp only retains second-level precision, ms part will be ignored; The goodTillDate timestamp must be greater than the current time plus 600 seconds and smaller than 253402300799000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": ""
            },
            "positionSide": {
              "name": "positionSide",
              "type": "PositionSide",
              "required": false,
              "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode."
            },
            "type": {
              "name": "type",
              "type": "OrderType",
              "required": true,
              "description": ""
            },
            "timeInForce": {
              "name": "timeInForce",
              "type": "TimeInForce",
              "required": false,
              "description": ""
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": false,
              "description": "Cannot be sent with closePosition=true(Close-All)"
            },
            "reduceOnly": {
              "name": "reduceOnly",
              "type": "\"true\"|\"false\"",
              "required": false,
              "description": "\"true\" or \"false\". default \"false\". Cannot be sent in Hedge Mode; cannot be sent with closePosition=true"
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "newClientOrderId": {
              "name": "newClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: ^[\\.A-Z\\:/a-z0-9_-]{1,36}$"
            },
            "stopPrice": {
              "name": "stopPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
            },
            "closePosition": {
              "name": "closePosition",
              "type": "string",
              "required": false,
              "description": "true, false；Close-All，used with STOP_MARKET or TAKE_PROFIT_MARKET."
            },
            "activationPrice": {
              "name": "activationPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with TRAILING_STOP_MARKET orders, default as the latest price(supporting different workingType)"
            },
            "callbackRate": {
              "name": "callbackRate",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with TRAILING_STOP_MARKET orders, min 0.1, max 10, where 1 for 1%"
            },
            "workingType": {
              "name": "workingType",
              "type": "WorkingType",
              "required": false,
              "description": "stopPrice triggered by: \"MARK_PRICE\", \"CONTRACT_PRICE\". Default \"CONTRACT_PRICE\""
            },
            "priceProtect": {
              "name": "priceProtect",
              "type": "\"TRUE\"|\"FALSE\"",
              "required": false,
              "description": "\"TRUE\" or \"FALSE\", default \"FALSE\". Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "OrderResponseType",
              "required": false,
              "description": "\"ACK\", \"RESULT\", default \"ACK\""
            },
            "priceMatch": {
              "name": "priceMatch",
              "type": "PriceMatch",
              "required": false,
              "description": "only avaliable for LIMIT/STOP/TAKE_PROFIT order; can be set to OPPONENT/ OPPONENT_5/ OPPONENT_10/ OPPONENT_20: /QUEUE/ QUEUE_5/ QUEUE_10/ QUEUE_20; Can't be passed together with price"
            },
            "selfTradePreventionMode": {
              "name": "selfTradePreventionMode",
              "type": "ENUM",
              "required": false,
              "description": "NONE:No STP / EXPIRE_TAKER:expire taker order when STP triggers/ EXPIRE_MAKER:expire maker order when STP triggers/ EXPIRE_BOTH:expire both orders when STP triggers; default NONE"
            },
            "goodTillDate": {
              "name": "goodTillDate",
              "type": "LONG",
              "required": false,
              "description": "order cancel time for timeInForce GTD, mandatory when timeInforce set to GTD; order the timestamp only retains second-level precision, ms part will be ignored; The goodTillDate timestamp must be greater than the current time plus 600 seconds and smaller than 253402300799000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "clientOrderId": "string",
              "cumQty": "NumberString",
              "cumQuote": "NumberString",
              "executedQty": "NumberString",
              "orderId": "number",
              "avgPrice": "NumberString",
              "origQty": "NumberString",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "status": "string",
              "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
              "closePosition": "boolean", // if Close-All
              "symbol": "string",
              "timeInForce": "string",
              "type": "string",
              "origType": "string",
              "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
              "updateTime": "number",
              "workingType": "WorkingType",
              "priceProtect": "boolean", // if conditional order trigger is protected
              "priceMatch": "PriceMatch", //price match mode
              "selfTradePreventionMode": "string", //self trading preventation mode
              "goodTillDate": "number" //order pre-set auot cancel time for TIF GTD order
            }
          ],
          "responseExamples": [
            {
              "clientOrderId": "testOrder",
              "cumQty": "0",
              "cumQuote": "0",
              "executedQty": "0",
              "orderId": 22542179,
              "avgPrice": "0.00000",
              "origQty": "10",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "status": "NEW",
              "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
              "closePosition": false, // if Close-All
              "symbol": "BTCUSDT",
              "timeInForce": "GTD",
              "type": "TRAILING_STOP_MARKET",
              "origType": "TRAILING_STOP_MARKET",
              "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
              "updateTime": 1566818724722,
              "workingType": "CONTRACT_PRICE",
              "priceProtect": false, // if conditional order trigger is protected
              "priceMatch": "NONE", //price match mode
              "selfTradePreventionMode": "NONE", //self trading preventation mode
              "goodTillDate": 1693207680000 //order pre-set auot cancel time for TIF GTD order
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.new-order-trade",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#new-order-trade",
      "name": "New Order  (TRADE)"
    },
    {
      "description": "Testing order request, this order will not be submitted to matching engine",
      "securityType": "TRADE",
      "request": "POST /fapi/v1/order/test",
      "requestMethod": "POST",
      "requestEndPoint": "/fapi/v1/order/test",
      "hmacSHA256": false,
      "weights": {
        "IP": 0,
        "IP_text": "0"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": ""
        },
        "positionSide": {
          "name": "positionSide",
          "type": "PositionSide",
          "required": false,
          "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode."
        },
        "type": {
          "name": "type",
          "type": "OrderType",
          "required": true,
          "description": ""
        },
        "timeInForce": {
          "name": "timeInForce",
          "type": "TimeInForce",
          "required": false,
          "description": ""
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": false,
          "description": "Cannot be sent with closePosition=true(Close-All)"
        },
        "reduceOnly": {
          "name": "reduceOnly",
          "type": "\"true\"|\"false\"",
          "required": false,
          "description": "\"true\" or \"false\". default \"false\". Cannot be sent in Hedge Mode; cannot be sent with closePosition=true"
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "newClientOrderId": {
          "name": "newClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: ^[\\.A-Z\\:/a-z0-9_-]{1,36}$"
        },
        "stopPrice": {
          "name": "stopPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
        },
        "closePosition": {
          "name": "closePosition",
          "type": "string",
          "required": false,
          "description": "true, false；Close-All，used with STOP_MARKET or TAKE_PROFIT_MARKET."
        },
        "activationPrice": {
          "name": "activationPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with TRAILING_STOP_MARKET orders, default as the latest price(supporting different workingType)"
        },
        "callbackRate": {
          "name": "callbackRate",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with TRAILING_STOP_MARKET orders, min 0.1, max 10, where 1 for 1%"
        },
        "workingType": {
          "name": "workingType",
          "type": "WorkingType",
          "required": false,
          "description": "stopPrice triggered by: \"MARK_PRICE\", \"CONTRACT_PRICE\". Default \"CONTRACT_PRICE\""
        },
        "priceProtect": {
          "name": "priceProtect",
          "type": "\"TRUE\"|\"FALSE\"",
          "required": false,
          "description": "\"TRUE\" or \"FALSE\", default \"FALSE\". Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "OrderResponseType",
          "required": false,
          "description": "\"ACK\", \"RESULT\", default \"ACK\""
        },
        "priceMatch": {
          "name": "priceMatch",
          "type": "PriceMatch",
          "required": false,
          "description": "only avaliable for LIMIT/STOP/TAKE_PROFIT order; can be set to OPPONENT/ OPPONENT_5/ OPPONENT_10/ OPPONENT_20: /QUEUE/ QUEUE_5/ QUEUE_10/ QUEUE_20; Can't be passed together with price"
        },
        "selfTradePreventionMode": {
          "name": "selfTradePreventionMode",
          "type": "ENUM",
          "required": false,
          "description": "NONE:No STP / EXPIRE_TAKER:expire taker order when STP triggers/ EXPIRE_MAKER:expire maker order when STP triggers/ EXPIRE_BOTH:expire both orders when STP triggers; default NONE"
        },
        "goodTillDate": {
          "name": "goodTillDate",
          "type": "LONG",
          "required": false,
          "description": "order cancel time for timeInForce GTD, mandatory when timeInforce set to GTD; order the timestamp only retains second-level precision, ms part will be ignored; The goodTillDate timestamp must be greater than the current time plus 600 seconds and smaller than 253402300799000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": ""
            },
            "positionSide": {
              "name": "positionSide",
              "type": "PositionSide",
              "required": false,
              "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode."
            },
            "type": {
              "name": "type",
              "type": "OrderType",
              "required": true,
              "description": ""
            },
            "timeInForce": {
              "name": "timeInForce",
              "type": "TimeInForce",
              "required": false,
              "description": ""
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": false,
              "description": "Cannot be sent with closePosition=true(Close-All)"
            },
            "reduceOnly": {
              "name": "reduceOnly",
              "type": "\"true\"|\"false\"",
              "required": false,
              "description": "\"true\" or \"false\". default \"false\". Cannot be sent in Hedge Mode; cannot be sent with closePosition=true"
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "newClientOrderId": {
              "name": "newClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: ^[\\.A-Z\\:/a-z0-9_-]{1,36}$"
            },
            "stopPrice": {
              "name": "stopPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
            },
            "closePosition": {
              "name": "closePosition",
              "type": "string",
              "required": false,
              "description": "true, false；Close-All，used with STOP_MARKET or TAKE_PROFIT_MARKET."
            },
            "activationPrice": {
              "name": "activationPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with TRAILING_STOP_MARKET orders, default as the latest price(supporting different workingType)"
            },
            "callbackRate": {
              "name": "callbackRate",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with TRAILING_STOP_MARKET orders, min 0.1, max 10, where 1 for 1%"
            },
            "workingType": {
              "name": "workingType",
              "type": "WorkingType",
              "required": false,
              "description": "stopPrice triggered by: \"MARK_PRICE\", \"CONTRACT_PRICE\". Default \"CONTRACT_PRICE\""
            },
            "priceProtect": {
              "name": "priceProtect",
              "type": "\"TRUE\"|\"FALSE\"",
              "required": false,
              "description": "\"TRUE\" or \"FALSE\", default \"FALSE\". Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "OrderResponseType",
              "required": false,
              "description": "\"ACK\", \"RESULT\", default \"ACK\""
            },
            "priceMatch": {
              "name": "priceMatch",
              "type": "PriceMatch",
              "required": false,
              "description": "only avaliable for LIMIT/STOP/TAKE_PROFIT order; can be set to OPPONENT/ OPPONENT_5/ OPPONENT_10/ OPPONENT_20: /QUEUE/ QUEUE_5/ QUEUE_10/ QUEUE_20; Can't be passed together with price"
            },
            "selfTradePreventionMode": {
              "name": "selfTradePreventionMode",
              "type": "ENUM",
              "required": false,
              "description": "NONE:No STP / EXPIRE_TAKER:expire taker order when STP triggers/ EXPIRE_MAKER:expire maker order when STP triggers/ EXPIRE_BOTH:expire both orders when STP triggers; default NONE"
            },
            "goodTillDate": {
              "name": "goodTillDate",
              "type": "LONG",
              "required": false,
              "description": "order cancel time for timeInForce GTD, mandatory when timeInforce set to GTD; order the timestamp only retains second-level precision, ms part will be ignored; The goodTillDate timestamp must be greater than the current time plus 600 seconds and smaller than 253402300799000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            "unknown"
          ],
          "responseExamples": [
            null
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.test-order-trade",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#test-order-trade",
      "name": "Test Order(TRADE)"
    },
    {
      "description": "Order modify function, currently only LIMIT order modification is supported, modified orders will be reordered in the match queue",
      "securityType": "TRADE",
      "request": "PUT /fapi/v1/order",
      "requestMethod": "PUT",
      "requestEndPoint": "/fapi/v1/order",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "orderCounts": [
          "1/10s",
          "1/1min"
        ],
        "IP_text": "\n1 on IP rate limit(x-mbx-used-weight-1m)",
        "orders_text": "\n1 on 10s order rate limit(X-MBX-ORDER-COUNT-10S);\n\n1 on 1min order rate limit(X-MBX-ORDER-COUNT-1M)"
      },
      "baseParams": {
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "side": {
          "name": "side",
          "type": "\"SELL\"|\"BUY\"",
          "required": true,
          "description": "SELL, BUY; side needs to be same as origin order"
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": true,
          "description": "Order quantity, cannot be sent with closePosition=true"
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "priceMatch": {
          "name": "priceMatch",
          "type": "PriceMatch",
          "required": false,
          "description": "only avaliable for LIMIT/STOP/TAKE_PROFIT order; can be set to OPPONENT/ OPPONENT_5/ OPPONENT_10/ OPPONENT_20: /QUEUE/ QUEUE_5/ QUEUE_10/ QUEUE_20; Can't be passed together with price"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "side": {
              "name": "side",
              "type": "\"SELL\"|\"BUY\"",
              "required": true,
              "description": "SELL, BUY; side needs to be same as origin order"
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": true,
              "description": "Order quantity, cannot be sent with closePosition=true"
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "priceMatch": {
              "name": "priceMatch",
              "type": "PriceMatch",
              "required": false,
              "description": "only avaliable for LIMIT/STOP/TAKE_PROFIT order; can be set to OPPONENT/ OPPONENT_5/ OPPONENT_10/ OPPONENT_20: /QUEUE/ QUEUE_5/ QUEUE_10/ QUEUE_20; Can't be passed together with price"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderId": "number",
              "symbol": "string",
              "pair": "string",
              "status": "string",
              "clientOrderId": "string",
              "price": "NumberString",
              "avgPrice": "NumberString",
              "origQty": "NumberString",
              "executedQty": "NumberString",
              "cumQty": "NumberString",
              "cumBase": "NumberString",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "reduceOnly": "boolean",
              "closePosition": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "stopPrice": "NumberString",
              "workingType": "WorkingType",
              "priceProtect": "boolean",
              "origType": "string",
              "priceMatch": "PriceMatch", //price match mode
              "selfTradePreventionMode": "string", //self trading preventation mode
              "goodTillDate": "number", //order pre-set auot cancel time for TIF GTD order
              "updateTime": "number"
            }
          ],
          "responseExamples": [
            {
              "orderId": 20072994037,
              "symbol": "BTCUSDT",
              "pair": "BTCUSDT",
              "status": "NEW",
              "clientOrderId": "LJ9R4QZDihCaS8UAOOLpgW",
              "price": "30005",
              "avgPrice": "0.0",
              "origQty": "1",
              "executedQty": "0",
              "cumQty": "0",
              "cumBase": "0",
              "timeInForce": "GTC",
              "type": "LIMIT",
              "reduceOnly": false,
              "closePosition": false,
              "side": "BUY",
              "positionSide": "LONG",
              "stopPrice": "0",
              "workingType": "CONTRACT_PRICE",
              "priceProtect": false,
              "origType": "LIMIT",
              "priceMatch": "NONE", //price match mode
              "selfTradePreventionMode": "NONE", //self trading preventation mode
              "goodTillDate": 0, //order pre-set auot cancel time for TIF GTD order
              "updateTime": 1629182711600
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.modify-order-trade",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#modify-order-trade",
      "name": "Modify Order (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /fapi/v1/batchOrders",
      "requestMethod": "POST",
      "requestEndPoint": "/fapi/v1/batchOrders",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "orderCounts": [
          "5/10s",
          "1/1min"
        ],
        "IP_text": "\n5 on IP rate limit(x-mbx-used-weight-1m)",
        "orders_text": "\n5 on 10s order rate limit(X-MBX-ORDER-COUNT-10S);\n\n1 on 1min order rate limit(X-MBX-ORDER-COUNT-1M)"
      },
      "baseParams": {
        "batchOrders": {
          "name": "batchOrders",
          "type": {
            "arrayItemType": {
              "structItems": [
                {
                  "name": "symbol",
                  "type": "string",
                  "required": true,
                  "description": ""
                },
                {
                  "name": "side",
                  "type": "OrderSide",
                  "required": true,
                  "description": ""
                },
                {
                  "name": "positionSide",
                  "type": "PositionSide",
                  "required": false,
                  "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent with Hedge Mode."
                },
                {
                  "name": "type",
                  "type": "OrderType",
                  "required": true,
                  "description": ""
                },
                {
                  "name": "timeInForce",
                  "type": "TimeInForce",
                  "required": false,
                  "description": ""
                },
                {
                  "name": "quantity",
                  "type": "DECIMAL",
                  "required": true,
                  "description": ""
                },
                {
                  "name": "reduceOnly",
                  "type": "\"true\"|\"false\"",
                  "required": false,
                  "description": "\"true\" or \"false\". default \"false\"."
                },
                {
                  "name": "price",
                  "type": "DECIMAL",
                  "required": false,
                  "description": ""
                },
                {
                  "name": "newClientOrderId",
                  "type": "string",
                  "required": false,
                  "description": "A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: ^[\\.A-Z\\:/a-z0-9_-]{1,36}$"
                },
                {
                  "name": "stopPrice",
                  "type": "DECIMAL",
                  "required": false,
                  "description": "Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
                },
                {
                  "name": "activationPrice",
                  "type": "DECIMAL",
                  "required": false,
                  "description": "Used with TRAILING_STOP_MARKET orders, default as the latest price(supporting different workingType)"
                },
                {
                  "name": "callbackRate",
                  "type": "DECIMAL",
                  "required": false,
                  "description": "Used with TRAILING_STOP_MARKET orders, min 0.1, max 4 where 1 for 1%"
                },
                {
                  "name": "workingType",
                  "type": "WorkingType",
                  "required": false,
                  "description": "stopPrice triggered by: \"MARK_PRICE\", \"CONTRACT_PRICE\". Default \"CONTRACT_PRICE\""
                },
                {
                  "name": "priceProtect",
                  "type": "\"TRUE\"|\"FALSE\"",
                  "required": false,
                  "description": "\"TRUE\" or \"FALSE\", default \"FALSE\". Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
                },
                {
                  "name": "newOrderRespType",
                  "type": "OrderResponseType",
                  "required": false,
                  "description": "\"ACK\", \"RESULT\", default \"ACK\""
                },
                {
                  "name": "priceMatch",
                  "type": "PriceMatch",
                  "required": false,
                  "description": "only avaliable for LIMIT/STOP/TAKE_PROFIT order; can be set to OPPONENT/ OPPONENT_5/ OPPONENT_10/ OPPONENT_20: /QUEUE/ QUEUE_5/ QUEUE_10/ QUEUE_20; Can't be passed together with price"
                },
                {
                  "name": "selfTradePreventionMode",
                  "type": "ENUM",
                  "required": false,
                  "description": "NONE:No STP / EXPIRE_TAKER:expire taker order when STP triggers/ EXPIRE_MAKER:expire maker order when STP triggers/ EXPIRE_BOTH:expire both orders when STP triggers"
                },
                {
                  "name": "goodTillDate",
                  "type": "LONG",
                  "required": false,
                  "description": "order cancel time for timeInForce GTD, mandatory when timeInforce set to GTD; order the timestamp only retains second-level precision, ms part will be ignored; The goodTillDate timestamp must be greater than the current time plus 600 seconds and smaller than 253402300799000"
                }
              ]
            }
          },
          "required": true,
          "description": "order list. Max 5 orders"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "batchOrders": {
              "name": "batchOrders",
              "type": {
                "arrayItemType": {
                  "structItems": [
                    {
                      "name": "symbol",
                      "type": "string",
                      "required": true,
                      "description": ""
                    },
                    {
                      "name": "side",
                      "type": "OrderSide",
                      "required": true,
                      "description": ""
                    },
                    {
                      "name": "positionSide",
                      "type": "PositionSide",
                      "required": false,
                      "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent with Hedge Mode."
                    },
                    {
                      "name": "type",
                      "type": "OrderType",
                      "required": true,
                      "description": ""
                    },
                    {
                      "name": "timeInForce",
                      "type": "TimeInForce",
                      "required": false,
                      "description": ""
                    },
                    {
                      "name": "quantity",
                      "type": "DECIMAL",
                      "required": true,
                      "description": ""
                    },
                    {
                      "name": "reduceOnly",
                      "type": "\"true\"|\"false\"",
                      "required": false,
                      "description": "\"true\" or \"false\". default \"false\"."
                    },
                    {
                      "name": "price",
                      "type": "DECIMAL",
                      "required": false,
                      "description": ""
                    },
                    {
                      "name": "newClientOrderId",
                      "type": "string",
                      "required": false,
                      "description": "A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: ^[\\.A-Z\\:/a-z0-9_-]{1,36}$"
                    },
                    {
                      "name": "stopPrice",
                      "type": "DECIMAL",
                      "required": false,
                      "description": "Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
                    },
                    {
                      "name": "activationPrice",
                      "type": "DECIMAL",
                      "required": false,
                      "description": "Used with TRAILING_STOP_MARKET orders, default as the latest price(supporting different workingType)"
                    },
                    {
                      "name": "callbackRate",
                      "type": "DECIMAL",
                      "required": false,
                      "description": "Used with TRAILING_STOP_MARKET orders, min 0.1, max 4 where 1 for 1%"
                    },
                    {
                      "name": "workingType",
                      "type": "WorkingType",
                      "required": false,
                      "description": "stopPrice triggered by: \"MARK_PRICE\", \"CONTRACT_PRICE\". Default \"CONTRACT_PRICE\""
                    },
                    {
                      "name": "priceProtect",
                      "type": "\"TRUE\"|\"FALSE\"",
                      "required": false,
                      "description": "\"TRUE\" or \"FALSE\", default \"FALSE\". Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
                    },
                    {
                      "name": "newOrderRespType",
                      "type": "OrderResponseType",
                      "required": false,
                      "description": "\"ACK\", \"RESULT\", default \"ACK\""
                    },
                    {
                      "name": "priceMatch",
                      "type": "PriceMatch",
                      "required": false,
                      "description": "only avaliable for LIMIT/STOP/TAKE_PROFIT order; can be set to OPPONENT/ OPPONENT_5/ OPPONENT_10/ OPPONENT_20: /QUEUE/ QUEUE_5/ QUEUE_10/ QUEUE_20; Can't be passed together with price"
                    },
                    {
                      "name": "selfTradePreventionMode",
                      "type": "ENUM",
                      "required": false,
                      "description": "NONE:No STP / EXPIRE_TAKER:expire taker order when STP triggers/ EXPIRE_MAKER:expire maker order when STP triggers/ EXPIRE_BOTH:expire both orders when STP triggers"
                    },
                    {
                      "name": "goodTillDate",
                      "type": "LONG",
                      "required": false,
                      "description": "order cancel time for timeInForce GTD, mandatory when timeInforce set to GTD; order the timestamp only retains second-level precision, ms part will be ignored; The goodTillDate timestamp must be greater than the current time plus 600 seconds and smaller than 253402300799000"
                    }
                  ]
                }
              },
              "required": true,
              "description": "order list. Max 5 orders"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "clientOrderId": "string",
                "cumQty": "NumberString",
                "cumQuote": "NumberString",
                "executedQty": "NumberString",
                "orderId": "number",
                "avgPrice": "NumberString",
                "origQty": "NumberString",
                "price": "NumberString",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "status": "string",
                "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
                "symbol": "string",
                "timeInForce": "TimeInForce",
                "type": "string",
                "origType": "string",
                "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
                "updateTime": "number",
                "workingType": "WorkingType",
                "priceProtect": "boolean", // if conditional order trigger is protected
                "priceMatch": "PriceMatch", //price match mode
                "selfTradePreventionMode": "string", //self trading preventation mode
                "goodTillDate": "number" //order pre-set auot cancel time for TIF GTD order
              },
              {
                "code": "number",
                "msg": "string"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "clientOrderId": "testOrder",
                "cumQty": "0",
                "cumQuote": "0",
                "executedQty": "0",
                "orderId": 22542179,
                "avgPrice": "0.00000",
                "origQty": "10",
                "price": "0",
                "reduceOnly": false,
                "side": "BUY",
                "positionSide": "SHORT",
                "status": "NEW",
                "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
                "symbol": "BTCUSDT",
                "timeInForce": "GTC",
                "type": "TRAILING_STOP_MARKET",
                "origType": "TRAILING_STOP_MARKET",
                "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
                "updateTime": 1566818724722,
                "workingType": "CONTRACT_PRICE",
                "priceProtect": false, // if conditional order trigger is protected
                "priceMatch": "NONE", //price match mode
                "selfTradePreventionMode": "NONE", //self trading preventation mode
                "goodTillDate": 0 //order pre-set auot cancel time for TIF GTD order
              },
              {
                "code": -2022,
                "msg": "ReduceOnly Order is rejected."
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.place-multiple-orders-trade",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#place-multiple-orders-trade",
      "name": "Place Multiple Orders  (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "PUT /fapi/v1/batchOrders",
      "requestMethod": "PUT",
      "requestEndPoint": "/fapi/v1/batchOrders",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "batchOrders": {
          "name": "batchOrders",
          "type": {
            "arrayItemType": {
              "structItems": [
                {
                  "name": "orderId",
                  "type": "LONG",
                  "required": false,
                  "description": ""
                },
                {
                  "name": "origClientOrderId",
                  "type": "string",
                  "required": false,
                  "description": ""
                },
                {
                  "name": "symbol",
                  "type": "string",
                  "required": true,
                  "description": ""
                },
                {
                  "name": "side",
                  "type": "\"SELL\"|\"BUY\"",
                  "required": true,
                  "description": "SELL, BUY"
                },
                {
                  "name": "quantity",
                  "type": "DECIMAL",
                  "required": true,
                  "description": "Order quantity, cannot be sent with closePosition=true"
                },
                {
                  "name": "price",
                  "type": "DECIMAL",
                  "required": true,
                  "description": ""
                },
                {
                  "name": "priceMatch",
                  "type": "PriceMatch",
                  "required": false,
                  "description": "only avaliable for LIMIT/STOP/TAKE_PROFIT order; can be set to OPPONENT/ OPPONENT_5/ OPPONENT_10/ OPPONENT_20: /QUEUE/ QUEUE_5/ QUEUE_10/ QUEUE_20; Can't be passed together with price"
                },
                {
                  "name": "recvWindow",
                  "type": "LONG",
                  "required": false,
                  "description": ""
                },
                {
                  "name": "timestamp",
                  "type": "LONG",
                  "required": true,
                  "description": ""
                }
              ]
            }
          },
          "required": true,
          "description": "order list. Max 5 orders"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "batchOrders": {
              "name": "batchOrders",
              "type": {
                "arrayItemType": {
                  "structItems": [
                    {
                      "name": "orderId",
                      "type": "LONG",
                      "required": false,
                      "description": ""
                    },
                    {
                      "name": "origClientOrderId",
                      "type": "string",
                      "required": false,
                      "description": ""
                    },
                    {
                      "name": "symbol",
                      "type": "string",
                      "required": true,
                      "description": ""
                    },
                    {
                      "name": "side",
                      "type": "\"SELL\"|\"BUY\"",
                      "required": true,
                      "description": "SELL, BUY"
                    },
                    {
                      "name": "quantity",
                      "type": "DECIMAL",
                      "required": true,
                      "description": "Order quantity, cannot be sent with closePosition=true"
                    },
                    {
                      "name": "price",
                      "type": "DECIMAL",
                      "required": true,
                      "description": ""
                    },
                    {
                      "name": "priceMatch",
                      "type": "PriceMatch",
                      "required": false,
                      "description": "only avaliable for LIMIT/STOP/TAKE_PROFIT order; can be set to OPPONENT/ OPPONENT_5/ OPPONENT_10/ OPPONENT_20: /QUEUE/ QUEUE_5/ QUEUE_10/ QUEUE_20; Can't be passed together with price"
                    },
                    {
                      "name": "recvWindow",
                      "type": "LONG",
                      "required": false,
                      "description": ""
                    },
                    {
                      "name": "timestamp",
                      "type": "LONG",
                      "required": true,
                      "description": ""
                    }
                  ]
                }
              },
              "required": true,
              "description": "order list. Max 5 orders"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "orderId": "number",
                "symbol": "string",
                "pair": "string",
                "status": "string",
                "clientOrderId": "string",
                "price": "NumberString",
                "avgPrice": "NumberString",
                "origQty": "NumberString",
                "executedQty": "NumberString",
                "cumQty": "NumberString",
                "cumBase": "NumberString",
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "reduceOnly": "boolean",
                "closePosition": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "stopPrice": "NumberString",
                "workingType": "WorkingType",
                "priceProtect": "boolean",
                "origType": "string",
                "priceMatch": "PriceMatch", //price match mode
                "selfTradePreventionMode": "string", //self trading preventation mode
                "goodTillDate": "number", //order pre-set auot cancel time for TIF GTD order
                "updateTime": "number"
              },
              {
                "code": "number",
                "msg": "string"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "orderId": 20072994037,
                "symbol": "BTCUSDT",
                "pair": "BTCUSDT",
                "status": "NEW",
                "clientOrderId": "LJ9R4QZDihCaS8UAOOLpgW",
                "price": "30005",
                "avgPrice": "0.0",
                "origQty": "1",
                "executedQty": "0",
                "cumQty": "0",
                "cumBase": "0",
                "timeInForce": "GTC",
                "type": "LIMIT",
                "reduceOnly": false,
                "closePosition": false,
                "side": "BUY",
                "positionSide": "LONG",
                "stopPrice": "0",
                "workingType": "CONTRACT_PRICE",
                "priceProtect": false,
                "origType": "LIMIT",
                "priceMatch": "NONE", //price match mode
                "selfTradePreventionMode": "NONE", //self trading preventation mode
                "goodTillDate": 0, //order pre-set auot cancel time for TIF GTD order
                "updateTime": 1629182711600
              },
              {
                "code": -2022,
                "msg": "ReduceOnly Order is rejected."
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.modify-multiple-orders-trade",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#modify-multiple-orders-trade",
      "name": "Modify Multiple Orders (TRADE)"
    },
    {
      "description": "Get order modification history",
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/orderAmendment",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/orderAmendment",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get modification history from INCLUSIVE"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get modification history until INCLUSIVE"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 1000; max 1000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get modification history from INCLUSIVE"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get modification history until INCLUSIVE"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 1000; max 1000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "amendmentId": "number", // Order modification ID
                "symbol": "string",
                "pair": "string",
                "orderId": "number",
                "clientOrderId": "string",
                "time": "number", // Order modification time
                "amendment": {
                  "price": {
                    "before": "NumberString",
                    "after": "NumberString"
                  },
                  "origQty": {
                    "before": "NumberString",
                    "after": "NumberString"
                  },
                  "count": "number" // Order modification count, representing the number of times the order has been modified
                },
                "priceMatch": "PriceMatch"
              },
              null,
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "amendmentId": 5363, // Order modification ID
                "symbol": "BTCUSDT",
                "pair": "BTCUSDT",
                "orderId": 20072994037,
                "clientOrderId": "LJ9R4QZDihCaS8UAOOLpgW",
                "time": 1629184560899, // Order modification time
                "amendment": {
                  "price": {
                    "before": "30004",
                    "after": "30003.2"
                  },
                  "origQty": {
                    "before": "1",
                    "after": "1"
                  },
                  "count": 3 // Order modification count, representing the number of times the order has been modified
                },
                "priceMatch": "QUEUE_20"
              },
              {
                "amendmentId": 5361,
                "symbol": "BTCUSDT",
                "pair": "BTCUSDT",
                "orderId": 20072994037,
                "clientOrderId": "LJ9R4QZDihCaS8UAOOLpgW",
                "time": 1629184533946,
                "amendment": {
                  "price": {
                    "before": "30005",
                    "after": "30004"
                  },
                  "origQty": {
                    "before": "1",
                    "after": "1"
                  },
                  "count": 2
                },
                "priceMatch": "QUEUE_20"
              },
              {
                "amendmentId": 5325,
                "symbol": "BTCUSDT",
                "pair": "BTCUSDT",
                "orderId": 20072994037,
                "clientOrderId": "LJ9R4QZDihCaS8UAOOLpgW",
                "time": 1629182711787,
                "amendment": {
                  "price": {
                    "before": "30002",
                    "after": "30005"
                  },
                  "origQty": {
                    "before": "1",
                    "after": "1"
                  },
                  "count": 1
                },
                "priceMatch": "QUEUE_20"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-order-modify-history-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#get-order-modify-history-user_data",
      "name": "Get Order Modify History (USER_DATA)"
    },
    {
      "description": "Check an order's status.",
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/order",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/order",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "avgPrice": "NumberString",
              "clientOrderId": "string",
              "cumQuote": "NumberString",
              "executedQty": "NumberString",
              "orderId": "number",
              "origQty": "NumberString",
              "origType": "string",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "status": "string",
              "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
              "closePosition": "boolean", // if Close-All
              "symbol": "string",
              "time": "number", // order time
              "timeInForce": "TimeInForce",
              "type": "string",
              "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
              "updateTime": "number", // update time
              "workingType": "WorkingType",
              "priceProtect": "boolean", // if conditional order trigger is protected
              "priceMatch": "PriceMatch", //price match mode
              "selfTradePreventionMode": "string", //self trading preventation mode
              "goodTillDate": "number" //order pre-set auot cancel time for TIF GTD order
            }
          ],
          "responseExamples": [
            {
              "avgPrice": "0.00000",
              "clientOrderId": "abc",
              "cumQuote": "0",
              "executedQty": "0",
              "orderId": 1917641,
              "origQty": "0.40",
              "origType": "TRAILING_STOP_MARKET",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "status": "NEW",
              "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
              "closePosition": false, // if Close-All
              "symbol": "BTCUSDT",
              "time": 1579276756075, // order time
              "timeInForce": "GTC",
              "type": "TRAILING_STOP_MARKET",
              "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
              "updateTime": 1579276756075, // update time
              "workingType": "CONTRACT_PRICE",
              "priceProtect": false, // if conditional order trigger is protected
              "priceMatch": "NONE", //price match mode
              "selfTradePreventionMode": "NONE", //self trading preventation mode
              "goodTillDate": 0 //order pre-set auot cancel time for TIF GTD order
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.query-order-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#query-order-user_data",
      "name": "Query Order (USER_DATA)"
    },
    {
      "description": "Cancel an active order.",
      "securityType": "TRADE",
      "request": "DELETE /fapi/v1/order",
      "requestMethod": "DELETE",
      "requestEndPoint": "/fapi/v1/order",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "clientOrderId": "string",
              "cumQty": "NumberString",
              "cumQuote": "NumberString",
              "executedQty": "NumberString",
              "orderId": "number",
              "origQty": "NumberString",
              "origType": "string",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "status": "string",
              "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
              "closePosition": "boolean", // if Close-All
              "symbol": "string",
              "timeInForce": "TimeInForce",
              "type": "string",
              "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
              "updateTime": "number",
              "workingType": "WorkingType",
              "priceProtect": "boolean", // if conditional order trigger is protected
              "priceMatch": "PriceMatch", //price match mode
              "selfTradePreventionMode": "string", //self trading preventation mode
              "goodTillDate": "number" //order pre-set auot cancel time for TIF GTD order
            }
          ],
          "responseExamples": [
            {
              "clientOrderId": "myOrder1",
              "cumQty": "0",
              "cumQuote": "0",
              "executedQty": "0",
              "orderId": 283194212,
              "origQty": "11",
              "origType": "TRAILING_STOP_MARKET",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "status": "CANCELED",
              "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
              "closePosition": false, // if Close-All
              "symbol": "BTCUSDT",
              "timeInForce": "GTC",
              "type": "TRAILING_STOP_MARKET",
              "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
              "updateTime": 1571110484038,
              "workingType": "CONTRACT_PRICE",
              "priceProtect": false, // if conditional order trigger is protected
              "priceMatch": "NONE", //price match mode
              "selfTradePreventionMode": "NONE", //self trading preventation mode
              "goodTillDate": 0 //order pre-set auot cancel time for TIF GTD order
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.cancel-order-trade",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#cancel-order-trade",
      "name": "Cancel Order (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "DELETE /fapi/v1/allOpenOrders",
      "requestMethod": "DELETE",
      "requestEndPoint": "/fapi/v1/allOpenOrders",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "code": 200,
              "msg": "The operation of cancel all open order is done."
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.cancel-all-open-orders-trade",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#cancel-all-open-orders-trade",
      "name": "Cancel All Open Orders (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "DELETE /fapi/v1/batchOrders",
      "requestMethod": "DELETE",
      "requestEndPoint": "/fapi/v1/batchOrders",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderIdList": {
          "name": "orderIdList",
          "type": "LONG[]",
          "required": false,
          "description": "max length 10  e.g. [1234567,2345678]"
        },
        "origClientOrderIdList": {
          "name": "origClientOrderIdList",
          "type": "string[]",
          "required": false,
          "description": "max length 10 e.g. [\"my_id_1\",\"my_id_2\"], encode the double quotes. No space after comma."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderIdList": {
              "name": "orderIdList",
              "type": "LONG[]",
              "required": false,
              "description": "max length 10  e.g. [1234567,2345678]"
            },
            "origClientOrderIdList": {
              "name": "origClientOrderIdList",
              "type": "string[]",
              "required": false,
              "description": "max length 10 e.g. [\"my_id_1\",\"my_id_2\"], encode the double quotes. No space after comma."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "clientOrderId": "string",
                "cumQty": "NumberString",
                "cumQuote": "NumberString",
                "executedQty": "NumberString",
                "orderId": "number",
                "origQty": "NumberString",
                "origType": "string",
                "price": "NumberString",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "status": "string",
                "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
                "closePosition": "boolean", // if Close-All
                "symbol": "string",
                "timeInForce": "TimeInForce",
                "type": "string",
                "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
                "updateTime": "number",
                "workingType": "WorkingType",
                "priceProtect": "boolean", // if conditional order trigger is protected
                "priceMatch": "PriceMatch", //price match mode
                "selfTradePreventionMode": "string", //self trading preventation mode
                "goodTillDate": "number" //order pre-set auot cancel time for TIF GTD order
              },
              {
                "code": "number",
                "msg": "string"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "clientOrderId": "myOrder1",
                "cumQty": "0",
                "cumQuote": "0",
                "executedQty": "0",
                "orderId": 283194212,
                "origQty": "11",
                "origType": "TRAILING_STOP_MARKET",
                "price": "0",
                "reduceOnly": false,
                "side": "BUY",
                "positionSide": "SHORT",
                "status": "CANCELED",
                "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
                "closePosition": false, // if Close-All
                "symbol": "BTCUSDT",
                "timeInForce": "GTC",
                "type": "TRAILING_STOP_MARKET",
                "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
                "updateTime": 1571110484038,
                "workingType": "CONTRACT_PRICE",
                "priceProtect": false, // if conditional order trigger is protected
                "priceMatch": "NONE", //price match mode
                "selfTradePreventionMode": "NONE", //self trading preventation mode
                "goodTillDate": 0 //order pre-set auot cancel time for TIF GTD order
              },
              {
                "code": -2011,
                "msg": "Unknown order sent."
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.cancel-multiple-orders-trade",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#cancel-multiple-orders-trade",
      "name": "Cancel Multiple Orders (TRADE)"
    },
    {
      "description": "Cancel all open orders of the specified symbol at the end of the specified countdown.",
      "securityType": "TRADE",
      "request": "POST /fapi/v1/countdownCancelAll",
      "requestMethod": "POST",
      "requestEndPoint": "/fapi/v1/countdownCancelAll",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "countdownTime": {
          "name": "countdownTime",
          "type": "LONG",
          "required": true,
          "description": "countdown time, 1000 for 1 second. 0 to cancel the timer"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "countdownTime": {
              "name": "countdownTime",
              "type": "LONG",
              "required": true,
              "description": "countdown time, 1000 for 1 second. 0 to cancel the timer"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "countdownTime": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSDT",
              "countdownTime": "100000"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.auto-cancel-all-open-orders-trade",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#auto-cancel-all-open-orders-trade",
      "name": "Auto-Cancel All Open Orders (TRADE)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/openOrder",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/openOrder",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "avgPrice": "NumberString",
              "clientOrderId": "string",
              "cumQuote": "NumberString",
              "executedQty": "NumberString",
              "orderId": "number",
              "origQty": "NumberString",
              "origType": "string",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "status": "string",
              "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
              "closePosition": "boolean", // if Close-All
              "symbol": "string",
              "time": "number", // order time
              "timeInForce": "TimeInForce",
              "type": "string",
              "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
              "updateTime": "number",
              "workingType": "WorkingType",
              "priceProtect": "boolean", // if conditional order trigger is protected
              "priceMatch": "PriceMatch", //price match mode
              "selfTradePreventionMode": "string", //self trading preventation mode
              "goodTillDate": "number" //order pre-set auot cancel time for TIF GTD order
            }
          ],
          "responseExamples": [
            {
              "avgPrice": "0.00000",
              "clientOrderId": "abc",
              "cumQuote": "0",
              "executedQty": "0",
              "orderId": 1917641,
              "origQty": "0.40",
              "origType": "TRAILING_STOP_MARKET",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "status": "NEW",
              "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
              "closePosition": false, // if Close-All
              "symbol": "BTCUSDT",
              "time": 1579276756075, // order time
              "timeInForce": "GTC",
              "type": "TRAILING_STOP_MARKET",
              "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
              "updateTime": 1579276756075,
              "workingType": "CONTRACT_PRICE",
              "priceProtect": false, // if conditional order trigger is protected
              "priceMatch": "NONE", //price match mode
              "selfTradePreventionMode": "NONE", //self trading preventation mode
              "goodTillDate": 0 //order pre-set auot cancel time for TIF GTD order
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.query-current-open-order-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#query-current-open-order-user_data",
      "name": "Query Current Open Order (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/openOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/openOrders",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "1 for a single symbol; 40 when the symbol parameter is omitted"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "avgPrice": "NumberString",
                "clientOrderId": "string",
                "cumQuote": "NumberString",
                "executedQty": "NumberString",
                "orderId": "number",
                "origQty": "NumberString",
                "origType": "string",
                "price": "NumberString",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "status": "string",
                "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
                "closePosition": "boolean", // if Close-All
                "symbol": "string",
                "time": "number", // order time
                "timeInForce": "TimeInForce",
                "type": "string",
                "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
                "updateTime": "number", // update time
                "workingType": "WorkingType",
                "priceProtect": "boolean", // if conditional order trigger is protected
                "priceMatch": "PriceMatch", //price match mode
                "selfTradePreventionMode": "string", //self trading preventation mode
                "goodTillDate": "number" //order pre-set auot cancel time for TIF GTD order
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "avgPrice": "0.00000",
                "clientOrderId": "abc",
                "cumQuote": "0",
                "executedQty": "0",
                "orderId": 1917641,
                "origQty": "0.40",
                "origType": "TRAILING_STOP_MARKET",
                "price": "0",
                "reduceOnly": false,
                "side": "BUY",
                "positionSide": "SHORT",
                "status": "NEW",
                "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
                "closePosition": false, // if Close-All
                "symbol": "BTCUSDT",
                "time": 1579276756075, // order time
                "timeInForce": "GTC",
                "type": "TRAILING_STOP_MARKET",
                "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
                "updateTime": 1579276756075, // update time
                "workingType": "CONTRACT_PRICE",
                "priceProtect": false, // if conditional order trigger is protected
                "priceMatch": "NONE", //price match mode
                "selfTradePreventionMode": "NONE", //self trading preventation mode
                "goodTillDate": 0 //order pre-set auot cancel time for TIF GTD order
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.current-all-open-orders-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#current-all-open-orders-user_data",
      "name": "Current All Open Orders (USER_DATA)"
    },
    {
      "description": "Get all account orders; active, canceled, or filled.",
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/allOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/allOrders",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "avgPrice": "NumberString",
                "clientOrderId": "string",
                "cumQuote": "NumberString",
                "executedQty": "NumberString",
                "orderId": "number",
                "origQty": "NumberString",
                "origType": "string",
                "price": "NumberString",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "status": "string",
                "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
                "closePosition": "boolean", // if Close-All
                "symbol": "string",
                "time": "number", // order time
                "timeInForce": "TimeInForce",
                "type": "string",
                "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
                "updateTime": "number", // update time
                "workingType": "WorkingType",
                "priceProtect": "boolean", // if conditional order trigger is protected
                "priceMatch": "PriceMatch", //price match mode
                "selfTradePreventionMode": "string", //self trading preventation mode
                "goodTillDate": "number" //order pre-set auot cancel time for TIF GTD order
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "avgPrice": "0.00000",
                "clientOrderId": "abc",
                "cumQuote": "0",
                "executedQty": "0",
                "orderId": 1917641,
                "origQty": "0.40",
                "origType": "TRAILING_STOP_MARKET",
                "price": "0",
                "reduceOnly": false,
                "side": "BUY",
                "positionSide": "SHORT",
                "status": "NEW",
                "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
                "closePosition": false, // if Close-All
                "symbol": "BTCUSDT",
                "time": 1579276756075, // order time
                "timeInForce": "GTC",
                "type": "TRAILING_STOP_MARKET",
                "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
                "updateTime": 1579276756075, // update time
                "workingType": "CONTRACT_PRICE",
                "priceProtect": false, // if conditional order trigger is protected
                "priceMatch": "NONE", //price match mode
                "selfTradePreventionMode": "NONE", //self trading preventation mode
                "goodTillDate": 0 //order pre-set auot cancel time for TIF GTD order
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.all-orders-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#all-orders-user_data",
      "name": "All Orders (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v3/balance",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v3/balance",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "accountAlias": "string", // unique account code
                "asset": "string", // asset name
                "balance": "NumberString", // wallet balance
                "crossWalletBalance": "NumberString", // crossed wallet balance
                "crossUnPnl": "NumberString", // unrealized profit of crossed positions
                "availableBalance": "NumberString", // available balance
                "maxWithdrawAmount": "NumberString", // maximum amount for transfer out
                "marginAvailable": "boolean", // whether the asset can be used as margin in Multi-Assets mode
                "updateTime": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "accountAlias": "SgsR", // unique account code
                "asset": "USDT", // asset name
                "balance": "122607.35137903", // wallet balance
                "crossWalletBalance": "23.72469206", // crossed wallet balance
                "crossUnPnl": "0.00000000", // unrealized profit of crossed positions
                "availableBalance": "23.72469206", // available balance
                "maxWithdrawAmount": "23.72469206", // maximum amount for transfer out
                "marginAvailable": true, // whether the asset can be used as margin in Multi-Assets mode
                "updateTime": 1617939110373
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.futures-account-balance-v3-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#futures-account-balance-v3-user_data",
      "name": "Futures Account Balance V3 (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v2/balance",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v2/balance",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "accountAlias": "string", // unique account code
                "asset": "string", // asset name
                "balance": "NumberString", // wallet balance
                "crossWalletBalance": "NumberString", // crossed wallet balance
                "crossUnPnl": "NumberString", // unrealized profit of crossed positions
                "availableBalance": "NumberString", // available balance
                "maxWithdrawAmount": "NumberString", // maximum amount for transfer out
                "marginAvailable": "boolean", // whether the asset can be used as margin in Multi-Assets mode
                "updateTime": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "accountAlias": "SgsR", // unique account code
                "asset": "USDT", // asset name
                "balance": "122607.35137903", // wallet balance
                "crossWalletBalance": "23.72469206", // crossed wallet balance
                "crossUnPnl": "0.00000000", // unrealized profit of crossed positions
                "availableBalance": "23.72469206", // available balance
                "maxWithdrawAmount": "23.72469206", // maximum amount for transfer out
                "marginAvailable": true, // whether the asset can be used as margin in Multi-Assets mode
                "updateTime": 1617939110373
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.futures-account-balance-v2-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#futures-account-balance-v2-user_data",
      "name": "Futures Account Balance V2 (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v3/account",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v3/account",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "single-asset mode",
            "multi-assets mode"
          ],
          "responseTypes": [
            {
              "totalInitialMargin": "NumberString", // total initial margin required with current mark price (useless with isolated positions), only for USDT asset
              "totalMaintMargin": "NumberString", // total maintenance margin required, only for USDT asset
              "totalWalletBalance": "NumberString", // total wallet balance, only for USDT asset
              "totalUnrealizedProfit": "NumberString", // total unrealized profit, only for USDT asset
              "totalMarginBalance": "NumberString", // total margin balance, only for USDT asset
              "totalPositionInitialMargin": "NumberString", // initial margin required for positions with current mark price, only for USDT asset
              "totalOpenOrderInitialMargin": "NumberString", // initial margin required for open orders with current mark price, only for USDT asset
              "totalCrossWalletBalance": "NumberString", // crossed wallet balance, only for USDT asset
              "totalCrossUnPnl": "NumberString", // unrealized profit of crossed positions, only for USDT asset
              "availableBalance": "NumberString", // available balance, only for USDT asset
              "maxWithdrawAmount": "NumberString", // maximum amount for transfer out, only for USDT asset
              "assets": [ // For assets that are quote assets, USDT/USDC/BTC
                {
                  "asset": "string", // asset name
                  "walletBalance": "NumberString", // wallet balance
                  "unrealizedProfit": "NumberString", // unrealized profit
                  "marginBalance": "NumberString", // margin balance
                  "maintMargin": "NumberString", // maintenance margin required
                  "initialMargin": "NumberString", // total initial margin required with current mark price
                  "positionInitialMargin": "NumberString", // initial margin required for positions with current mark price
                  "openOrderInitialMargin": "NumberString", // initial margin required for open orders with current mark price
                  "crossWalletBalance": "NumberString", // crossed wallet balance
                  "crossUnPnl": "NumberString", // unrealized profit of crossed positions
                  "availableBalance": "NumberString", // available balance
                  "maxWithdrawAmount": "NumberString", // maximum amount for transfer out
                  "updateTime": "number" // last update time
                },
                null
              ],
              "positions": [ // positions of all symbols user had position/ open orders are returned
                // only "BOTH" positions will be returned with One-way mode
                // only "LONG" and "SHORT" positions will be returned with Hedge mode
                {
                  "symbol": "string",
                  "positionSide": "PositionSide", // position side
                  "positionAmt": "NumberString",
                  "unrealizedProfit": "NumberString", // unrealized profit
                  "isolatedMargin": "NumberString",
                  "notional": "NumberString",
                  "isolatedWallet": "NumberString",
                  "initialMargin": "NumberString", // initial margin required with current mark price
                  "maintMargin": "NumberString", // maintenance margin required
                  "updateTime": "number"
                }
              ]
            },
            {
              "totalInitialMargin": "NumberString", // the sum of USD value of all cross positions/open order initial margin
              "totalMaintMargin": "NumberString", // the sum of USD value of all cross positions maintenance margin
              "totalWalletBalance": "NumberString", // total wallet balance in USD
              "totalUnrealizedProfit": "NumberString", // total unrealized profit in USD
              "totalMarginBalance": "NumberString", // total margin balance in USD
              "totalPositionInitialMargin": "NumberString", // the sum of USD value of all cross positions initial margin
              "totalOpenOrderInitialMargin": "NumberString", // initial margin required for open orders with current mark price in USD
              "totalCrossWalletBalance": "NumberString", // crossed wallet balance in USD
              "totalCrossUnPnl": "NumberString", // unrealized profit of crossed positions in USD
              "availableBalance": "NumberString", // available balance in USD
              "maxWithdrawAmount": "NumberString", // maximum virtual amount for transfer out in USD
              "assets": [
                {
                  "asset": "string", // asset name
                  "walletBalance": "NumberString", // wallet balance
                  "unrealizedProfit": "NumberString", // unrealized profit
                  "marginBalance": "NumberString", // margin balance
                  "maintMargin": "NumberString", // maintenance margin required
                  "initialMargin": "NumberString", // total initial margin required with current mark price
                  "positionInitialMargin": "NumberString", //initial margin required for positions with current mark price
                  "openOrderInitialMargin": "NumberString", // initial margin required for open orders with current mark price
                  "crossWalletBalance": "NumberString", // crossed wallet balance
                  "crossUnPnl": "NumberString", // unrealized profit of crossed positions
                  "availableBalance": "NumberString", // available balance
                  "maxWithdrawAmount": "NumberString", // maximum amount for transfer out
                  "marginAvailable": "boolean", // whether the asset can be used as margin in Multi-Assets mode
                  "updateTime": "number" // last update time
                },
                null
              ],
              "positions": [ // positions of all symbols user had position are returned
                // only "BOTH" positions will be returned with One-way mode
                // only "LONG" and "SHORT" positions will be returned with Hedge mode
                {
                  "symbol": "string",
                  "positionSide": "PositionSide", // position side
                  "positionAmt": "NumberString",
                  "unrealizedProfit": "NumberString", // unrealized profit
                  "isolatedMargin": "NumberString",
                  "notional": "NumberString",
                  "isolatedWallet": "NumberString",
                  "initialMargin": "NumberString", // initial margin required with current mark price
                  "maintMargin": "NumberString", // maintenance margin required
                  "updateTime": "number"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "totalInitialMargin": "0.00000000", // total initial margin required with current mark price (useless with isolated positions), only for USDT asset
              "totalMaintMargin": "0.00000000", // total maintenance margin required, only for USDT asset
              "totalWalletBalance": "103.12345678", // total wallet balance, only for USDT asset
              "totalUnrealizedProfit": "0.00000000", // total unrealized profit, only for USDT asset
              "totalMarginBalance": "103.12345678", // total margin balance, only for USDT asset
              "totalPositionInitialMargin": "0.00000000", // initial margin required for positions with current mark price, only for USDT asset
              "totalOpenOrderInitialMargin": "0.00000000", // initial margin required for open orders with current mark price, only for USDT asset
              "totalCrossWalletBalance": "103.12345678", // crossed wallet balance, only for USDT asset
              "totalCrossUnPnl": "0.00000000", // unrealized profit of crossed positions, only for USDT asset
              "availableBalance": "103.12345678", // available balance, only for USDT asset
              "maxWithdrawAmount": "103.12345678", // maximum amount for transfer out, only for USDT asset
              "assets": [ // For assets that are quote assets, USDT/USDC/BTC
                {
                  "asset": "USDT", // asset name
                  "walletBalance": "23.72469206", // wallet balance
                  "unrealizedProfit": "0.00000000", // unrealized profit
                  "marginBalance": "23.72469206", // margin balance
                  "maintMargin": "0.00000000", // maintenance margin required
                  "initialMargin": "0.00000000", // total initial margin required with current mark price
                  "positionInitialMargin": "0.00000000", // initial margin required for positions with current mark price
                  "openOrderInitialMargin": "0.00000000", // initial margin required for open orders with current mark price
                  "crossWalletBalance": "23.72469206", // crossed wallet balance
                  "crossUnPnl": "0.00000000", // unrealized profit of crossed positions
                  "availableBalance": "23.72469206", // available balance
                  "maxWithdrawAmount": "23.72469206", // maximum amount for transfer out
                  "updateTime": 1625474304765 // last update time
                },
                {
                  "asset": "USDC", // asset name
                  "walletBalance": "103.12345678", // wallet balance
                  "unrealizedProfit": "0.00000000", // unrealized profit
                  "marginBalance": "103.12345678", // margin balance
                  "maintMargin": "0.00000000", // maintenance margin required
                  "initialMargin": "0.00000000", // total initial margin required with current mark price
                  "positionInitialMargin": "0.00000000", // initial margin required for positions with current mark price
                  "openOrderInitialMargin": "0.00000000", // initial margin required for open orders with current mark price
                  "crossWalletBalance": "103.12345678", // crossed wallet balance
                  "crossUnPnl": "0.00000000", // unrealized profit of crossed positions
                  "availableBalance": "126.72469206", // available balance
                  "maxWithdrawAmount": "103.12345678", // maximum amount for transfer out
                  "updateTime": 1625474304765 // last update time
                }
              ],
              "positions": [ // positions of all symbols user had position/ open orders are returned
                // only "BOTH" positions will be returned with One-way mode
                // only "LONG" and "SHORT" positions will be returned with Hedge mode
                {
                  "symbol": "BTCUSDT",
                  "positionSide": "BOTH", // position side
                  "positionAmt": "1.000",
                  "unrealizedProfit": "0.00000000", // unrealized profit
                  "isolatedMargin": "0.00000000",
                  "notional": "0",
                  "isolatedWallet": "0",
                  "initialMargin": "0", // initial margin required with current mark price
                  "maintMargin": "0", // maintenance margin required
                  "updateTime": 0
                }
              ]
            },
            {
              "totalInitialMargin": "0.00000000", // the sum of USD value of all cross positions/open order initial margin
              "totalMaintMargin": "0.00000000", // the sum of USD value of all cross positions maintenance margin
              "totalWalletBalance": "126.72469206", // total wallet balance in USD
              "totalUnrealizedProfit": "0.00000000", // total unrealized profit in USD
              "totalMarginBalance": "126.72469206", // total margin balance in USD
              "totalPositionInitialMargin": "0.00000000", // the sum of USD value of all cross positions initial margin
              "totalOpenOrderInitialMargin": "0.00000000", // initial margin required for open orders with current mark price in USD
              "totalCrossWalletBalance": "126.72469206", // crossed wallet balance in USD
              "totalCrossUnPnl": "0.00000000", // unrealized profit of crossed positions in USD
              "availableBalance": "126.72469206", // available balance in USD
              "maxWithdrawAmount": "126.72469206", // maximum virtual amount for transfer out in USD
              "assets": [
                {
                  "asset": "USDT", // asset name
                  "walletBalance": "23.72469206", // wallet balance
                  "unrealizedProfit": "0.00000000", // unrealized profit
                  "marginBalance": "23.72469206", // margin balance
                  "maintMargin": "0.00000000", // maintenance margin required
                  "initialMargin": "0.00000000", // total initial margin required with current mark price
                  "positionInitialMargin": "0.00000000", //initial margin required for positions with current mark price
                  "openOrderInitialMargin": "0.00000000", // initial margin required for open orders with current mark price
                  "crossWalletBalance": "23.72469206", // crossed wallet balance
                  "crossUnPnl": "0.00000000", // unrealized profit of crossed positions
                  "availableBalance": "126.72469206", // available balance
                  "maxWithdrawAmount": "23.72469206", // maximum amount for transfer out
                  "marginAvailable": true, // whether the asset can be used as margin in Multi-Assets mode
                  "updateTime": 1625474304765 // last update time
                },
                {
                  "asset": "BUSD", // asset name
                  "walletBalance": "103.12345678", // wallet balance
                  "unrealizedProfit": "0.00000000", // unrealized profit
                  "marginBalance": "103.12345678", // margin balance
                  "maintMargin": "0.00000000", // maintenance margin required
                  "initialMargin": "0.00000000", // total initial margin required with current mark price
                  "positionInitialMargin": "0.00000000", //initial margin required for positions with current mark price
                  "openOrderInitialMargin": "0.00000000", // initial margin required for open orders with current mark price
                  "crossWalletBalance": "103.12345678", // crossed wallet balance
                  "crossUnPnl": "0.00000000", // unrealized profit of crossed positions
                  "availableBalance": "126.72469206", // available balance
                  "maxWithdrawAmount": "103.12345678", // maximum amount for transfer out
                  "marginAvailable": true, // whether the asset can be used as margin in Multi-Assets mode
                  "updateTime": 1625474304765 // last update time
                }
              ],
              "positions": [ // positions of all symbols user had position are returned
                // only "BOTH" positions will be returned with One-way mode
                // only "LONG" and "SHORT" positions will be returned with Hedge mode
                {
                  "symbol": "BTCUSDT",
                  "positionSide": "BOTH", // position side
                  "positionAmt": "1.000",
                  "unrealizedProfit": "0.00000000", // unrealized profit
                  "isolatedMargin": "0.00000000",
                  "notional": "0",
                  "isolatedWallet": "0",
                  "initialMargin": "0", // initial margin required with current mark price
                  "maintMargin": "0", // maintenance margin required
                  "updateTime": 0
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.account-information-v3-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#account-information-v3-user_data",
      "name": "Account Information V3 (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v2/account",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v2/account",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "single-asset mode",
            "multi-assets mode"
          ],
          "responseTypes": [
            {
              "feeTier": "number", // account commission tier
              "feeBurn": "boolean", // "true": Fee Discount On; "false": Fee Discount Off
              "canTrade": "boolean", // if can trade
              "canDeposit": "boolean", // if can transfer in asset
              "canWithdraw": "boolean", // if can transfer out asset
              "updateTime": "number", // reserved property, please ignore
              "multiAssetsMargin": "boolean",
              "tradeGroupId": "number",
              "totalInitialMargin": "NumberString", // total initial margin required with current mark price (useless with isolated positions), only for USDT asset
              "totalMaintMargin": "NumberString", // total maintenance margin required, only for USDT asset
              "totalWalletBalance": "NumberString", // total wallet balance, only for USDT asset
              "totalUnrealizedProfit": "NumberString", // total unrealized profit, only for USDT asset
              "totalMarginBalance": "NumberString", // total margin balance, only for USDT asset
              "totalPositionInitialMargin": "NumberString", // initial margin required for positions with current mark price, only for USDT asset
              "totalOpenOrderInitialMargin": "NumberString", // initial margin required for open orders with current mark price, only for USDT asset
              "totalCrossWalletBalance": "NumberString", // crossed wallet balance, only for USDT asset
              "totalCrossUnPnl": "NumberString", // unrealized profit of crossed positions, only for USDT asset
              "availableBalance": "NumberString", // available balance, only for USDT asset
              "maxWithdrawAmount": "NumberString", // maximum amount for transfer out, only for USDT asset
              "assets": [
                {
                  "asset": "string", // asset name
                  "walletBalance": "NumberString", // wallet balance
                  "unrealizedProfit": "NumberString", // unrealized profit
                  "marginBalance": "NumberString", // margin balance
                  "maintMargin": "NumberString", // maintenance margin required
                  "initialMargin": "NumberString", // total initial margin required with current mark price
                  "positionInitialMargin": "NumberString", //initial margin required for positions with current mark price
                  "openOrderInitialMargin": "NumberString", // initial margin required for open orders with current mark price
                  "crossWalletBalance": "NumberString", // crossed wallet balance
                  "crossUnPnl": "NumberString", // unrealized profit of crossed positions
                  "availableBalance": "NumberString", // available balance
                  "maxWithdrawAmount": "NumberString", // maximum amount for transfer out
                  "marginAvailable": "boolean", // whether the asset can be used as margin in Multi-Assets mode
                  "updateTime": "number" // last update time
                },
                null
              ],
              "positions": [ // positions of all symbols in the market are returned
                // only "BOTH" positions will be returned with One-way mode
                // only "LONG" and "SHORT" positions will be returned with Hedge mode
                {
                  "symbol": "string", // symbol name
                  "initialMargin": "NumberString", // initial margin required with current mark price
                  "maintMargin": "NumberString", // maintenance margin required
                  "unrealizedProfit": "NumberString", // unrealized profit
                  "positionInitialMargin": "NumberString", // initial margin required for positions with current mark price
                  "openOrderInitialMargin": "NumberString", // initial margin required for open orders with current mark price
                  "leverage": "NumberString", // current initial leverage
                  "isolated": "boolean", // if the position is isolated
                  "entryPrice": "NumberString", // average entry price
                  "maxNotional": "NumberString", // maximum available notional with current leverage
                  "bidNotional": "NumberString", // bids notional, ignore
                  "askNotional": "NumberString", // ask notional, ignore
                  "positionSide": "PositionSide", // position side
                  "positionAmt": "NumberString", // position amount
                  "updateTime": "number" // last update time
                }
              ]
            },
            {
              "feeTier": "number", // account commission tier
              "feeBurn": "boolean", // "true": Fee Discount On; "false": Fee Discount Off
              "canTrade": "boolean", // if can trade
              "canDeposit": "boolean", // if can transfer in asset
              "canWithdraw": "boolean", // if can transfer out asset
              "updateTime": "number", // reserved property, please ignore
              "multiAssetsMargin": "boolean",
              "tradeGroupId": "number",
              "totalInitialMargin": "NumberString", // the sum of USD value of all cross positions/open order initial margin
              "totalMaintMargin": "NumberString", // the sum of USD value of all cross positions maintenance margin
              "totalWalletBalance": "NumberString", // total wallet balance in USD
              "totalUnrealizedProfit": "NumberString", // total unrealized profit in USD
              "totalMarginBalance": "NumberString", // total margin balance in USD
              "totalPositionInitialMargin": "NumberString", // the sum of USD value of all cross positions initial margin
              "totalOpenOrderInitialMargin": "NumberString", // initial margin required for open orders with current mark price in USD
              "totalCrossWalletBalance": "NumberString", // crossed wallet balance in USD
              "totalCrossUnPnl": "NumberString", // unrealized profit of crossed positions in USD
              "availableBalance": "NumberString", // available balance in USD
              "maxWithdrawAmount": "NumberString", // maximum virtual amount for transfer out in USD
              "assets": [
                {
                  "asset": "string", // asset name
                  "walletBalance": "NumberString", // wallet balance
                  "unrealizedProfit": "NumberString", // unrealized profit
                  "marginBalance": "NumberString", // margin balance
                  "maintMargin": "NumberString", // maintenance margin required
                  "initialMargin": "NumberString", // total initial margin required with current mark price
                  "positionInitialMargin": "NumberString", //initial margin required for positions with current mark price
                  "openOrderInitialMargin": "NumberString", // initial margin required for open orders with current mark price
                  "crossWalletBalance": "NumberString", // crossed wallet balance
                  "crossUnPnl": "NumberString", // unrealized profit of crossed positions
                  "availableBalance": "NumberString", // available balance
                  "maxWithdrawAmount": "NumberString", // maximum amount for transfer out
                  "marginAvailable": "boolean", // whether the asset can be used as margin in Multi-Assets mode
                  "updateTime": "number" // last update time
                },
                null
              ],
              "positions": [ // positions of all symbols in the market are returned
                // only "BOTH" positions will be returned with One-way mode
                // only "LONG" and "SHORT" positions will be returned with Hedge mode
                {
                  "symbol": "string", // symbol name
                  "initialMargin": "NumberString", // initial margin required with current mark price
                  "maintMargin": "NumberString", // maintenance margin required
                  "unrealizedProfit": "NumberString", // unrealized profit
                  "positionInitialMargin": "NumberString", // initial margin required for positions with current mark price
                  "openOrderInitialMargin": "NumberString", // initial margin required for open orders with current mark price
                  "leverage": "NumberString", // current initial leverage
                  "isolated": "boolean", // if the position is isolated
                  "entryPrice": "NumberString", // average entry price
                  "breakEvenPrice": "NumberString", // average entry price
                  "maxNotional": "NumberString", // maximum available notional with current leverage
                  "bidNotional": "NumberString", // bids notional, ignore
                  "askNotional": "NumberString", // ask notional, ignore
                  "positionSide": "PositionSide", // position side
                  "positionAmt": "NumberString", // position amount
                  "updateTime": "number" // last update time
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "feeTier": 0, // account commission tier
              "feeBurn": true, // "true": Fee Discount On; "false": Fee Discount Off
              "canTrade": true, // if can trade
              "canDeposit": true, // if can transfer in asset
              "canWithdraw": true, // if can transfer out asset
              "updateTime": 0, // reserved property, please ignore
              "multiAssetsMargin": false,
              "tradeGroupId": -1,
              "totalInitialMargin": "0.00000000", // total initial margin required with current mark price (useless with isolated positions), only for USDT asset
              "totalMaintMargin": "0.00000000", // total maintenance margin required, only for USDT asset
              "totalWalletBalance": "23.72469206", // total wallet balance, only for USDT asset
              "totalUnrealizedProfit": "0.00000000", // total unrealized profit, only for USDT asset
              "totalMarginBalance": "23.72469206", // total margin balance, only for USDT asset
              "totalPositionInitialMargin": "0.00000000", // initial margin required for positions with current mark price, only for USDT asset
              "totalOpenOrderInitialMargin": "0.00000000", // initial margin required for open orders with current mark price, only for USDT asset
              "totalCrossWalletBalance": "23.72469206", // crossed wallet balance, only for USDT asset
              "totalCrossUnPnl": "0.00000000", // unrealized profit of crossed positions, only for USDT asset
              "availableBalance": "23.72469206", // available balance, only for USDT asset
              "maxWithdrawAmount": "23.72469206", // maximum amount for transfer out, only for USDT asset
              "assets": [
                {
                  "asset": "USDT", // asset name
                  "walletBalance": "23.72469206", // wallet balance
                  "unrealizedProfit": "0.00000000", // unrealized profit
                  "marginBalance": "23.72469206", // margin balance
                  "maintMargin": "0.00000000", // maintenance margin required
                  "initialMargin": "0.00000000", // total initial margin required with current mark price
                  "positionInitialMargin": "0.00000000", //initial margin required for positions with current mark price
                  "openOrderInitialMargin": "0.00000000", // initial margin required for open orders with current mark price
                  "crossWalletBalance": "23.72469206", // crossed wallet balance
                  "crossUnPnl": "0.00000000", // unrealized profit of crossed positions
                  "availableBalance": "23.72469206", // available balance
                  "maxWithdrawAmount": "23.72469206", // maximum amount for transfer out
                  "marginAvailable": true, // whether the asset can be used as margin in Multi-Assets mode
                  "updateTime": 1625474304765 // last update time
                },
                {
                  "asset": "BUSD", // asset name
                  "walletBalance": "103.12345678", // wallet balance
                  "unrealizedProfit": "0.00000000", // unrealized profit
                  "marginBalance": "103.12345678", // margin balance
                  "maintMargin": "0.00000000", // maintenance margin required
                  "initialMargin": "0.00000000", // total initial margin required with current mark price
                  "positionInitialMargin": "0.00000000", //initial margin required for positions with current mark price
                  "openOrderInitialMargin": "0.00000000", // initial margin required for open orders with current mark price
                  "crossWalletBalance": "103.12345678", // crossed wallet balance
                  "crossUnPnl": "0.00000000", // unrealized profit of crossed positions
                  "availableBalance": "103.12345678", // available balance
                  "maxWithdrawAmount": "103.12345678", // maximum amount for transfer out
                  "marginAvailable": true, // whether the asset can be used as margin in Multi-Assets mode
                  "updateTime": 1625474304765 // last update time
                }
              ],
              "positions": [ // positions of all symbols in the market are returned
                // only "BOTH" positions will be returned with One-way mode
                // only "LONG" and "SHORT" positions will be returned with Hedge mode
                {
                  "symbol": "BTCUSDT", // symbol name
                  "initialMargin": "0", // initial margin required with current mark price
                  "maintMargin": "0", // maintenance margin required
                  "unrealizedProfit": "0.00000000", // unrealized profit
                  "positionInitialMargin": "0", // initial margin required for positions with current mark price
                  "openOrderInitialMargin": "0", // initial margin required for open orders with current mark price
                  "leverage": "100", // current initial leverage
                  "isolated": true, // if the position is isolated
                  "entryPrice": "0.00000", // average entry price
                  "maxNotional": "250000", // maximum available notional with current leverage
                  "bidNotional": "0", // bids notional, ignore
                  "askNotional": "0", // ask notional, ignore
                  "positionSide": "BOTH", // position side
                  "positionAmt": "0", // position amount
                  "updateTime": 0 // last update time
                }
              ]
            },
            {
              "feeTier": 0, // account commission tier
              "feeBurn": true, // "true": Fee Discount On; "false": Fee Discount Off
              "canTrade": true, // if can trade
              "canDeposit": true, // if can transfer in asset
              "canWithdraw": true, // if can transfer out asset
              "updateTime": 0, // reserved property, please ignore
              "multiAssetsMargin": true,
              "tradeGroupId": -1,
              "totalInitialMargin": "0.00000000", // the sum of USD value of all cross positions/open order initial margin
              "totalMaintMargin": "0.00000000", // the sum of USD value of all cross positions maintenance margin
              "totalWalletBalance": "126.72469206", // total wallet balance in USD
              "totalUnrealizedProfit": "0.00000000", // total unrealized profit in USD
              "totalMarginBalance": "126.72469206", // total margin balance in USD
              "totalPositionInitialMargin": "0.00000000", // the sum of USD value of all cross positions initial margin
              "totalOpenOrderInitialMargin": "0.00000000", // initial margin required for open orders with current mark price in USD
              "totalCrossWalletBalance": "126.72469206", // crossed wallet balance in USD
              "totalCrossUnPnl": "0.00000000", // unrealized profit of crossed positions in USD
              "availableBalance": "126.72469206", // available balance in USD
              "maxWithdrawAmount": "126.72469206", // maximum virtual amount for transfer out in USD
              "assets": [
                {
                  "asset": "USDT", // asset name
                  "walletBalance": "23.72469206", // wallet balance
                  "unrealizedProfit": "0.00000000", // unrealized profit
                  "marginBalance": "23.72469206", // margin balance
                  "maintMargin": "0.00000000", // maintenance margin required
                  "initialMargin": "0.00000000", // total initial margin required with current mark price
                  "positionInitialMargin": "0.00000000", //initial margin required for positions with current mark price
                  "openOrderInitialMargin": "0.00000000", // initial margin required for open orders with current mark price
                  "crossWalletBalance": "23.72469206", // crossed wallet balance
                  "crossUnPnl": "0.00000000", // unrealized profit of crossed positions
                  "availableBalance": "126.72469206", // available balance
                  "maxWithdrawAmount": "23.72469206", // maximum amount for transfer out
                  "marginAvailable": true, // whether the asset can be used as margin in Multi-Assets mode
                  "updateTime": 1625474304765 // last update time
                },
                {
                  "asset": "BUSD", // asset name
                  "walletBalance": "103.12345678", // wallet balance
                  "unrealizedProfit": "0.00000000", // unrealized profit
                  "marginBalance": "103.12345678", // margin balance
                  "maintMargin": "0.00000000", // maintenance margin required
                  "initialMargin": "0.00000000", // total initial margin required with current mark price
                  "positionInitialMargin": "0.00000000", //initial margin required for positions with current mark price
                  "openOrderInitialMargin": "0.00000000", // initial margin required for open orders with current mark price
                  "crossWalletBalance": "103.12345678", // crossed wallet balance
                  "crossUnPnl": "0.00000000", // unrealized profit of crossed positions
                  "availableBalance": "126.72469206", // available balance
                  "maxWithdrawAmount": "103.12345678", // maximum amount for transfer out
                  "marginAvailable": true, // whether the asset can be used as margin in Multi-Assets mode
                  "updateTime": 1625474304765 // last update time
                }
              ],
              "positions": [ // positions of all symbols in the market are returned
                // only "BOTH" positions will be returned with One-way mode
                // only "LONG" and "SHORT" positions will be returned with Hedge mode
                {
                  "symbol": "BTCUSDT", // symbol name
                  "initialMargin": "0", // initial margin required with current mark price
                  "maintMargin": "0", // maintenance margin required
                  "unrealizedProfit": "0.00000000", // unrealized profit
                  "positionInitialMargin": "0", // initial margin required for positions with current mark price
                  "openOrderInitialMargin": "0", // initial margin required for open orders with current mark price
                  "leverage": "100", // current initial leverage
                  "isolated": true, // if the position is isolated
                  "entryPrice": "0.00000", // average entry price
                  "breakEvenPrice": "0.0", // average entry price
                  "maxNotional": "250000", // maximum available notional with current leverage
                  "bidNotional": "0", // bids notional, ignore
                  "askNotional": "0", // ask notional, ignore
                  "positionSide": "BOTH", // position side
                  "positionAmt": "0", // position amount
                  "updateTime": 0 // last update time
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.account-information-v2-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#account-information-v2-user_data",
      "name": "Account Information V2 (USER_DATA)"
    },
    {
      "description": "Change user's initial leverage of specific symbol market.",
      "securityType": "TRADE",
      "request": "POST /fapi/v1/leverage",
      "requestMethod": "POST",
      "requestEndPoint": "/fapi/v1/leverage",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "leverage": {
          "name": "leverage",
          "type": "INT",
          "required": true,
          "description": "target initial leverage: int from 1 to 125"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "leverage": {
              "name": "leverage",
              "type": "INT",
              "required": true,
              "description": "target initial leverage: int from 1 to 125"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "leverage": "number",
              "maxNotionalValue": "NumberString",
              "symbol": "string"
            }
          ],
          "responseExamples": [
            {
              "leverage": 21,
              "maxNotionalValue": "1000000",
              "symbol": "BTCUSDT"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.change-initial-leverage-trade",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#change-initial-leverage-trade",
      "name": "Change Initial Leverage (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /fapi/v1/marginType",
      "requestMethod": "POST",
      "requestEndPoint": "/fapi/v1/marginType",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "marginType": {
          "name": "marginType",
          "type": "\"ISOLATED\"|\"CROSSED\"",
          "required": true,
          "description": "ISOLATED, CROSSED"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "marginType": {
              "name": "marginType",
              "type": "\"ISOLATED\"|\"CROSSED\"",
              "required": true,
              "description": "ISOLATED, CROSSED"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "code": 200,
              "msg": "success"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.change-margin-type-trade",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#change-margin-type-trade",
      "name": "Change Margin Type (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /fapi/v1/positionMargin",
      "requestMethod": "POST",
      "requestEndPoint": "/fapi/v1/positionMargin",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "positionSide": {
          "name": "positionSide",
          "type": "PositionSide",
          "required": false,
          "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent with Hedge Mode."
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "type": {
          "name": "type",
          "type": "INT",
          "required": true,
          "description": "1: Add position margin，2: Reduce position margin"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "positionSide": {
              "name": "positionSide",
              "type": "PositionSide",
              "required": false,
              "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent with Hedge Mode."
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "type": {
              "name": "type",
              "type": "INT",
              "required": true,
              "description": "1: Add position margin，2: Reduce position margin"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "amount": "number",
              "code": "number",
              "msg": "string",
              "type": "number"
            }
          ],
          "responseExamples": [
            {
              "amount": 100,
              "code": 200,
              "msg": "Successfully modify position margin.",
              "type": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.modify-isolated-position-margin-trade",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#modify-isolated-position-margin-trade",
      "name": "Modify Isolated Position Margin (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "GET /fapi/v1/positionMargin/history",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/positionMargin/history",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "type": {
          "name": "type",
          "type": "INT",
          "required": false,
          "description": "1: Add position margin，2: Reduce position margin"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Default current time if not pass"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default: 500"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "type": {
              "name": "type",
              "type": "INT",
              "required": false,
              "description": "1: Add position margin，2: Reduce position margin"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Default current time if not pass"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default: 500"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "type": "number",
                "deltaType": "string",
                "amount": "NumberString",
                "asset": "string",
                "time": "number",
                "positionSide": "PositionSide"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSDT",
                "type": 1,
                "deltaType": "USER_ADJUST",
                "amount": "23.36332311",
                "asset": "USDT",
                "time": 1578047897183,
                "positionSide": "BOTH"
              },
              {
                "symbol": "BTCUSDT",
                "type": 1,
                "deltaType": "USER_ADJUST",
                "amount": "100",
                "asset": "USDT",
                "time": 1578047900425,
                "positionSide": "LONG"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-position-margin-change-history-trade",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#get-position-margin-change-history-trade",
      "name": "Get Position Margin Change History (TRADE)"
    },
    {
      "description": "Get current position information(only symbol that has position or open orders will be returned).",
      "securityType": "USER_DATA",
      "request": "GET /fapi/v3/positionRisk",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v3/positionRisk",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "For One-way position mode:",
            "For Hedge position mode:"
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "positionSide": "PositionSide", // position side
                "positionAmt": "NumberString",
                "entryPrice": "NumberString",
                "breakEvenPrice": "NumberString",
                "markPrice": "NumberString",
                "unRealizedProfit": "NumberString", // unrealized profit
                "liquidationPrice": "NumberString",
                "isolatedMargin": "NumberString",
                "notional": "NumberString",
                "marginAsset": "string",
                "isolatedWallet": "NumberString",
                "initialMargin": "NumberString", // initial margin required with current mark price
                "maintMargin": "NumberString", // maintenance margin required
                "positionInitialMargin": "NumberString", // initial margin required for positions with current mark price
                "openOrderInitialMargin": "NumberString", // initial margin required for open orders with current mark price
                "adl": "number",
                "bidNotional": "NumberString", // bids notional, ignore
                "askNotional": "NumberString", // ask notional, ignore
                "updateTime": "number"
              }
            ],
            [
              {
                "symbol": "string",
                "positionAmt": "NumberString",
                "entryPrice": "NumberString",
                "breakEvenPrice": "NumberString",
                "markPrice": "NumberString",
                "unRealizedProfit": "NumberString",
                "liquidationPrice": "NumberString",
                "leverage": "NumberString",
                "maxNotionalValue": "NumberString",
                "marginType": "string",
                "isolatedMargin": "NumberString",
                "isAutoAddMargin": "string",
                "positionSide": "PositionSide",
                "notional": "NumberString",
                "isolatedWallet": "NumberString",
                "updateTime": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "ADAUSDT",
                "positionSide": "BOTH", // position side
                "positionAmt": "30",
                "entryPrice": "0.385",
                "breakEvenPrice": "0.385077",
                "markPrice": "0.41047590",
                "unRealizedProfit": "0.76427700", // unrealized profit
                "liquidationPrice": "0",
                "isolatedMargin": "0",
                "notional": "12.31427700",
                "marginAsset": "USDT",
                "isolatedWallet": "0",
                "initialMargin": "0.61571385", // initial margin required with current mark price
                "maintMargin": "0.08004280", // maintenance margin required
                "positionInitialMargin": "0.61571385", // initial margin required for positions with current mark price
                "openOrderInitialMargin": "0", // initial margin required for open orders with current mark price
                "adl": 2,
                "bidNotional": "0", // bids notional, ignore
                "askNotional": "0", // ask notional, ignore
                "updateTime": 1720736417660
              }
            ],
            [
              {
                "symbol": "BTCUSDT",
                "positionAmt": "0.001",
                "entryPrice": "22185.2",
                "breakEvenPrice": "0.0",
                "markPrice": "21123.05052574",
                "unRealizedProfit": "-1.06214947",
                "liquidationPrice": "19731.45529116",
                "leverage": "4",
                "maxNotionalValue": "100000000",
                "marginType": "cross",
                "isolatedMargin": "0.00000000",
                "isAutoAddMargin": "false",
                "positionSide": "LONG",
                "notional": "21.12305052",
                "isolatedWallet": "0",
                "updateTime": 1655217461579
              },
              {
                "symbol": "BTCUSDT",
                "positionAmt": "0.000",
                "entryPrice": "0.0",
                "breakEvenPrice": "0.0",
                "markPrice": "21123.05052574",
                "unRealizedProfit": "0.00000000",
                "liquidationPrice": "0",
                "leverage": "4",
                "maxNotionalValue": "100000000",
                "marginType": "cross",
                "isolatedMargin": "0.00000000",
                "isAutoAddMargin": "false",
                "positionSide": "SHORT",
                "notional": "0",
                "isolatedWallet": "0",
                "updateTime": 0
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.position-information-v3-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#position-information-v3-user_data",
      "name": "Position Information V3 (USER_DATA)"
    },
    {
      "description": "Get current position information.",
      "securityType": "USER_DATA",
      "request": "GET /fapi/v2/positionRisk",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v2/positionRisk",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "For One-way position mode:",
            "For Hedge position mode:"
          ],
          "responseTypes": [
            [
              {
                "entryPrice": "NumberString",
                "breakEvenPrice": "NumberString",
                "marginType": "string",
                "isAutoAddMargin": "string",
                "isolatedMargin": "NumberString",
                "leverage": "NumberString",
                "liquidationPrice": "NumberString",
                "markPrice": "NumberString",
                "maxNotionalValue": "NumberString",
                "positionAmt": "NumberString",
                "notional": "NumberString",
                "isolatedWallet": "NumberString",
                "symbol": "string",
                "unRealizedProfit": "NumberString",
                "positionSide": "PositionSide",
                "updateTime": "number"
              }
            ],
            [
              {
                "symbol": "string",
                "positionAmt": "NumberString",
                "entryPrice": "NumberString",
                "breakEvenPrice": "NumberString",
                "markPrice": "NumberString",
                "unRealizedProfit": "NumberString",
                "liquidationPrice": "NumberString",
                "leverage": "NumberString",
                "maxNotionalValue": "NumberString",
                "marginType": "string",
                "isolatedMargin": "NumberString",
                "isAutoAddMargin": "string",
                "positionSide": "PositionSide",
                "notional": "NumberString",
                "isolatedWallet": "NumberString",
                "updateTime": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "entryPrice": "0.00000",
                "breakEvenPrice": "0.0",
                "marginType": "isolated",
                "isAutoAddMargin": "false",
                "isolatedMargin": "0.00000000",
                "leverage": "10",
                "liquidationPrice": "0",
                "markPrice": "6679.50671178",
                "maxNotionalValue": "20000000",
                "positionAmt": "0.000",
                "notional": "0",
                "isolatedWallet": "0",
                "symbol": "BTCUSDT",
                "unRealizedProfit": "0.00000000",
                "positionSide": "BOTH",
                "updateTime": 0
              }
            ],
            [
              {
                "symbol": "BTCUSDT",
                "positionAmt": "0.001",
                "entryPrice": "22185.2",
                "breakEvenPrice": "0.0",
                "markPrice": "21123.05052574",
                "unRealizedProfit": "-1.06214947",
                "liquidationPrice": "19731.45529116",
                "leverage": "4",
                "maxNotionalValue": "100000000",
                "marginType": "cross",
                "isolatedMargin": "0.00000000",
                "isAutoAddMargin": "false",
                "positionSide": "LONG",
                "notional": "21.12305052",
                "isolatedWallet": "0",
                "updateTime": 1655217461579
              },
              {
                "symbol": "BTCUSDT",
                "positionAmt": "0.000",
                "entryPrice": "0.0",
                "breakEvenPrice": "0.0",
                "markPrice": "21123.05052574",
                "unRealizedProfit": "0.00000000",
                "liquidationPrice": "0",
                "leverage": "4",
                "maxNotionalValue": "100000000",
                "marginType": "cross",
                "isolatedMargin": "0.00000000",
                "isAutoAddMargin": "false",
                "positionSide": "SHORT",
                "notional": "0",
                "isolatedWallet": "0",
                "updateTime": 0
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.position-information-v2-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#position-information-v2-user_data",
      "name": "Position Information V2 (USER_DATA)"
    },
    {
      "description": "Get trades for a specific account and symbol.",
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/userTrades",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/userTrades",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": "This can only be used in combination with symbol"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "Trade id to fetch from. Default gets most recent trades."
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": "This can only be used in combination with symbol"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "Trade id to fetch from. Default gets most recent trades."
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "buyer": "boolean",
                "commission": "NumberString",
                "commissionAsset": "string",
                "id": "number",
                "maker": "boolean",
                "orderId": "number",
                "price": "NumberString",
                "qty": "NumberString",
                "quoteQty": "NumberString",
                "realizedPnl": "NumberString",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "symbol": "string",
                "time": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "buyer": false,
                "commission": "-0.07819010",
                "commissionAsset": "USDT",
                "id": 698759,
                "maker": false,
                "orderId": 25851813,
                "price": "7819.01",
                "qty": "0.002",
                "quoteQty": "15.63802",
                "realizedPnl": "-0.91539999",
                "side": "SELL",
                "positionSide": "SHORT",
                "symbol": "BTCUSDT",
                "time": 1569514978020
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.account-trade-list-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#account-trade-list-user_data",
      "name": "Account Trade List (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/income",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/income",
      "hmacSHA256": false,
      "weights": {
        "IP": 30,
        "IP_text": "30"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "incomeType": {
          "name": "incomeType",
          "type": "string",
          "required": false,
          "description": "TRANSFER, WELCOME_BONUS, REALIZED_PNL, FUNDING_FEE, COMMISSION, INSURANCE_CLEAR, REFERRAL_KICKBACK, COMMISSION_REBATE, API_REBATE, CONTEST_REWARD, CROSS_COLLATERAL_TRANSFER, OPTIONS_PREMIUM_FEE, OPTIONS_SETTLE_PROFIT, INTERNAL_TRANSFER, AUTO_EXCHANGE, DELIVERED_SETTELMENT, COIN_SWAP_DEPOSIT, COIN_SWAP_WITHDRAW, POSITION_LIMIT_INCREASE_FEE"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get funding from INCLUSIVE."
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get funding until INCLUSIVE."
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 100; max 1000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "incomeType": {
              "name": "incomeType",
              "type": "string",
              "required": false,
              "description": "TRANSFER, WELCOME_BONUS, REALIZED_PNL, FUNDING_FEE, COMMISSION, INSURANCE_CLEAR, REFERRAL_KICKBACK, COMMISSION_REBATE, API_REBATE, CONTEST_REWARD, CROSS_COLLATERAL_TRANSFER, OPTIONS_PREMIUM_FEE, OPTIONS_SETTLE_PROFIT, INTERNAL_TRANSFER, AUTO_EXCHANGE, DELIVERED_SETTELMENT, COIN_SWAP_DEPOSIT, COIN_SWAP_WITHDRAW, POSITION_LIMIT_INCREASE_FEE"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get funding from INCLUSIVE."
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get funding until INCLUSIVE."
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 100; max 1000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string", // trade symbol, if existing
                "incomeType": "string", // income type
                "income": "NumberString", // income amount
                "asset": "string", // income asset
                "info": "string", // extra information
                "time": "number",
                "tranId": "NumberString", // transaction id
                "tradeId": "string" // trade id, if existing
              },
              {
                "symbol": "string",
                "incomeType": "string",
                "income": "NumberString",
                "asset": "string",
                "info": "string",
                "time": "number",
                "tranId": "NumberString",
                "tradeId": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "", // trade symbol, if existing
                "incomeType": "TRANSFER", // income type
                "income": "-0.37500000", // income amount
                "asset": "USDT", // income asset
                "info": "TRANSFER", // extra information
                "time": 1570608000000,
                "tranId": "9689322392", // transaction id
                "tradeId": "" // trade id, if existing
              },
              {
                "symbol": "BTCUSDT",
                "incomeType": "COMMISSION",
                "income": "-0.01000000",
                "asset": "USDT",
                "info": "COMMISSION",
                "time": 1570636800000,
                "tranId": "9689322392",
                "tradeId": 2059192
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-income-history-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#get-income-history-user_data",
      "name": "Get Income History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/leverageBracket",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/leverageBracket",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "",
            "(if symbol sent)"
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "notionalCoef": "number", //user symbol bracket multiplier, only appears when user's symbol bracket is adjusted
                "brackets": [
                  {
                    "bracket": "number", // Notional bracket
                    "initialLeverage": "number", // Max initial leverage for this bracket
                    "notionalCap": "number", // Cap notional of this bracket
                    "notionalFloor": "number", // Notional threshold of this bracket
                    "maintMarginRatio": "number", // Maintenance ratio for this bracket
                    "cum": "number" // Auxiliary number for quick calculation
                  }
                ]
              }
            ],
            {
              "symbol": "string",
              "notionalCoef": "number",
              "brackets": [
                {
                  "bracket": "number",
                  "initialLeverage": "number",
                  "notionalCap": "number",
                  "notionalFloor": "number",
                  "maintMarginRatio": "number",
                  "cum": "number"
                }
              ]
            }
          ],
          "responseExamples": [
            [
              {
                "symbol": "ETHUSDT",
                "notionalCoef": 1.5, //user symbol bracket multiplier, only appears when user's symbol bracket is adjusted
                "brackets": [
                  {
                    "bracket": 1, // Notional bracket
                    "initialLeverage": 75, // Max initial leverage for this bracket
                    "notionalCap": 10000, // Cap notional of this bracket
                    "notionalFloor": 0, // Notional threshold of this bracket
                    "maintMarginRatio": 0.0065, // Maintenance ratio for this bracket
                    "cum": 0 // Auxiliary number for quick calculation
                  }
                ]
              }
            ],
            {
              "symbol": "ETHUSDT",
              "notionalCoef": 1.5,
              "brackets": [
                {
                  "bracket": 1,
                  "initialLeverage": 75,
                  "notionalCap": 10000,
                  "notionalFloor": 0,
                  "maintMarginRatio": 0.0065,
                  "cum": 0
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.notional-and-leverage-brackets-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#notional-and-leverage-brackets-user_data",
      "name": "Notional and Leverage Brackets (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/adlQuantile",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/adlQuantile",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "adlQuantile": {
                  // if the positions of the symbol are crossed margined in Hedge Mode, "LONG" and "SHORT" will be returned a same quantile value, and "HEDGE" will be returned instead of "BOTH".
                  "LONG": "number",
                  "SHORT": "number",
                  "HEDGE": "number" // only a sign, ignore the value
                }
              },
              {
                "symbol": "string",
                "adlQuantile": {
                  // for positions of the symbol are in One-way Mode or isolated margined in Hedge Mode
                  "LONG": "number", // adl quantile for "LONG" position in hedge mode
                  "SHORT": "number", // adl qauntile for "SHORT" position in hedge mode
                  "BOTH": "number" // adl qunatile for position in one-way mode
                }
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "ETHUSDT",
                "adlQuantile": {
                  // if the positions of the symbol are crossed margined in Hedge Mode, "LONG" and "SHORT" will be returned a same quantile value, and "HEDGE" will be returned instead of "BOTH".
                  "LONG": 3,
                  "SHORT": 3,
                  "HEDGE": 0 // only a sign, ignore the value
                }
              },
              {
                "symbol": "BTCUSDT",
                "adlQuantile": {
                  // for positions of the symbol are in One-way Mode or isolated margined in Hedge Mode
                  "LONG": 1, // adl quantile for "LONG" position in hedge mode
                  "SHORT": 2, // adl qauntile for "SHORT" position in hedge mode
                  "BOTH": 0 // adl qunatile for position in one-way mode
                }
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.position-adl-quantile-estimation-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#position-adl-quantile-estimation-user_data",
      "name": "Position ADL Quantile Estimation (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/forceOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/forceOrders",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "20 with symbol, 50 without symbol"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "autoCloseType": {
          "name": "autoCloseType",
          "type": "ENUM",
          "required": false,
          "description": "\"LIQUIDATION\" for liquidation orders, \"ADL\" for ADL orders."
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 50; max 100."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "autoCloseType": {
              "name": "autoCloseType",
              "type": "ENUM",
              "required": false,
              "description": "\"LIQUIDATION\" for liquidation orders, \"ADL\" for ADL orders."
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 50; max 100."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "orderId": "number",
                "symbol": "string",
                "status": "string",
                "clientOrderId": "string",
                "price": "NumberString",
                "avgPrice": "NumberString",
                "origQty": "NumberString",
                "executedQty": "NumberString",
                "cumQuote": "NumberString",
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "reduceOnly": "boolean",
                "closePosition": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "stopPrice": "NumberString",
                "workingType": "WorkingType",
                "origType": "string",
                "time": "number",
                "updateTime": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "orderId": 6071832819,
                "symbol": "BTCUSDT",
                "status": "FILLED",
                "clientOrderId": "autoclose-1596107620040000020",
                "price": "10871.09",
                "avgPrice": "10913.21000",
                "origQty": "0.001",
                "executedQty": "0.001",
                "cumQuote": "10.91321",
                "timeInForce": "IOC",
                "type": "LIMIT",
                "reduceOnly": false,
                "closePosition": false,
                "side": "SELL",
                "positionSide": "BOTH",
                "stopPrice": "0",
                "workingType": "CONTRACT_PRICE",
                "origType": "LIMIT",
                "time": 1596107620044,
                "updateTime": 1596107620087
              },
              {
                "orderId": 6072734303,
                "symbol": "BTCUSDT",
                "status": "FILLED",
                "clientOrderId": "adl_autoclose",
                "price": "11023.14",
                "avgPrice": "10979.82000",
                "origQty": "0.001",
                "executedQty": "0.001",
                "cumQuote": "10.97982",
                "timeInForce": "GTC",
                "type": "LIMIT",
                "reduceOnly": false,
                "closePosition": false,
                "side": "BUY",
                "positionSide": "SHORT",
                "stopPrice": "0",
                "workingType": "CONTRACT_PRICE",
                "origType": "LIMIT",
                "time": 1596110725059,
                "updateTime": 1596110725071
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.user-39-s-force-orders-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#user-39-s-force-orders-user_data",
      "name": "User's Force Orders (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/apiTradingStatus",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/apiTradingStatus",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "1 for a single symbol\n10 when the symbol parameter is omitted"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "",
            "Or (account violation triggered)"
          ],
          "responseTypes": [
            {
              "indicators": { // indicator: quantitative rules indicators, value: user's indicators value, triggerValue: trigger indicator value threshold of quantitative rules.
                "BTCUSDT": [
                  {
                    "isLocked": "boolean",
                    "plannedRecoverTime": "number",
                    "indicator": "string", // Unfilled Ratio (UFR)
                    "value": "number", // Current value
                    "triggerValue": "number" // Trigger value
                  },
                  null,
                  null,
                  null
                ],
                "ETHUSDT": [
                  {
                    "isLocked": "boolean",
                    "plannedRecoverTime": "number",
                    "indicator": "string",
                    "value": "number",
                    "triggerValue": "number"
                  },
                  null,
                  null,
                  null
                ]
              },
              "updateTime": "number"
            },
            {
              "indicators": {
                "ACCOUNT": [
                  {
                    "indicator": "string", //  Too many violations under multiple symbols trigger account violation
                    "value": "number",
                    "triggerValue": "number",
                    "plannedRecoverTime": "number",
                    "isLocked": "boolean"
                  }
                ]
              },
              "updateTime": "number"
            }
          ],
          "responseExamples": [
            {
              "indicators": { // indicator: quantitative rules indicators, value: user's indicators value, triggerValue: trigger indicator value threshold of quantitative rules.
                "BTCUSDT": [
                  {
                    "isLocked": true,
                    "plannedRecoverTime": 1545741270000,
                    "indicator": "UFR", // Unfilled Ratio (UFR)
                    "value": 0.05, // Current value
                    "triggerValue": 0.995 // Trigger value
                  },
                  {
                    "isLocked": true,
                    "plannedRecoverTime": 1545741270000,
                    "indicator": "IFER", // IOC/FOK Expiration Ratio (IFER)
                    "value": 0.99, // Current value
                    "triggerValue": 0.99 // Trigger value
                  },
                  {
                    "isLocked": true,
                    "plannedRecoverTime": 1545741270000,
                    "indicator": "GCR", // GTC Cancellation Ratio (GCR)
                    "value": 0.99, // Current value
                    "triggerValue": 0.99 // Trigger value
                  },
                  {
                    "isLocked": true,
                    "plannedRecoverTime": 1545741270000,
                    "indicator": "DR", // Dust Ratio (DR)
                    "value": 0.99, // Current value
                    "triggerValue": 0.99 // Trigger value
                  }
                ],
                "ETHUSDT": [
                  {
                    "isLocked": true,
                    "plannedRecoverTime": 1545741270000,
                    "indicator": "UFR",
                    "value": 0.05,
                    "triggerValue": 0.995
                  },
                  {
                    "isLocked": true,
                    "plannedRecoverTime": 1545741270000,
                    "indicator": "IFER",
                    "value": 0.99,
                    "triggerValue": 0.99
                  },
                  {
                    "isLocked": true,
                    "plannedRecoverTime": 1545741270000,
                    "indicator": "GCR",
                    "value": 0.99,
                    "triggerValue": 0.99
                  },
                  {
                    "isLocked": true,
                    "plannedRecoverTime": 1545741270000,
                    "indicator": "DR",
                    "value": 0.99,
                    "triggerValue": 0.99
                  }
                ]
              },
              "updateTime": 1545741270000
            },
            {
              "indicators": {
                "ACCOUNT": [
                  {
                    "indicator": "TMV", //  Too many violations under multiple symbols trigger account violation
                    "value": 10,
                    "triggerValue": 1,
                    "plannedRecoverTime": 1644919865000,
                    "isLocked": true
                  }
                ]
              },
              "updateTime": 1644913304748
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.futures-trading-quantitative-rules-indicators-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#futures-trading-quantitative-rules-indicators-user_data",
      "name": "Futures Trading Quantitative Rules Indicators (USER_DATA)"
    },
    {
      "description": "Query account configuration",
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/accountConfig",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/accountConfig",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "feeTier": "number", // account commission tier
              "canTrade": "boolean", // if can trade
              "canDeposit": "boolean", // if can transfer in asset
              "canWithdraw": "boolean", // if can transfer out asset
              "dualSidePosition": "boolean",
              "updateTime": "number", // reserved property, please ignore
              "multiAssetsMargin": "boolean",
              "tradeGroupId": "number"
            }
          ],
          "responseExamples": [
            {
              "feeTier": 0, // account commission tier
              "canTrade": true, // if can trade
              "canDeposit": true, // if can transfer in asset
              "canWithdraw": true, // if can transfer out asset
              "dualSidePosition": true,
              "updateTime": 0, // reserved property, please ignore
              "multiAssetsMargin": false,
              "tradeGroupId": -1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.futures-account-configuration-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#futures-account-configuration-user_data",
      "name": "Futures Account Configuration(USER_DATA)"
    },
    {
      "description": "Get current account symbol configuration.",
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/symbolConfig",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/symbolConfig",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "feeTier": "number", // account commission tier
              "canTrade": "boolean", // if can trade
              "canDeposit": "boolean", // if can transfer in asset
              "canWithdraw": "boolean", // if can transfer out asset
              "dualSidePosition": "boolean",
              "updateTime": "number", // reserved property, please ignore
              "multiAssetsMargin": "boolean",
              "tradeGroupId": "number"
            }
          ],
          "responseExamples": [
            {
              "feeTier": 0, // account commission tier
              "canTrade": true, // if can trade
              "canDeposit": true, // if can transfer in asset
              "canWithdraw": true, // if can transfer out asset
              "dualSidePosition": true,
              "updateTime": 0, // reserved property, please ignore
              "multiAssetsMargin": false,
              "tradeGroupId": -1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.symbol-configuration-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#symbol-configuration-user_data",
      "name": "Symbol Configuration(USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/commissionRate",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/commissionRate",
      "hmacSHA256": false,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "makerCommissionRate": "NumberString", // 0.02%
              "takerCommissionRate": "NumberString" // 0.04%
            }
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSDT",
              "makerCommissionRate": "0.0002", // 0.02%
              "takerCommissionRate": "0.0004" // 0.04%
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.user-commission-rate-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#user-commission-rate-user_data",
      "name": "User Commission Rate (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/rateLimit/order",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/rateLimit/order",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "rateLimitType": "RateLimitType",
                "interval": "RateLimitInterval",
                "intervalNum": "number",
                "limit": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "rateLimitType": "ORDERS",
                "interval": "SECOND",
                "intervalNum": 10,
                "limit": 10000
              },
              {
                "rateLimitType": "ORDERS",
                "interval": "MINUTE",
                "intervalNum": 1,
                "limit": 20000
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.query-user-rate-limit-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#query-user-rate-limit-user_data",
      "name": "Query User Rate Limit (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/income/asyn",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/income/asyn",
      "hmacSHA256": false,
      "weights": {
        "IP": 1500,
        "IP_text": "1500"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": true,
          "description": "Timestamp in ms"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": true,
          "description": "Timestamp in ms"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": true,
              "description": "Timestamp in ms"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": true,
              "description": "Timestamp in ms"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "avgCostTimestampOfLast30d": "number", // Average time taken for data download in the past 30 days
              "downloadId": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "avgCostTimestampOfLast30d": 7241837, // Average time taken for data download in the past 30 days
              "downloadId": "546975389218332672"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-download-id-for-futures-transaction-history-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#get-download-id-for-futures-transaction-history-user_data",
      "name": "Get Download Id For Futures Transaction History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/income/asyn/id",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/income/asyn/id",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "downloadId": {
          "name": "downloadId",
          "type": "string",
          "required": true,
          "description": "get by download id api"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "downloadId": {
              "name": "downloadId",
              "type": "string",
              "required": true,
              "description": "get by download id api"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "",
            "(Response when server is processing)"
          ],
          "responseTypes": [
            {
              "downloadId": "NumberString",
              "status": "string", // Enum:completed,processing
              "url": "string", // The link is mapped to download id
              "notified": "boolean", // ignore
              "expirationTimestamp": "number", // The link would expire after this timestamp
              "isExpired": "null"
            },
            null
          ],
          "responseExamples": [
            {
              "downloadId": "545923594199212032",
              "status": "completed", // Enum:completed,processing
              "url": "www.binance.com", // The link is mapped to download id
              "notified": true, // ignore
              "expirationTimestamp": 1645009771000, // The link would expire after this timestamp
              "isExpired": null
            },
            {
              "downloadId": "545923594199212032",
              "status": "processing",
              "url": "",
              "notified": false,
              "expirationTimestamp": -1,
              "isExpired": null
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-futures-transaction-history-download-link-by-id-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#get-futures-transaction-history-download-link-by-id-user_data",
      "name": "Get Futures Transaction History Download Link by Id (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/order/asyn",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/order/asyn",
      "hmacSHA256": false,
      "weights": {
        "IP": 1500,
        "IP_text": "1500"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": true,
          "description": "Timestamp in ms"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": true,
          "description": "Timestamp in ms"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": true,
              "description": "Timestamp in ms"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": true,
              "description": "Timestamp in ms"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "avgCostTimestampOfLast30d": "number", // Average time taken for data download in the past 30 days
              "downloadId": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "avgCostTimestampOfLast30d": 7241837, // Average time taken for data download in the past 30 days
              "downloadId": "546975389218332672"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-download-id-for-futures-order-history-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#get-download-id-for-futures-order-history-user_data",
      "name": "Get Download Id For Futures Order History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/order/asyn/id",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/order/asyn/id",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "downloadId": {
          "name": "downloadId",
          "type": "string",
          "required": true,
          "description": "get by download id api"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "downloadId": {
              "name": "downloadId",
              "type": "string",
              "required": true,
              "description": "get by download id api"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "",
            "(Response when server is processing)"
          ],
          "responseTypes": [
            {
              "downloadId": "NumberString",
              "status": "string", // Enum:completed,processing
              "url": "string", // The link is mapped to download id
              "notified": "boolean", // ignore
              "expirationTimestamp": "number", // The link would expire after this timestamp
              "isExpired": "null"
            },
            null
          ],
          "responseExamples": [
            {
              "downloadId": "545923594199212032",
              "status": "completed", // Enum:completed,processing
              "url": "www.binance.com", // The link is mapped to download id
              "notified": true, // ignore
              "expirationTimestamp": 1645009771000, // The link would expire after this timestamp
              "isExpired": null
            },
            {
              "downloadId": "545923594199212032",
              "status": "processing",
              "url": "",
              "notified": false,
              "expirationTimestamp": -1,
              "isExpired": null
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-futures-order-history-download-link-by-id-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#get-futures-order-history-download-link-by-id-user_data",
      "name": "Get Futures Order History Download Link by Id (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/trade/asyn",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/trade/asyn",
      "hmacSHA256": false,
      "weights": {
        "IP": 1500,
        "IP_text": "1500"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": true,
          "description": "Timestamp in ms"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": true,
          "description": "Timestamp in ms"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": true,
              "description": "Timestamp in ms"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": true,
              "description": "Timestamp in ms"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "avgCostTimestampOfLast30d": "number", // Average time taken for data download in the past 30 days
              "downloadId": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "avgCostTimestampOfLast30d": 7241837, // Average time taken for data download in the past 30 days
              "downloadId": "546975389218332672"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-download-id-for-futures-trade-history-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#get-download-id-for-futures-trade-history-user_data",
      "name": "Get Download Id For Futures Trade History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/trade/asyn/id",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/trade/asyn/id",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "downloadId": {
          "name": "downloadId",
          "type": "string",
          "required": true,
          "description": "get by download id api"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "downloadId": {
              "name": "downloadId",
              "type": "string",
              "required": true,
              "description": "get by download id api"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "",
            "(Response when server is processing)"
          ],
          "responseTypes": [
            {
              "downloadId": "NumberString",
              "status": "string", // Enum:completed,processing
              "url": "string", // The link is mapped to download id
              "notified": "boolean", // ignore
              "expirationTimestamp": "number", // The link would expire after this timestamp
              "isExpired": "null"
            },
            null
          ],
          "responseExamples": [
            {
              "downloadId": "545923594199212032",
              "status": "completed", // Enum:completed,processing
              "url": "www.binance.com", // The link is mapped to download id
              "notified": true, // ignore
              "expirationTimestamp": 1645009771000, // The link would expire after this timestamp
              "isExpired": null
            },
            {
              "downloadId": "545923594199212032",
              "status": "processing",
              "url": "",
              "notified": false,
              "expirationTimestamp": -1,
              "isExpired": null
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-futures-trade-download-link-by-id-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#get-futures-trade-download-link-by-id-user_data",
      "name": "Get Futures Trade Download Link by Id (USER_DATA)"
    },
    {
      "securityType": "USER_STREAM",
      "request": "POST /fapi/v1/listenKey",
      "requestMethod": "POST",
      "requestEndPoint": "/fapi/v1/listenKey",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "listenKey": "string"
            }
          ],
          "responseExamples": [
            {
              "listenKey": "pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "User Data Streams",
      "path": "toc.user-data-streams.start-user-data-stream-user_stream",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#start-user-data-stream-user_stream",
      "name": "Start User Data Stream (USER_STREAM)"
    },
    {
      "securityType": "USER_STREAM",
      "request": "PUT /fapi/v1/listenKey",
      "requestMethod": "PUT",
      "requestEndPoint": "/fapi/v1/listenKey",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "listenKey": "string" //the listenkey which got extended
            }
          ],
          "responseExamples": [
            {
              "listenKey": "3HBntNTepshgEdjIwSUIBgB9keLyOCg5qv3n6bYAtktG8ejcaW5HXz9Vx1JgIieg" //the listenkey which got extended
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "User Data Streams",
      "path": "toc.user-data-streams.keepalive-user-data-stream-user_stream",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#keepalive-user-data-stream-user_stream",
      "name": "Keepalive User Data Stream (USER_STREAM)"
    },
    {
      "description": "Close out a user data stream.",
      "securityType": "USER_STREAM",
      "request": "DELETE /fapi/v1/listenKey",
      "requestMethod": "DELETE",
      "requestEndPoint": "/fapi/v1/listenKey",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "User Data Streams",
      "path": "toc.user-data-streams.close-user-data-stream-user_stream",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#close-user-data-stream-user_stream",
      "name": "Close User Data Stream (USER_STREAM)"
    },
    {
      "description": "Get Portfolio Margin Pro current account information.",
      "securityType": "USER_DATA",
      "request": "GET /fapi/v1/pmAccountInfo",
      "requestMethod": "GET",
      "requestEndPoint": "/fapi/v1/pmAccountInfo",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "maxWithdrawAmountUSD": "NumberString", // Portfolio Margin Pro maximum virtual amount for transfer out in USD
              "asset": "string", // asset name
              "maxWithdrawAmount": "NumberString" // Please ignore
            }
          ],
          "responseExamples": [
            {
              "maxWithdrawAmountUSD": "1627523.32459208", // Portfolio Margin Pro maximum virtual amount for transfer out in USD
              "asset": "BTC", // asset name
              "maxWithdrawAmount": "27.43689636" // Please ignore
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Portfolio Margin Pro Endpoints",
      "path": "toc.portfolio-margin-pro-endpoints.portfolio-margin-pro-account-information-user_data",
      "apiType": "usd-futures",
      "ref": "https://binance-docs.github.io/apidocs/futures/en/#portfolio-margin-pro-account-information-user_data",
      "name": "Portfolio Margin Pro Account Information (USER_DATA)"
    }
  ],
  "dapi": [
    {
      "description": "Test connectivity to the Rest API.",
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/ping",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/ping",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.test-connectivity",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#test-connectivity",
      "name": "Test Connectivity"
    },
    {
      "description": "Test connectivity to the Rest API and get the current server time.",
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/time",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/time",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "serverTime": "number"
            }
          ],
          "responseExamples": [
            {
              "serverTime": 1499827319559
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.check-server-time",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#check-server-time",
      "name": "Check Server time"
    },
    {
      "description": "Current exchange trading rules and symbol information",
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/exchangeInfo",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/exchangeInfo",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "exchangeFilters": [],
              "rateLimits": [
                {
                  "interval": "RateLimitInterval",
                  "intervalNum": "number",
                  "limit": "number",
                  "rateLimitType": "RateLimitType"
                },
                null
              ],
              "serverTime": "number", // Ignore please. If you want to check current server time, please check via "GET /dapi/v1/time"
              "symbols": [ // contract symbols
                {
                  "filters": [
                    {
                      "filterType": "\"PRICE_FILTER\"",
                      "maxPrice": "NumberString",
                      "minPrice": "NumberString",
                      "tickSize": "NumberString"
                    },
                    {
                      "filterType": "\"LOT_SIZE\"",
                      "maxQty": "NumberString",
                      "minQty": "NumberString",
                      "stepSize": "NumberString"
                    },
                    {
                      "filterType": "\"MARKET_LOT_SIZE\"",
                      "maxQty": "NumberString",
                      "minQty": "NumberString",
                      "stepSize": "NumberString"
                    },
                    {
                      "filterType": "\"MAX_NUM_ORDERS\"",
                      "limit": "number"
                    },
                    {
                      "filterType": "\"PERCENT_PRICE\"",
                      "multiplierUp": "NumberString",
                      "multiplierDown": "NumberString",
                      "multiplierDecimal": "number"
                    }
                  ],
                  "OrderType": [
                    "string"
                  ],
                  "timeInForce": [
                    "TimeInForce"
                  ],
                  "liquidationFee": "NumberString", // liquidation fee rate
                  "marketTakeBound": "NumberString", // the max price difference rate( from mark price) a market order can make
                  "symbol": "string", // contract symbol name
                  "pair": "string", // underlying symbol
                  "contractType": "string",
                  "deliveryDate": "number",
                  "onboardDate": "number",
                  "contractStatus": "string",
                  "contractSize": "number",
                  "quoteAsset": "string",
                  "baseAsset": "string",
                  "marginAsset": "string",
                  "pricePrecision": "number", // please do not use it as tickSize
                  "quantityPrecision": "number", // please do not use it as stepSize
                  "baseAssetPrecision": "number",
                  "quotePrecision": "number",
                  "equalQtyPrecision": "number", // ignore
                  "triggerProtect": "NumberString", // threshold for algo order with "priceProtect"
                  "maintMarginPercent": "NumberString", // ignore
                  "requiredMarginPercent": "NumberString", // ignore
                  "underlyingType": "string",
                  "underlyingSubType": []
                }
              ],
              "timezone": "string"
            }
          ],
          "responseExamples": [
            {
              "exchangeFilters": [],
              "rateLimits": [
                {
                  "interval": "MINUTE",
                  "intervalNum": 1,
                  "limit": 6000,
                  "rateLimitType": "REQUEST_WEIGHT"
                },
                {
                  "interval": "MINUTE",
                  "intervalNum": 1,
                  "limit": 6000,
                  "rateLimitType": "ORDERS"
                }
              ],
              "serverTime": 1565613908500, // Ignore please. If you want to check current server time, please check via "GET /dapi/v1/time"
              "symbols": [ // contract symbols
                {
                  "filters": [
                    {
                      "filterType": "PRICE_FILTER",
                      "maxPrice": "100000",
                      "minPrice": "0.1",
                      "tickSize": "0.1"
                    },
                    {
                      "filterType": "LOT_SIZE",
                      "maxQty": "100000",
                      "minQty": "1",
                      "stepSize": "1"
                    },
                    {
                      "filterType": "MARKET_LOT_SIZE",
                      "maxQty": "100000",
                      "minQty": "1",
                      "stepSize": "1"
                    },
                    {
                      "filterType": "MAX_NUM_ORDERS",
                      "limit": 200
                    },
                    {
                      "filterType": "PERCENT_PRICE",
                      "multiplierUp": "1.0500",
                      "multiplierDown": "0.9500",
                      "multiplierDecimal": 4
                    }
                  ],
                  "OrderType": [
                    "LIMIT",
                    "MARKET",
                    "STOP",
                    "TAKE_PROFIT",
                    "TRAILING_STOP_MARKET"
                  ],
                  "timeInForce": [
                    "GTC",
                    "IOC",
                    "FOK",
                    "GTX"
                  ],
                  "liquidationFee": "0.010000", // liquidation fee rate
                  "marketTakeBound": "0.30", // the max price difference rate( from mark price) a market order can make
                  "symbol": "BTCUSD_200925", // contract symbol name
                  "pair": "BTCUSD", // underlying symbol
                  "contractType": "CURRENT_QUARTER",
                  "deliveryDate": 1601020800000,
                  "onboardDate": 1590739200000,
                  "contractStatus": "TRADING",
                  "contractSize": 100,
                  "quoteAsset": "USD",
                  "baseAsset": "BTC",
                  "marginAsset": "BTC",
                  "pricePrecision": 1, // please do not use it as tickSize
                  "quantityPrecision": 0, // please do not use it as stepSize
                  "baseAssetPrecision": 8,
                  "quotePrecision": 8,
                  "equalQtyPrecision": 4, // ignore
                  "triggerProtect": "0.0500", // threshold for algo order with "priceProtect"
                  "maintMarginPercent": "2.5000", // ignore
                  "requiredMarginPercent": "5.0000", // ignore
                  "underlyingType": "COIN",
                  "underlyingSubType": []
                }
              ],
              "timezone": "UTC"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.exchange-information",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#exchange-information",
      "name": "Exchange Information"
    },
    {
      "description": "Adjusted based on the limit:",
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/depth",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/depth",
      "hmacSHA256": false,
      "weights": {
        "IP": "\n(params :QueryStruct) =>\n    typeof(params[\"limit\"])==\"number\"\n        ? [[1000,20],[500,10],[100,5],[5,2]].find((item,i)=> (params[\"limit\"] as number)>=item[0] || i==0)! [1]\n        : (()=>{throw new Error(\"Parameter 'limit' is not a number\")})()",
        "IP_text": "Adjusted based on the limit:\nLimit         Weight\n5, 10, 20, 50 2     \n100           5     \n500           10    \n1000          20    "
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; Valid limits:[5, 10, 20, 50, 100, 500, 1000]"
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; Valid limits:[5, 10, 20, 50, 100, 500, 1000]"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "lastUpdateId": "number",
              "symbol": "string", // Symbol
              "pair": "string", // Pair
              "E": "number", // Message output time
              "T": "number", // Transaction time
              "bids": [
                [
                  "NumberString" // PRICE
                ]
              ],
              "asks": [
                [
                  "NumberString"
                ]
              ]
            }
          ],
          "responseExamples": [
            {
              "lastUpdateId": 16769853,
              "symbol": "BTCUSD_PERP", // Symbol
              "pair": "BTCUSD", // Pair
              "E": 1591250106370, // Message output time
              "T": 1591250106368, // Transaction time
              "bids": [
                [
                  "9638.0", // PRICE
                  "431" // QTY
                ]
              ],
              "asks": [
                [
                  "9638.2",
                  "12"
                ]
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.order-book",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#order-book",
      "name": "Order Book"
    },
    {
      "description": "Get recent market trades",
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/trades",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/trades",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "id": "number",
                "price": "NumberString",
                "qty": "NumberString",
                "baseQty": "NumberString",
                "time": "number",
                "isBuyerMaker": "boolean"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "id": 28457,
                "price": "9635.0",
                "qty": "1",
                "baseQty": "0.01037883",
                "time": 1591250192508,
                "isBuyerMaker": true
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.recent-trades-list",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#recent-trades-list",
      "name": "Recent Trades List"
    },
    {
      "description": "Get older market historical trades.",
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/historicalTrades",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/historicalTrades",
      "hmacSHA256": false,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        },
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "TradeId to fetch from. Default gets most recent trades."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            },
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "TradeId to fetch from. Default gets most recent trades."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "id": "number",
                "price": "NumberString",
                "qty": "NumberString",
                "baseQty": "NumberString",
                "time": "number",
                "isBuyerMaker": "boolean"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "id": 595103,
                "price": "9642.2",
                "qty": "1",
                "baseQty": "0.01037108",
                "time": 1499865549590,
                "isBuyerMaker": true
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.old-trades-lookup-market_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#old-trades-lookup-market_data",
      "name": "Old Trades Lookup (MARKET_DATA)"
    },
    {
      "description": "Get compressed, aggregate trades. Market trades that fill in 100ms with the same price and the same taking side will have the quantity aggregated.",
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/aggTrades",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/aggTrades",
      "hmacSHA256": false,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "ID to get aggregate trades from INCLUSIVE."
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get aggregate trades from INCLUSIVE."
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get aggregate trades until INCLUSIVE."
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "ID to get aggregate trades from INCLUSIVE."
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get aggregate trades from INCLUSIVE."
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get aggregate trades until INCLUSIVE."
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "a": "number", // Aggregate tradeId
                "p": "NumberString", // Price
                "q": "NumberString", // Quantity
                "f": "number", // First tradeId
                "l": "number", // Last tradeId
                "T": "number", // Timestamp
                "m": "boolean" // Was the buyer the maker?
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "a": 416690, // Aggregate tradeId
                "p": "9642.4", // Price
                "q": "3", // Quantity
                "f": 595259, // First tradeId
                "l": 595259, // Last tradeId
                "T": 1591250548649, // Timestamp
                "m": false // Was the buyer the maker?
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.compressed-aggregate-trades-list",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#compressed-aggregate-trades-list",
      "name": "Compressed/Aggregate Trades List"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/premiumIndex",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/premiumIndex",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "pair": {
          "name": "pair",
          "type": "string",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "pair": {
              "name": "pair",
              "type": "string",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "pair": "string",
                "markPrice": "NumberString", // mark price
                "indexPrice": "NumberString", // index price
                "estimatedSettlePrice": "NumberString", // Estimated Settle Price, only useful in the last hour before the settlement starts.
                "lastFundingRate": "NumberString", // the lasted funding rate, for perpetual contract symbols only. For delivery symbols, "" will be shown.
                "interestRate": "NumberString", // the base asset interest rate, for perpetual contract symbols only. For delivery symbols, "" will be shown.
                "nextFundingTime": "number", // For perpetual contract symbols only. For delivery symbols, 0 will be shown
                "time": "number"
              },
              {
                "symbol": "string",
                "pair": "string",
                "markPrice": "NumberString",
                "indexPrice": "NumberString",
                "estimatedSettlePrice": "NumberString",
                "lastFundingRate": "string",
                "interestRate": "string",
                "nextFundingTime": "number",
                "time": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSD_PERP",
                "pair": "BTCUSD",
                "markPrice": "11029.69574559", // mark price
                "indexPrice": "10979.14437500", // index price
                "estimatedSettlePrice": "10981.74168236", // Estimated Settle Price, only useful in the last hour before the settlement starts.
                "lastFundingRate": "0.00071003", // the lasted funding rate, for perpetual contract symbols only. For delivery symbols, "" will be shown.
                "interestRate": "0.00010000", // the base asset interest rate, for perpetual contract symbols only. For delivery symbols, "" will be shown.
                "nextFundingTime": 1596096000000, // For perpetual contract symbols only. For delivery symbols, 0 will be shown
                "time": 1596094042000
              },
              {
                "symbol": "BTCUSD_200925",
                "pair": "BTCUSD",
                "markPrice": "12077.01343750",
                "indexPrice": "10979.10312500",
                "estimatedSettlePrice": "10981.74168236",
                "lastFundingRate": "",
                "interestRate": "",
                "nextFundingTime": 0,
                "time": 1596094042000
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.index-price-and-mark-price",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#index-price-and-mark-price",
      "name": "Index Price and Mark Price"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/fundingRate",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/fundingRate",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get funding rate from INCLUSIVE."
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get funding rate  until INCLUSIVE."
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 100; max 1000"
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get funding rate from INCLUSIVE."
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get funding rate  until INCLUSIVE."
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 100; max 1000"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "fundingTime": "number",
                "fundingRate": "NumberString",
                "markPrice": "NumberString" // mark price associated with a particular funding fee charge
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSD_PERP",
                "fundingTime": 1698768000000,
                "fundingRate": "-0.00300000",
                "markPrice": "34651.40000000" // mark price associated with a particular funding fee charge
              },
              {
                "symbol": "BTCUSD_PERP",
                "fundingTime": 1698796800000,
                "fundingRate": "-0.00300000",
                "markPrice": "34651.40000000"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.get-funding-rate-history-of-perpetual-futures",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#get-funding-rate-history-of-perpetual-futures",
      "name": "Get Funding Rate History of Perpetual Futures"
    },
    {
      "description": "Query funding rate info for symbols that had FundingRateCap/ FundingRateFloor / fundingIntervalHours adjustment",
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/fundingInfo",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/fundingInfo",
      "hmacSHA256": false,
      "weights": {},
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "adjustedFundingRateCap": "NumberString",
                "adjustedFundingRateFloor": "NumberString",
                "fundingIntervalHours": "number",
                "disclaimer": "boolean" // ingore
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BLZUSDT",
                "adjustedFundingRateCap": "0.02500000",
                "adjustedFundingRateFloor": "-0.02500000",
                "fundingIntervalHours": 8,
                "disclaimer": false // ingore
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.get-funding-rate-info",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#get-funding-rate-info",
      "name": "Get Funding Rate Info"
    },
    {
      "description": "Kline/candlestick bars for a symbol. ",
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/klines",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/klines",
      "hmacSHA256": false,
      "weights": {
        "IP": "\n(params :QueryStruct) =>\n    typeof(params[\"limit\"])==\"number\"\n        ? [[1001,10],[500,5],[100,2],[1,1]].find((item,i)=> (params[\"limit\"] as number)>=item[0] || i==0)! [1]\n        : (()=>{throw new Error(\"Parameter 'limit' is not a number\")})()",
        "IP_text": "Adjusted based on the limit:\nLIMIT       weight\n[1,100)     1     \n[100, 500)  2     \n[500, 1000] 5     \n> 1000      10    "
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "interval": {
          "name": "interval",
          "type": "RateLimitInterval",
          "required": true,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1500."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "interval": {
              "name": "interval",
              "type": "RateLimitInterval",
              "required": true,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1500."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              [
                "number", // Open time
                "NumberString", // Open
                "NumberString", // High
                "NumberString", // Low
                "NumberString", // Close (or latest price)
                "NumberString", // Volume
                "number", // Close time
                "NumberString", // Base asset volume
                "number", // Number of trades
                "NumberString", // Taker buy volume
                "NumberString", // Taker buy base asset volume
                "NumberString" // Ignore.
              ]
            ]
          ],
          "responseExamples": [
            [
              [
                1591258320000, // Open time
                "9640.7", // Open
                "9642.4", // High
                "9640.6", // Low
                "9642.0", // Close (or latest price)
                "206", // Volume
                1591258379999, // Close time
                "2.13660389", // Base asset volume
                48, // Number of trades
                "119", // Taker buy volume
                "1.23424865", // Taker buy base asset volume
                "0" // Ignore.
              ]
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.kline-candlestick-data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#kline-candlestick-data",
      "name": "Kline/Candlestick Data"
    },
    {
      "description": "Kline/candlestick bars for a specific contract type.",
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/continuousKlines",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/continuousKlines",
      "hmacSHA256": false,
      "weights": {
        "IP": "\n(params :QueryStruct) =>\n    typeof(params[\"limit\"])==\"number\"\n        ? [[1001,10],[500,5],[100,2],[1,1]].find((item,i)=> (params[\"limit\"] as number)>=item[0] || i==0)! [1]\n        : (()=>{throw new Error(\"Parameter 'limit' is not a number\")})()",
        "IP_text": "Adjusted based on the limit:\nLIMIT       weight\n[1,100)     1     \n[100, 500)  2     \n[500, 1000] 5     \n> 1000      10    "
      },
      "baseParams": {
        "pair": {
          "name": "pair",
          "type": "string",
          "required": true,
          "description": ""
        },
        "contractType": {
          "name": "contractType",
          "type": "ENUM",
          "required": true,
          "description": ""
        },
        "interval": {
          "name": "interval",
          "type": "RateLimitInterval",
          "required": true,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1500."
        }
      },
      "overloads": [
        {
          "params": {
            "pair": {
              "name": "pair",
              "type": "string",
              "required": true,
              "description": ""
            },
            "contractType": {
              "name": "contractType",
              "type": "ENUM",
              "required": true,
              "description": ""
            },
            "interval": {
              "name": "interval",
              "type": "RateLimitInterval",
              "required": true,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1500."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              [
                "number", // Open time
                "NumberString", // Open
                "NumberString", // High
                "NumberString", // Low
                "NumberString", // Close (or latest price)
                "NumberString", // Volume
                "number", // Close time
                "NumberString", // Base asset volume
                "number", // Number of trades
                "NumberString", // Taker buy volume
                "NumberString", // Taker buy base asset volume
                "NumberString" // Ignore.
              ]
            ]
          ],
          "responseExamples": [
            [
              [
                1591258320000, // Open time
                "9640.7", // Open
                "9642.4", // High
                "9640.6", // Low
                "9642.0", // Close (or latest price)
                "206", // Volume
                1591258379999, // Close time
                "2.13660389", // Base asset volume
                48, // Number of trades
                "119", // Taker buy volume
                "1.23424865", // Taker buy base asset volume
                "0" // Ignore.
              ]
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.continuous-contract-kline-candlestick-data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#continuous-contract-kline-candlestick-data",
      "name": "Continuous Contract Kline/Candlestick Data"
    },
    {
      "description": "Kline/candlestick bars for the index price of a pair.",
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/indexPriceKlines",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/indexPriceKlines",
      "hmacSHA256": false,
      "weights": {
        "IP": "\n(params :QueryStruct) =>\n    typeof(params[\"limit\"])==\"number\"\n        ? [[1001,10],[500,5],[100,2],[1,1]].find((item,i)=> (params[\"limit\"] as number)>=item[0] || i==0)! [1]\n        : (()=>{throw new Error(\"Parameter 'limit' is not a number\")})()",
        "IP_text": "Adjusted based on the limit:\nLIMIT       weight\n[1,100)     1     \n[100, 500)  2     \n[500, 1000] 5     \n> 1000      10    "
      },
      "baseParams": {
        "pair": {
          "name": "pair",
          "type": "string",
          "required": true,
          "description": ""
        },
        "interval": {
          "name": "interval",
          "type": "RateLimitInterval",
          "required": true,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1500."
        }
      },
      "overloads": [
        {
          "params": {
            "pair": {
              "name": "pair",
              "type": "string",
              "required": true,
              "description": ""
            },
            "interval": {
              "name": "interval",
              "type": "RateLimitInterval",
              "required": true,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1500."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              [
                "number", // Open time
                "NumberString", // Open
                "NumberString", // High
                "NumberString", // Low
                "NumberString", // Close (or latest price)
                "NumberString", // Ignore
                "number", // Close time
                "NumberString", // Ignore
                "number", // Number of bisic data
                "NumberString", // Ignore
                "NumberString", // Ignore
                "NumberString" // Ignore
              ]
            ]
          ],
          "responseExamples": [
            [
              [
                1591256400000, // Open time
                "9653.69440000", // Open
                "9653.69640000", // High
                "9651.38600000", // Low
                "9651.55200000", // Close (or latest price)
                "0  ", // Ignore
                1591256459999, // Close time
                "0", // Ignore
                60, // Number of bisic data
                "0", // Ignore
                "0", // Ignore
                "0" // Ignore
              ]
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.index-price-kline-candlestick-data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#index-price-kline-candlestick-data",
      "name": "Index Price Kline/Candlestick Data"
    },
    {
      "description": "Kline/candlestick bars for the mark price of a symbol.",
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/markPriceKlines",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/markPriceKlines",
      "hmacSHA256": false,
      "weights": {
        "IP": "\n(params :QueryStruct) =>\n    typeof(params[\"limit\"])==\"number\"\n        ? [[1001,10],[500,5],[100,2],[1,1]].find((item,i)=> (params[\"limit\"] as number)>=item[0] || i==0)! [1]\n        : (()=>{throw new Error(\"Parameter 'limit' is not a number\")})()",
        "IP_text": "Adjusted based on the limit:\nLIMIT       weight\n[1,100)     1     \n[100, 500)  2     \n[500, 1000] 5     \n> 1000      10    "
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "interval": {
          "name": "interval",
          "type": "RateLimitInterval",
          "required": true,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1500."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "interval": {
              "name": "interval",
              "type": "RateLimitInterval",
              "required": true,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1500."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              [
                "number", // Open time
                "NumberString", // Open
                "NumberString", // High
                "NumberString", // Low
                "NumberString", // Close (or latest price)
                "NumberString", // Ignore
                "number", // Close time
                "NumberString", // Ignore
                "number", // Number of bisic data
                "NumberString", // Ignore
                "NumberString", // Ignore
                "NumberString" // Ignore
              ]
            ]
          ],
          "responseExamples": [
            [
              [
                1591256460000, // Open time
                "9653.29201333", // Open
                "9654.56401333", // High
                "9653.07367333", // Low
                "9653.07367333", // Close (or latest price)
                "0  ", // Ignore
                1591256519999, // Close time
                "0", // Ignore
                60, // Number of bisic data
                "0", // Ignore
                "0", // Ignore
                "0" // Ignore
              ]
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.mark-price-kline-candlestick-data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#mark-price-kline-candlestick-data",
      "name": "Mark Price Kline/Candlestick Data"
    },
    {
      "description": "Premium index kline bars of a symbol.",
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/premiumIndexKlines",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/premiumIndexKlines",
      "hmacSHA256": false,
      "weights": {
        "IP": "\n(params :QueryStruct) =>\n    typeof(params[\"limit\"])==\"number\"\n        ? [[1001,10],[500,5],[100,2],[1,1]].find((item,i)=> (params[\"limit\"] as number)>=item[0] || i==0)! [1]\n        : (()=>{throw new Error(\"Parameter 'limit' is not a number\")})()",
        "IP_text": "Adjusted based on the limit:\nLIMIT       weight\n[1,100)     1     \n[100, 500)  2     \n[500, 1000] 5     \n> 1000      10    "
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "interval": {
          "name": "interval",
          "type": "RateLimitInterval",
          "required": true,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1500."
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "interval": {
              "name": "interval",
              "type": "RateLimitInterval",
              "required": true,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1500."
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              [
                "number", // Open time
                "NumberString", // Open
                "NumberString", // High
                "NumberString", // Low
                "NumberString", // Close
                "NumberString", // Ignore
                "number", // Close time
                "NumberString", // Ignore
                "number", // Ignore
                "NumberString", // Ignore
                "NumberString", // Ignore
                "NumberString" // Ignore
              ]
            ]
          ],
          "responseExamples": [
            [
              [
                1691603820000, // Open time
                "-0.00042931", // Open
                "-0.00023641", // High
                "-0.00059406", // Low
                "-0.00043659", // Close
                "0", // Ignore
                1691603879999, // Close time
                "0", // Ignore
                12, // Ignore
                "0", // Ignore
                "0", // Ignore
                "0" // Ignore
              ]
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.premium-index-kline-data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#premium-index-kline-data",
      "name": "Premium index Kline Data"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/ticker/24hr",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/ticker/24hr",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "1 for a single symbol;\n40 when the symbol parameter is omitted"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "pair": {
          "name": "pair",
          "type": "string",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "pair": {
              "name": "pair",
              "type": "string",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "pair": "string",
                "priceChange": "NumberString",
                "priceChangePercent": "NumberString",
                "weightedAvgPrice": "NumberString",
                "lastPrice": "NumberString",
                "lastQty": "NumberString",
                "openPrice": "NumberString",
                "highPrice": "NumberString",
                "lowPrice": "NumberString",
                "volume": "NumberString",
                "baseVolume": "NumberString",
                "openTime": "number",
                "closeTime": "number",
                "firstId": "number", // First tradeId
                "lastId": "number", // Last tradeId
                "count": "number" // Trade count
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSD_200925",
                "pair": "BTCUSD",
                "priceChange": "136.6",
                "priceChangePercent": "1.436",
                "weightedAvgPrice": "9547.3",
                "lastPrice": "9651.6",
                "lastQty": "1",
                "openPrice": "9515.0",
                "highPrice": "9687.0",
                "lowPrice": "9499.5",
                "volume": "494109",
                "baseVolume": "5192.94797687",
                "openTime": 1591170300000,
                "closeTime": 1591256718418,
                "firstId": 600507, // First tradeId
                "lastId": 697803, // Last tradeId
                "count": 97297 // Trade count
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.24hr-ticker-price-change-statistics",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#24hr-ticker-price-change-statistics",
      "name": "24hr Ticker Price Change Statistics"
    },
    {
      "description": "Latest price for a symbol or symbols.",
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/ticker/price",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/ticker/price",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "1 for a single symbol;\n2 when the symbol parameter is omitted"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "pair": {
          "name": "pair",
          "type": "string",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "pair": {
              "name": "pair",
              "type": "string",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "ps": "NumberString", // pair
                "price": "NumberString",
                "time": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSD_200626",
                "ps": "9647.8", // pair
                "price": "9647.8",
                "time": 1591257246176
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.symbol-price-ticker",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#symbol-price-ticker",
      "name": "Symbol Price Ticker"
    },
    {
      "description": "Best price/qty on the order book for a symbol or symbols.",
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/ticker/bookTicker",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/ticker/bookTicker",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "2 for a single symbol;\n5 when the symbol parameter is omitted"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "pair": {
          "name": "pair",
          "type": "string",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "pair": {
              "name": "pair",
              "type": "string",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "lastUpdateId": "number",
                "symbol": "string",
                "pair": "string",
                "bidPrice": "NumberString",
                "bidQty": "NumberString",
                "askPrice": "NumberString",
                "askQty": "NumberString",
                "time": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "lastUpdateId": 1027024,
                "symbol": "BTCUSD_200626",
                "pair": "BTCUSD",
                "bidPrice": "9650.1",
                "bidQty": "16",
                "askPrice": "9650.3",
                "askQty": "7",
                "time": 1591257300345
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.symbol-order-book-ticker",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#symbol-order-book-ticker",
      "name": "Symbol Order Book Ticker"
    },
    {
      "description": "Query index price constituents ",
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/constituents",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/constituents",
      "hmacSHA256": false,
      "weights": {
        "IP": 2,
        "IP_text": "2"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "symbol underlying e.g BTCUSD"
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "symbol underlying e.g BTCUSD"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "time": "number",
              "constituents": [
                {
                  "exchange": "string",
                  "symbol": "string"
                },
                null,
                null,
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSD",
              "time": 1697422647853,
              "constituents": [
                {
                  "exchange": "bitstamp",
                  "symbol": "btcusd"
                },
                {
                  "exchange": "coinbase",
                  "symbol": "BTC-USD"
                },
                {
                  "exchange": "kraken",
                  "symbol": "XBT/USD"
                },
                {
                  "exchange": "binance_cross",
                  "symbol": "BTCUSDC*index(USDCUSD)"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.query-index-price-constituents",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#query-index-price-constituents",
      "name": "Query Index Price Constituents"
    },
    {
      "description": "Get present open interest of a specific symbol.",
      "securityType": "MARKET_DATA",
      "request": "GET /dapi/v1/openInterest",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/openInterest",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "pair": "string",
              "openInterest": "NumberString",
              "contractType": "string",
              "time": "number"
            }
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSD_200626",
              "pair": "BTCUSD",
              "openInterest": "15004",
              "contractType": "CURRENT_QUARTER",
              "time": 1591261042378
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.open-interest",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#open-interest",
      "name": "Open Interest"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /futures/data/delivery-price",
      "requestMethod": "GET",
      "requestEndPoint": "/futures/data/delivery-price",
      "hmacSHA256": false,
      "weights": {},
      "baseParams": {
        "pair": {
          "name": "pair",
          "type": "string",
          "required": true,
          "description": "e.g BTCUSD"
        }
      },
      "overloads": [
        {
          "params": {
            "pair": {
              "name": "pair",
              "type": "string",
              "required": true,
              "description": "e.g BTCUSD"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "deliveryPrice": "number",
                "deliveryTime": "number"
              },
              null,
              null,
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "deliveryPrice": 27101.1,
                "deliveryTime": 1695945600000
              },
              {
                "deliveryPrice": 30729.4,
                "deliveryTime": 1688083200000
              },
              {
                "deliveryPrice": 27823.7,
                "deliveryTime": 1680220800000
              },
              {
                "deliveryPrice": 44094.7,
                "deliveryTime": 1648166400000
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.quarterly-contract-settlement-price",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#quarterly-contract-settlement-price",
      "name": "Quarterly Contract Settlement Price"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /futures/data/openInterestHist",
      "requestMethod": "GET",
      "requestEndPoint": "/futures/data/openInterestHist",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "pair": {
          "name": "pair",
          "type": "string",
          "required": true,
          "description": "BTCUSD"
        },
        "contractType": {
          "name": "contractType",
          "type": "\"ALL\"|\"CURRENT_QUARTER\"|\"NEXT_QUARTER\"|\"PERPETUAL\"",
          "required": true,
          "description": "ALL, CURRENT_QUARTER, NEXT_QUARTER, PERPETUAL"
        },
        "period": {
          "name": "period",
          "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
          "required": true,
          "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "Default 30,Max 500"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "pair": {
              "name": "pair",
              "type": "string",
              "required": true,
              "description": "BTCUSD"
            },
            "contractType": {
              "name": "contractType",
              "type": "\"ALL\"|\"CURRENT_QUARTER\"|\"NEXT_QUARTER\"|\"PERPETUAL\"",
              "required": true,
              "description": "ALL, CURRENT_QUARTER, NEXT_QUARTER, PERPETUAL"
            },
            "period": {
              "name": "period",
              "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
              "required": true,
              "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "Default 30,Max 500"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "pair": "string",
                "contractType": "string",
                "sumOpenInterest": "NumberString", //unit: cont
                "sumOpenInterestValue": "NumberString", //unit: base asset
                "timestamp": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "pair": "BTCUSD",
                "contractType": "CURRENT_QUARTER",
                "sumOpenInterest": "20403", //unit: cont
                "sumOpenInterestValue": "176196512.23400000", //unit: base asset
                "timestamp": 1591261042378
              },
              {
                "pair": "BTCUSD",
                "contractType": "CURRENT_QUARTER",
                "sumOpenInterest": "20401",
                "sumOpenInterestValue": "176178704.98700000",
                "timestamp": 1583128200000
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.open-interest-statistics",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#open-interest-statistics",
      "name": "Open Interest Statistics"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /futures/data/topLongShortAccountRatio",
      "requestMethod": "GET",
      "requestEndPoint": "/futures/data/topLongShortAccountRatio",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "pair": {
          "name": "pair",
          "type": "string",
          "required": true,
          "description": "BTCUSD"
        },
        "period": {
          "name": "period",
          "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
          "required": true,
          "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "Default 30,Max 500"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "pair": {
              "name": "pair",
              "type": "string",
              "required": true,
              "description": "BTCUSD"
            },
            "period": {
              "name": "period",
              "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
              "required": true,
              "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "Default 30,Max 500"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "pair": "string",
                "longShortRatio": "NumberString",
                "longAccount": "NumberString", //64.42%
                "shortAccount": "NumberString", //35.58%
                "timestamp": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "pair": "BTCUSD",
                "longShortRatio": "1.8105",
                "longAccount": "0.6442", //64.42%
                "shortAccount": "0.3558", //35.58%
                "timestamp": 1591261042378
              },
              {
                "pair": "BTCUSD",
                "longShortRatio": "1.1110",
                "longAccount": "0.5263",
                "shortAccount": "0.4737",
                "timestamp": 1592870400000
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.top-trader-long-short-ratio-accounts",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#top-trader-long-short-ratio-accounts",
      "name": "Top Trader Long/Short Ratio (Accounts)"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /futures/data/topLongShortPositionRatio",
      "requestMethod": "GET",
      "requestEndPoint": "/futures/data/topLongShortPositionRatio",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "pair": {
          "name": "pair",
          "type": "string",
          "required": true,
          "description": "BTCUSD"
        },
        "period": {
          "name": "period",
          "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
          "required": true,
          "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "Default 30,Max 500"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "pair": {
              "name": "pair",
              "type": "string",
              "required": true,
              "description": "BTCUSD"
            },
            "period": {
              "name": "period",
              "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
              "required": true,
              "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "Default 30,Max 500"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "pair": "string",
                "longShortRatio": "NumberString",
                "longPosition": "NumberString", //64.42%
                "shortPosition": "NumberString", //44.04%
                "timestamp": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "pair": "BTCUSD",
                "longShortRatio": "0.7869",
                "longPosition": "0.6442", //64.42%
                "shortPosition": "0.4404", //44.04%
                "timestamp": 1592870400000
              },
              {
                "pair": "BTCUSD",
                "longShortRatio": "1.1231",
                "longPosition": "0.2363",
                "shortPosition": "0.4537",
                "timestamp": 1592956800000
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.top-trader-long-short-ratio-positions",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#top-trader-long-short-ratio-positions",
      "name": "Top Trader Long/Short Ratio (Positions)"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /futures/data/globalLongShortAccountRatio",
      "requestMethod": "GET",
      "requestEndPoint": "/futures/data/globalLongShortAccountRatio",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "pair": {
          "name": "pair",
          "type": "string",
          "required": true,
          "description": "BTCUSD"
        },
        "period": {
          "name": "period",
          "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
          "required": true,
          "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "Default 30,Max 500"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "pair": {
              "name": "pair",
              "type": "string",
              "required": true,
              "description": "BTCUSD"
            },
            "period": {
              "name": "period",
              "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
              "required": true,
              "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "Default 30,Max 500"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "pair": "string",
                "longShortRatio": "NumberString",
                "longAccount": "NumberString", //66.22%
                "shortAccount": "NumberString", //33.78%
                "timestamp": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "pair": "BTCUSD",
                "longShortRatio": "0.1960",
                "longAccount": "0.6622", //66.22%
                "shortAccount": "0.3378", //33.78%
                "timestamp": 1583139600000
              },
              {
                "pair": "BTCUSD",
                "longShortRatio": "1.9559",
                "longAccount": "0.6617",
                "shortAccount": "0.3382",
                "timestamp": 1583139900000
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.long-short-ratio",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#long-short-ratio",
      "name": "Long/Short Ratio"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /futures/data/takerBuySellVol",
      "requestMethod": "GET",
      "requestEndPoint": "/futures/data/takerBuySellVol",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "pair": {
          "name": "pair",
          "type": "string",
          "required": true,
          "description": "BTCUSD"
        },
        "contractType": {
          "name": "contractType",
          "type": "\"ALL\"|\"CURRENT_QUARTER\"|\"NEXT_QUARTER\"|\"PERPETUAL\"",
          "required": true,
          "description": "ALL, CURRENT_QUARTER, NEXT_QUARTER, PERPETUAL"
        },
        "period": {
          "name": "period",
          "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
          "required": true,
          "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "Default 30,Max 500"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "pair": {
              "name": "pair",
              "type": "string",
              "required": true,
              "description": "BTCUSD"
            },
            "contractType": {
              "name": "contractType",
              "type": "\"ALL\"|\"CURRENT_QUARTER\"|\"NEXT_QUARTER\"|\"PERPETUAL\"",
              "required": true,
              "description": "ALL, CURRENT_QUARTER, NEXT_QUARTER, PERPETUAL"
            },
            "period": {
              "name": "period",
              "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
              "required": true,
              "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "Default 30,Max 500"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "pair": "string",
                "contractType": "string",
                "takerBuyVol": "NumberString", //unit: cont
                "takerSellVol": "NumberString", //unit: cont
                "takerBuyVolValue": "NumberString", //unit: base asset
                "takerSellVolValue": "NumberString", //unit: base asset
                "timestamp": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "pair": "BTCUSD",
                "contractType": "CURRENT_QUARTER",
                "takerBuyVol": "387", //unit: cont
                "takerSellVol": "248", //unit: cont
                "takerBuyVolValue": "2342.1220", //unit: base asset
                "takerSellVolValue": "4213.9800", //unit: base asset
                "timestamp": 1591261042378
              },
              {
                "pair": "BTCUSD",
                "contractType": "CURRENT_QUARTER",
                "takerBuyVol": "234", //unit: cont
                "takerSellVol": "121", //unit: cont
                "takerBuyVolValue": "4563.1320", //unit: base asset
                "takerSellVolValue": "3313.3940", //unit: base asset
                "timestamp": 1585615200000
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.taker-buy-sell-volume",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#taker-buy-sell-volume",
      "name": "Taker Buy/Sell Volume"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /futures/data/basis",
      "requestMethod": "GET",
      "requestEndPoint": "/futures/data/basis",
      "hmacSHA256": false,
      "weights": {},
      "baseParams": {
        "pair": {
          "name": "pair",
          "type": "string",
          "required": true,
          "description": "BTCUSD"
        },
        "contractType": {
          "name": "contractType",
          "type": "\"CURRENT_QUARTER\"|\"NEXT_QUARTER\"|\"PERPETUAL\"",
          "required": true,
          "description": "CURRENT_QUARTER, NEXT_QUARTER, PERPETUAL"
        },
        "period": {
          "name": "period",
          "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
          "required": true,
          "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
        },
        "limit": {
          "name": "limit",
          "type": "LONG",
          "required": false,
          "description": "Default 30,Max 500"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "pair": {
              "name": "pair",
              "type": "string",
              "required": true,
              "description": "BTCUSD"
            },
            "contractType": {
              "name": "contractType",
              "type": "\"CURRENT_QUARTER\"|\"NEXT_QUARTER\"|\"PERPETUAL\"",
              "required": true,
              "description": "CURRENT_QUARTER, NEXT_QUARTER, PERPETUAL"
            },
            "period": {
              "name": "period",
              "type": "\"5m\"|\"15m\"|\"30m\"|\"1h\"|\"2h\"|\"4h\"|\"6h\"|\"12h\"|\"1d\"",
              "required": true,
              "description": "\"5m\",\"15m\",\"30m\",\"1h\",\"2h\",\"4h\",\"6h\",\"12h\",\"1d\""
            },
            "limit": {
              "name": "limit",
              "type": "LONG",
              "required": false,
              "description": "Default 30,Max 500"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "indexPrice": "NumberString",
                "contractType": "string",
                "basisRate": "NumberString",
                "futuresPrice": "NumberString",
                "annualizedBasisRate": "NumberString",
                "basis": "NumberString",
                "pair": "string",
                "timestamp": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "indexPrice": "29269.93972727",
                "contractType": "CURRENT_QUARTER",
                "basisRate": "0.0024",
                "futuresPrice": "29341.3",
                "annualizedBasisRate": "0.0283",
                "basis": "71.36027273",
                "pair": "BTCUSD",
                "timestamp": 1653381600000
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.basis",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#basis",
      "name": "Basis"
    },
    {
      "securityType": "TRADE",
      "request": "POST /dapi/v1/positionSide/dual",
      "requestMethod": "POST",
      "requestEndPoint": "/dapi/v1/positionSide/dual",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "dualSidePosition": {
          "name": "dualSidePosition",
          "type": "string",
          "required": true,
          "description": "\"true\": Hedge Mode; \"false\": One-way Mode"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "dualSidePosition": {
              "name": "dualSidePosition",
              "type": "string",
              "required": true,
              "description": "\"true\": Hedge Mode; \"false\": One-way Mode"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "code": 200,
              "msg": "success"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.change-position-mode-trade",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#change-position-mode-trade",
      "name": "Change Position Mode(TRADE)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/positionSide/dual",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/positionSide/dual",
      "hmacSHA256": true,
      "weights": {
        "IP": 30,
        "IP_text": "30"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "dualSidePosition": "boolean" // "true": Hedge Mode; "false": One-way Mode
            }
          ],
          "responseExamples": [
            {
              "dualSidePosition": true // "true": Hedge Mode; "false": One-way Mode
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-current-position-mode-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#get-current-position-mode-user_data",
      "name": "Get Current Position Mode(USER_DATA)"
    },
    {
      "description": "Send in a new order.",
      "securityType": "TRADE",
      "request": "POST /dapi/v1/order",
      "requestMethod": "POST",
      "requestEndPoint": "/dapi/v1/order",
      "hmacSHA256": false,
      "weights": {
        "IP": 0,
        "IP_text": "0"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": ""
        },
        "positionSide": {
          "name": "positionSide",
          "type": "PositionSide",
          "required": false,
          "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode."
        },
        "type": {
          "name": "type",
          "type": "OrderType",
          "required": true,
          "description": ""
        },
        "timeInForce": {
          "name": "timeInForce",
          "type": "TimeInForce",
          "required": false,
          "description": ""
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": false,
          "description": "quantity measured by contract number, Cannot be sent with closePosition=true"
        },
        "reduceOnly": {
          "name": "reduceOnly",
          "type": "\"true\"|\"false\"",
          "required": false,
          "description": "\"true\" or \"false\". default \"false\". Cannot be sent in Hedge Mode; cannot be sent with closePosition=true(Close-All)"
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "newClientOrderId": {
          "name": "newClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: ^[\\.A-Z\\:/a-z0-9_-]{1,36}$"
        },
        "stopPrice": {
          "name": "stopPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
        },
        "closePosition": {
          "name": "closePosition",
          "type": "string",
          "required": false,
          "description": "true, false；Close-All,used with STOP_MARKET or TAKE_PROFIT_MARKET."
        },
        "activationPrice": {
          "name": "activationPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with TRAILING_STOP_MARKET orders, default as the latest price(supporting different workingType)"
        },
        "callbackRate": {
          "name": "callbackRate",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with TRAILING_STOP_MARKET orders, min 0.1, max 10 where 1 for 1%"
        },
        "workingType": {
          "name": "workingType",
          "type": "WorkingType",
          "required": false,
          "description": "stopPrice triggered by: \"MARK_PRICE\", \"CONTRACT_PRICE\". Default \"CONTRACT_PRICE\""
        },
        "priceProtect": {
          "name": "priceProtect",
          "type": "\"TRUE\"|\"FALSE\"",
          "required": false,
          "description": "\"TRUE\" or \"FALSE\", default \"FALSE\". Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "OrderResponseType",
          "required": false,
          "description": "\"ACK\", \"RESULT\", default \"ACK\""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": ""
            },
            "positionSide": {
              "name": "positionSide",
              "type": "PositionSide",
              "required": false,
              "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode."
            },
            "type": {
              "name": "type",
              "type": "OrderType",
              "required": true,
              "description": ""
            },
            "timeInForce": {
              "name": "timeInForce",
              "type": "TimeInForce",
              "required": false,
              "description": ""
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": false,
              "description": "quantity measured by contract number, Cannot be sent with closePosition=true"
            },
            "reduceOnly": {
              "name": "reduceOnly",
              "type": "\"true\"|\"false\"",
              "required": false,
              "description": "\"true\" or \"false\". default \"false\". Cannot be sent in Hedge Mode; cannot be sent with closePosition=true(Close-All)"
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "newClientOrderId": {
              "name": "newClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: ^[\\.A-Z\\:/a-z0-9_-]{1,36}$"
            },
            "stopPrice": {
              "name": "stopPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
            },
            "closePosition": {
              "name": "closePosition",
              "type": "string",
              "required": false,
              "description": "true, false；Close-All,used with STOP_MARKET or TAKE_PROFIT_MARKET."
            },
            "activationPrice": {
              "name": "activationPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with TRAILING_STOP_MARKET orders, default as the latest price(supporting different workingType)"
            },
            "callbackRate": {
              "name": "callbackRate",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with TRAILING_STOP_MARKET orders, min 0.1, max 10 where 1 for 1%"
            },
            "workingType": {
              "name": "workingType",
              "type": "WorkingType",
              "required": false,
              "description": "stopPrice triggered by: \"MARK_PRICE\", \"CONTRACT_PRICE\". Default \"CONTRACT_PRICE\""
            },
            "priceProtect": {
              "name": "priceProtect",
              "type": "\"TRUE\"|\"FALSE\"",
              "required": false,
              "description": "\"TRUE\" or \"FALSE\", default \"FALSE\". Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "OrderResponseType",
              "required": false,
              "description": "\"ACK\", \"RESULT\", default \"ACK\""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "clientOrderId": "string",
              "cumQty": "NumberString",
              "cumBase": "NumberString",
              "executedQty": "NumberString",
              "orderId": "number",
              "avgPrice": "NumberString",
              "origQty": "NumberString",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "status": "string",
              "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
              "closePosition": "boolean", // if Close-All
              "symbol": "string",
              "pair": "string",
              "timeInForce": "TimeInForce",
              "type": "string",
              "origType": "string",
              "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
              "updateTime": "number",
              "workingType": "WorkingType",
              "priceProtect": "boolean" // if conditional order trigger is protected
            }
          ],
          "responseExamples": [
            {
              "clientOrderId": "testOrder",
              "cumQty": "0",
              "cumBase": "0",
              "executedQty": "0",
              "orderId": 22542179,
              "avgPrice": "0.0",
              "origQty": "10",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "status": "NEW",
              "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
              "closePosition": false, // if Close-All
              "symbol": "BTCUSD_200925",
              "pair": "BTCUSD",
              "timeInForce": "GTC",
              "type": "TRAILING_STOP_MARKET",
              "origType": "TRAILING_STOP_MARKET",
              "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
              "updateTime": 1566818724722,
              "workingType": "CONTRACT_PRICE",
              "priceProtect": false // if conditional order trigger is protected
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.new-order-trade",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#new-order-trade",
      "name": "New Order  (TRADE)"
    },
    {
      "description": "Order modify function, currently only LIMIT order modification is supported, modified orders will be reordered in the match queue",
      "securityType": "TRADE",
      "request": "PUT /dapi/v1/order",
      "requestMethod": "PUT",
      "requestEndPoint": "/dapi/v1/order",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "side": {
          "name": "side",
          "type": "\"SELL\"|\"BUY\"",
          "required": true,
          "description": "SELL, BUY"
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": false,
          "description": "Order quantity, cannot be sent with closePosition=true"
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "side": {
              "name": "side",
              "type": "\"SELL\"|\"BUY\"",
              "required": true,
              "description": "SELL, BUY"
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": false,
              "description": "Order quantity, cannot be sent with closePosition=true"
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderId": "number",
              "symbol": "string",
              "pair": "string",
              "status": "string",
              "clientOrderId": "string",
              "price": "NumberString",
              "avgPrice": "NumberString",
              "origQty": "NumberString",
              "executedQty": "NumberString",
              "cumQty": "NumberString",
              "cumBase": "NumberString",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "reduceOnly": "boolean",
              "closePosition": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "stopPrice": "NumberString",
              "workingType": "WorkingType",
              "priceProtect": "boolean",
              "origType": "string",
              "updateTime": "number"
            }
          ],
          "responseExamples": [
            {
              "orderId": 20072994037,
              "symbol": "BTCUSD_PERP",
              "pair": "BTCUSD",
              "status": "NEW",
              "clientOrderId": "LJ9R4QZDihCaS8UAOOLpgW",
              "price": "30005",
              "avgPrice": "0.0",
              "origQty": "1",
              "executedQty": "0",
              "cumQty": "0",
              "cumBase": "0",
              "timeInForce": "GTC",
              "type": "LIMIT",
              "reduceOnly": false,
              "closePosition": false,
              "side": "BUY",
              "positionSide": "LONG",
              "stopPrice": "0",
              "workingType": "CONTRACT_PRICE",
              "priceProtect": false,
              "origType": "LIMIT",
              "updateTime": 1629182711600
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.modify-order-trade",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#modify-order-trade",
      "name": "Modify Order (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /dapi/v1/batchOrders",
      "requestMethod": "POST",
      "requestEndPoint": "/dapi/v1/batchOrders",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "batchOrders": {
          "name": "batchOrders",
          "type": {
            "arrayItemType": {
              "structItems": [
                {
                  "name": "symbol",
                  "type": "string",
                  "required": true,
                  "description": ""
                },
                {
                  "name": "side",
                  "type": "OrderSide",
                  "required": true,
                  "description": ""
                },
                {
                  "name": "positionSide",
                  "type": "PositionSide",
                  "required": false,
                  "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent with Hedge Mode."
                },
                {
                  "name": "type",
                  "type": "OrderType",
                  "required": true,
                  "description": ""
                },
                {
                  "name": "timeInForce",
                  "type": "TimeInForce",
                  "required": false,
                  "description": ""
                },
                {
                  "name": "quantity",
                  "type": "DECIMAL",
                  "required": true,
                  "description": ""
                },
                {
                  "name": "reduceOnly",
                  "type": "\"true\"|\"false\"",
                  "required": false,
                  "description": "\"true\" or \"false\". default \"false\"."
                },
                {
                  "name": "price",
                  "type": "DECIMAL",
                  "required": false,
                  "description": ""
                },
                {
                  "name": "newClientOrderId",
                  "type": "string",
                  "required": false,
                  "description": "A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: ^[\\.A-Z\\:/a-z0-9_-]{1,36}$"
                },
                {
                  "name": "stopPrice",
                  "type": "DECIMAL",
                  "required": false,
                  "description": "Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
                },
                {
                  "name": "activationPrice",
                  "type": "DECIMAL",
                  "required": false,
                  "description": "Used with TRAILING_STOP_MARKET orders, default as the latest price(supporting different workingType)"
                },
                {
                  "name": "callbackRate",
                  "type": "DECIMAL",
                  "required": false,
                  "description": "Used with TRAILING_STOP_MARKET orders, min 0.1, max 4 where 1 for 1%"
                },
                {
                  "name": "workingType",
                  "type": "WorkingType",
                  "required": false,
                  "description": "stopPrice triggered by: \"MARK_PRICE\", \"CONTRACT_PRICE\". Default \"CONTRACT_PRICE\""
                },
                {
                  "name": "priceProtect",
                  "type": "\"TRUE\"|\"FALSE\"",
                  "required": false,
                  "description": "\"TRUE\" or \"FALSE\", default \"FALSE\". Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
                },
                {
                  "name": "newOrderRespType",
                  "type": "OrderResponseType",
                  "required": false,
                  "description": "\"ACK\", \"RESULT\", default \"ACK\""
                }
              ]
            }
          },
          "required": true,
          "description": "order list. Max 5 orders"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "batchOrders": {
              "name": "batchOrders",
              "type": {
                "arrayItemType": {
                  "structItems": [
                    {
                      "name": "symbol",
                      "type": "string",
                      "required": true,
                      "description": ""
                    },
                    {
                      "name": "side",
                      "type": "OrderSide",
                      "required": true,
                      "description": ""
                    },
                    {
                      "name": "positionSide",
                      "type": "PositionSide",
                      "required": false,
                      "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent with Hedge Mode."
                    },
                    {
                      "name": "type",
                      "type": "OrderType",
                      "required": true,
                      "description": ""
                    },
                    {
                      "name": "timeInForce",
                      "type": "TimeInForce",
                      "required": false,
                      "description": ""
                    },
                    {
                      "name": "quantity",
                      "type": "DECIMAL",
                      "required": true,
                      "description": ""
                    },
                    {
                      "name": "reduceOnly",
                      "type": "\"true\"|\"false\"",
                      "required": false,
                      "description": "\"true\" or \"false\". default \"false\"."
                    },
                    {
                      "name": "price",
                      "type": "DECIMAL",
                      "required": false,
                      "description": ""
                    },
                    {
                      "name": "newClientOrderId",
                      "type": "string",
                      "required": false,
                      "description": "A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: ^[\\.A-Z\\:/a-z0-9_-]{1,36}$"
                    },
                    {
                      "name": "stopPrice",
                      "type": "DECIMAL",
                      "required": false,
                      "description": "Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
                    },
                    {
                      "name": "activationPrice",
                      "type": "DECIMAL",
                      "required": false,
                      "description": "Used with TRAILING_STOP_MARKET orders, default as the latest price(supporting different workingType)"
                    },
                    {
                      "name": "callbackRate",
                      "type": "DECIMAL",
                      "required": false,
                      "description": "Used with TRAILING_STOP_MARKET orders, min 0.1, max 4 where 1 for 1%"
                    },
                    {
                      "name": "workingType",
                      "type": "WorkingType",
                      "required": false,
                      "description": "stopPrice triggered by: \"MARK_PRICE\", \"CONTRACT_PRICE\". Default \"CONTRACT_PRICE\""
                    },
                    {
                      "name": "priceProtect",
                      "type": "\"TRUE\"|\"FALSE\"",
                      "required": false,
                      "description": "\"TRUE\" or \"FALSE\", default \"FALSE\". Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
                    },
                    {
                      "name": "newOrderRespType",
                      "type": "OrderResponseType",
                      "required": false,
                      "description": "\"ACK\", \"RESULT\", default \"ACK\""
                    }
                  ]
                }
              },
              "required": true,
              "description": "order list. Max 5 orders"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "clientOrderId": "string",
                "cumQty": "NumberString",
                "cumBase": "NumberString",
                "executedQty": "NumberString",
                "orderId": "number",
                "avgPrice": "NumberString",
                "origQty": "NumberString",
                "price": "NumberString",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "status": "string",
                "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
                "symbol": "string",
                "pair": "string",
                "timeInForce": "TimeInForce",
                "type": "string",
                "origType": "string",
                "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
                "updateTime": "number",
                "workingType": "WorkingType",
                "priceProtect": "boolean" // if conditional order trigger is protected
              },
              {
                "code": "number",
                "msg": "string"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "clientOrderId": "testOrder",
                "cumQty": "0",
                "cumBase": "0",
                "executedQty": "0",
                "orderId": 22542179,
                "avgPrice": "0.0",
                "origQty": "10",
                "price": "0",
                "reduceOnly": false,
                "side": "BUY",
                "positionSide": "SHORT",
                "status": "NEW",
                "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
                "symbol": "BTCUSD_200925",
                "pair": "BTCUSD",
                "timeInForce": "GTC",
                "type": "TRAILING_STOP_MARKET",
                "origType": "TRAILING_STOP_MARKET",
                "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
                "updateTime": 1566818724722,
                "workingType": "CONTRACT_PRICE",
                "priceProtect": false // if conditional order trigger is protected
              },
              {
                "code": -2022,
                "msg": "ReduceOnly Order is rejected."
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.place-multiple-orders-trade",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#place-multiple-orders-trade",
      "name": "Place Multiple Orders  (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "PUT /dapi/v1/batchOrders",
      "requestMethod": "PUT",
      "requestEndPoint": "/dapi/v1/batchOrders",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "batchOrders": {
          "name": "batchOrders",
          "type": {
            "arrayItemType": {
              "structItems": [
                {
                  "name": "orderId",
                  "type": "LONG",
                  "required": false,
                  "description": ""
                },
                {
                  "name": "origClientOrderId",
                  "type": "string",
                  "required": false,
                  "description": ""
                },
                {
                  "name": "symbol",
                  "type": "string",
                  "required": true,
                  "description": ""
                },
                {
                  "name": "side",
                  "type": "\"SELL\"|\"BUY\"",
                  "required": true,
                  "description": "SELL, BUY"
                },
                {
                  "name": "quantity",
                  "type": "DECIMAL",
                  "required": false,
                  "description": "Order quantity, cannot be sent with closePosition=true"
                },
                {
                  "name": "price",
                  "type": "DECIMAL",
                  "required": false,
                  "description": ""
                },
                {
                  "name": "recvWindow",
                  "type": "LONG",
                  "required": false,
                  "description": ""
                },
                {
                  "name": "timestamp",
                  "type": "LONG",
                  "required": true,
                  "description": ""
                }
              ]
            }
          },
          "required": true,
          "description": "order list. Max 5 orders"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "batchOrders": {
              "name": "batchOrders",
              "type": {
                "arrayItemType": {
                  "structItems": [
                    {
                      "name": "orderId",
                      "type": "LONG",
                      "required": false,
                      "description": ""
                    },
                    {
                      "name": "origClientOrderId",
                      "type": "string",
                      "required": false,
                      "description": ""
                    },
                    {
                      "name": "symbol",
                      "type": "string",
                      "required": true,
                      "description": ""
                    },
                    {
                      "name": "side",
                      "type": "\"SELL\"|\"BUY\"",
                      "required": true,
                      "description": "SELL, BUY"
                    },
                    {
                      "name": "quantity",
                      "type": "DECIMAL",
                      "required": false,
                      "description": "Order quantity, cannot be sent with closePosition=true"
                    },
                    {
                      "name": "price",
                      "type": "DECIMAL",
                      "required": false,
                      "description": ""
                    },
                    {
                      "name": "recvWindow",
                      "type": "LONG",
                      "required": false,
                      "description": ""
                    },
                    {
                      "name": "timestamp",
                      "type": "LONG",
                      "required": true,
                      "description": ""
                    }
                  ]
                }
              },
              "required": true,
              "description": "order list. Max 5 orders"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "orderId": "number",
                "symbol": "string",
                "pair": "string",
                "status": "string",
                "clientOrderId": "string",
                "price": "NumberString",
                "avgPrice": "NumberString",
                "origQty": "NumberString",
                "executedQty": "NumberString",
                "cumQty": "NumberString",
                "cumBase": "NumberString",
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "reduceOnly": "boolean",
                "closePosition": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "stopPrice": "NumberString",
                "workingType": "WorkingType",
                "priceProtect": "boolean",
                "origType": "string",
                "updateTime": "number"
              },
              {
                "code": "number",
                "msg": "string"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "orderId": 20072994037,
                "symbol": "BTCUSD_PERP",
                "pair": "BTCUSD",
                "status": "NEW",
                "clientOrderId": "LJ9R4QZDihCaS8UAOOLpgW",
                "price": "30005",
                "avgPrice": "0.0",
                "origQty": "1",
                "executedQty": "0",
                "cumQty": "0",
                "cumBase": "0",
                "timeInForce": "GTC",
                "type": "LIMIT",
                "reduceOnly": false,
                "closePosition": false,
                "side": "BUY",
                "positionSide": "LONG",
                "stopPrice": "0",
                "workingType": "CONTRACT_PRICE",
                "priceProtect": false,
                "origType": "LIMIT",
                "updateTime": 1629182711600
              },
              {
                "code": -2022,
                "msg": "ReduceOnly Order is rejected."
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.modify-multiple-orders-trade",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#modify-multiple-orders-trade",
      "name": "Modify Multiple Orders (TRADE)"
    },
    {
      "description": "Get order modification history",
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/orderAmendment",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/orderAmendment",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get modification history from INCLUSIVE"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get modification history until INCLUSIVE"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 50; max 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get modification history from INCLUSIVE"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get modification history until INCLUSIVE"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 50; max 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "amendmentId": "number", // Order modification ID
                "symbol": "string",
                "pair": "string",
                "orderId": "number",
                "clientOrderId": "string",
                "time": "number", // Order modification time
                "amendment": {
                  "price": {
                    "before": "NumberString",
                    "after": "NumberString"
                  },
                  "origQty": {
                    "before": "NumberString",
                    "after": "NumberString"
                  },
                  "count": "number" // Order modification count, representing the number of times the order has been modified
                }
              },
              null,
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "amendmentId": 5363, // Order modification ID
                "symbol": "BTCUSD_PERP",
                "pair": "BTCUSD",
                "orderId": 20072994037,
                "clientOrderId": "LJ9R4QZDihCaS8UAOOLpgW",
                "time": 1629184560899, // Order modification time
                "amendment": {
                  "price": {
                    "before": "30004",
                    "after": "30003.2"
                  },
                  "origQty": {
                    "before": "1",
                    "after": "1"
                  },
                  "count": 3 // Order modification count, representing the number of times the order has been modified
                }
              },
              {
                "amendmentId": 5361,
                "symbol": "BTCUSD_PERP",
                "pair": "BTCUSD",
                "orderId": 20072994037,
                "clientOrderId": "LJ9R4QZDihCaS8UAOOLpgW",
                "time": 1629184533946,
                "amendment": {
                  "price": {
                    "before": "30005",
                    "after": "30004"
                  },
                  "origQty": {
                    "before": "1",
                    "after": "1"
                  },
                  "count": 2
                }
              },
              {
                "amendmentId": 5325,
                "symbol": "BTCUSD_PERP",
                "pair": "BTCUSD",
                "orderId": 20072994037,
                "clientOrderId": "LJ9R4QZDihCaS8UAOOLpgW",
                "time": 1629182711787,
                "amendment": {
                  "price": {
                    "before": "30002",
                    "after": "30005"
                  },
                  "origQty": {
                    "before": "1",
                    "after": "1"
                  },
                  "count": 1
                }
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-order-modify-history-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#get-order-modify-history-user_data",
      "name": "Get Order Modify History (USER_DATA)"
    },
    {
      "description": "Check an order's status.",
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/order",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/order",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "avgPrice": "NumberString",
              "clientOrderId": "string",
              "cumBase": "NumberString",
              "executedQty": "NumberString",
              "orderId": "number",
              "origQty": "NumberString",
              "origType": "string",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "status": "string",
              "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
              "closePosition": "boolean", // if Close-All
              "symbol": "string",
              "pair": "string",
              "time": "number", // order time
              "timeInForce": "TimeInForce",
              "type": "string",
              "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
              "updateTime": "number", // update time
              "workingType": "WorkingType",
              "priceProtect": "boolean" // if conditional order trigger is protected
            }
          ],
          "responseExamples": [
            {
              "avgPrice": "0.0",
              "clientOrderId": "abc",
              "cumBase": "0",
              "executedQty": "0",
              "orderId": 1917641,
              "origQty": "0.40",
              "origType": "TRAILING_STOP_MARKET",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "status": "NEW",
              "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
              "closePosition": false, // if Close-All
              "symbol": "BTCUSD_200925",
              "pair": "BTCUSD",
              "time": 1579276756075, // order time
              "timeInForce": "GTC",
              "type": "TRAILING_STOP_MARKET",
              "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
              "updateTime": 1579276756075, // update time
              "workingType": "CONTRACT_PRICE",
              "priceProtect": false // if conditional order trigger is protected
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.query-order-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#query-order-user_data",
      "name": "Query Order (USER_DATA)"
    },
    {
      "description": "Cancel an active order.",
      "securityType": "TRADE",
      "request": "DELETE /dapi/v1/order",
      "requestMethod": "DELETE",
      "requestEndPoint": "/dapi/v1/order",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "avgPrice": "NumberString",
              "clientOrderId": "string",
              "cumQty": "NumberString",
              "cumBase": "NumberString",
              "executedQty": "NumberString",
              "orderId": "number",
              "origQty": "NumberString",
              "origType": "string",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "status": "string",
              "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
              "closePosition": "boolean", // if Close-All
              "symbol": "string",
              "pair": "string",
              "timeInForce": "TimeInForce",
              "type": "string",
              "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
              "updateTime": "number",
              "workingType": "WorkingType",
              "priceProtect": "boolean" // if conditional order trigger is protected
            }
          ],
          "responseExamples": [
            {
              "avgPrice": "0.0",
              "clientOrderId": "myOrder1",
              "cumQty": "0",
              "cumBase": "0",
              "executedQty": "0",
              "orderId": 283194212,
              "origQty": "11",
              "origType": "TRAILING_STOP_MARKET",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "status": "CANCELED",
              "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
              "closePosition": false, // if Close-All
              "symbol": "BTCUSD_200925",
              "pair": "BTCUSD",
              "timeInForce": "GTC",
              "type": "TRAILING_STOP_MARKET",
              "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
              "updateTime": 1571110484038,
              "workingType": "CONTRACT_PRICE",
              "priceProtect": false // if conditional order trigger is protected
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.cancel-order-trade",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#cancel-order-trade",
      "name": "Cancel Order (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "DELETE /dapi/v1/allOpenOrders",
      "requestMethod": "DELETE",
      "requestEndPoint": "/dapi/v1/allOpenOrders",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "code": 200,
              "msg": "The operation of cancel all open order is done."
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.cancel-all-open-orders-trade",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#cancel-all-open-orders-trade",
      "name": "Cancel All Open Orders (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "DELETE /dapi/v1/batchOrders",
      "requestMethod": "DELETE",
      "requestEndPoint": "/dapi/v1/batchOrders",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderIdList": {
          "name": "orderIdList",
          "type": "LONG[]",
          "required": false,
          "description": "max length 10  e.g. [1234567,2345678]"
        },
        "origClientOrderIdList": {
          "name": "origClientOrderIdList",
          "type": "string[]",
          "required": false,
          "description": "max length 10 e.g. [\"my_id_1\",\"my_id_2\"], encode the double quotes. No space after comma."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderIdList": {
              "name": "orderIdList",
              "type": "LONG[]",
              "required": false,
              "description": "max length 10  e.g. [1234567,2345678]"
            },
            "origClientOrderIdList": {
              "name": "origClientOrderIdList",
              "type": "string[]",
              "required": false,
              "description": "max length 10 e.g. [\"my_id_1\",\"my_id_2\"], encode the double quotes. No space after comma."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "avgPrice": "NumberString",
                "clientOrderId": "string",
                "cumQty": "NumberString",
                "cumBase": "NumberString",
                "executedQty": "NumberString",
                "orderId": "number",
                "origQty": "NumberString",
                "origType": "string",
                "price": "NumberString",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "status": "string",
                "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
                "closePosition": "boolean", // if Close-All
                "symbol": "string",
                "timeInForce": "TimeInForce",
                "type": "string",
                "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
                "workingType": "WorkingType",
                "priceProtect": "boolean", // if conditional order trigger is protected
                "updateTime": "number"
              },
              {
                "code": "number",
                "msg": "string"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "avgPrice": "0.0",
                "clientOrderId": "myOrder1",
                "cumQty": "0",
                "cumBase": "0",
                "executedQty": "0",
                "orderId": 283194212,
                "origQty": "11",
                "origType": "TRAILING_STOP_MARKET",
                "price": "0",
                "reduceOnly": false,
                "side": "BUY",
                "positionSide": "SHORT",
                "status": "CANCELED",
                "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
                "closePosition": false, // if Close-All
                "symbol": "BTCUSD_200925",
                "timeInForce": "GTC",
                "type": "TRAILING_STOP_MARKET",
                "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
                "workingType": "CONTRACT_PRICE",
                "priceProtect": false, // if conditional order trigger is protected
                "updateTime": 1571110484038
              },
              {
                "code": -2011,
                "msg": "Unknown order sent."
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.cancel-multiple-orders-trade",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#cancel-multiple-orders-trade",
      "name": "Cancel Multiple Orders (TRADE)"
    },
    {
      "description": "Cancel all open orders of the specified symbol at the end of the specified countdown.",
      "securityType": "TRADE",
      "request": "POST /dapi/v1/countdownCancelAll",
      "requestMethod": "POST",
      "requestEndPoint": "/dapi/v1/countdownCancelAll",
      "hmacSHA256": true,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "countdownTime": {
          "name": "countdownTime",
          "type": "LONG",
          "required": true,
          "description": "countdown time, 1000 for 1 second. 0 to cancel the timer"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "countdownTime": {
              "name": "countdownTime",
              "type": "LONG",
              "required": true,
              "description": "countdown time, 1000 for 1 second. 0 to cancel the timer"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "countdownTime": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSD_200925",
              "countdownTime": "100000"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.auto-cancel-all-open-orders-trade",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#auto-cancel-all-open-orders-trade",
      "name": "Auto-Cancel All Open Orders (TRADE)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/openOrder",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/openOrder",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "avgPrice": "NumberString",
              "clientOrderId": "string",
              "cumBase": "NumberString",
              "executedQty": "NumberString",
              "orderId": "number",
              "origQty": "NumberString",
              "origType": "string",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "status": "string",
              "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
              "closePosition": "boolean", // if Close-All
              "symbol": "string",
              "pair": "string",
              "time": "number", // order time
              "timeInForce": "TimeInForce",
              "type": "string",
              "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
              "updateTime": "number",
              "workingType": "WorkingType",
              "priceProtect": "boolean" // if conditional order trigger is protected
            }
          ],
          "responseExamples": [
            {
              "avgPrice": "0.0",
              "clientOrderId": "abc",
              "cumBase": "0",
              "executedQty": "0",
              "orderId": 1917641,
              "origQty": "0.40",
              "origType": "TRAILING_STOP_MARKET",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "status": "NEW",
              "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
              "closePosition": false, // if Close-All
              "symbol": "BTCUSD_200925",
              "pair": "BTCUSD",
              "time": 1579276756075, // order time
              "timeInForce": "GTC",
              "type": "TRAILING_STOP_MARKET",
              "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
              "updateTime": 1579276756075,
              "workingType": "CONTRACT_PRICE",
              "priceProtect": false // if conditional order trigger is protected
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.query-current-open-order-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#query-current-open-order-user_data",
      "name": "Query Current Open Order (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/openOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/openOrders",
      "hmacSHA256": true,
      "weights": {
        "IP_text": "1 for a single symbol;\n40 for mutltiple symbols"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "pair": {
          "name": "pair",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "pair": {
              "name": "pair",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "avgPrice": "NumberString",
                "clientOrderId": "string",
                "cumBase": "NumberString",
                "executedQty": "NumberString",
                "orderId": "number",
                "origQty": "NumberString",
                "origType": "string",
                "price": "NumberString",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "status": "string",
                "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
                "closePosition": "boolean", // if Close-All
                "symbol": "string",
                "time": "number", // order time
                "timeInForce": "TimeInForce",
                "type": "string",
                "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
                "updateTime": "number", // update time
                "workingType": "WorkingType",
                "priceProtect": "boolean" // if conditional order trigger is protected
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "avgPrice": "0.0",
                "clientOrderId": "abc",
                "cumBase": "0",
                "executedQty": "0",
                "orderId": 1917641,
                "origQty": "0.40",
                "origType": "TRAILING_STOP_MARKET",
                "price": "0",
                "reduceOnly": false,
                "side": "BUY",
                "positionSide": "SHORT",
                "status": "NEW",
                "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
                "closePosition": false, // if Close-All
                "symbol": "BTCUSD_200925",
                "time": 1579276756075, // order time
                "timeInForce": "GTC",
                "type": "TRAILING_STOP_MARKET",
                "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
                "updateTime": 1579276756075, // update time
                "workingType": "CONTRACT_PRICE",
                "priceProtect": false // if conditional order trigger is protected
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.current-all-open-orders-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#current-all-open-orders-user_data",
      "name": "Current All Open Orders (USER_DATA)"
    },
    {
      "description": "Get all account orders; active, canceled, or filled.",
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/allOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/allOrders",
      "hmacSHA256": true,
      "weights": {
        "IP_text": "20 with symbol\n40 with pair"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 50; max 100."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 50; max 100."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "avgPrice": "NumberString",
                "clientOrderId": "string",
                "cumBase": "NumberString",
                "executedQty": "NumberString",
                "orderId": "number",
                "origQty": "NumberString",
                "origType": "string",
                "price": "NumberString",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "status": "string",
                "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
                "closePosition": "boolean", // if Close-All
                "symbol": "string",
                "pair": "string",
                "time": "number", // order time
                "timeInForce": "TimeInForce",
                "type": "string",
                "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
                "updateTime": "number", // update time
                "workingType": "WorkingType",
                "priceProtect": "boolean" // if conditional order trigger is protected
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "avgPrice": "0.0",
                "clientOrderId": "abc",
                "cumBase": "0",
                "executedQty": "0",
                "orderId": 1917641,
                "origQty": "0.40",
                "origType": "TRAILING_STOP_MARKET",
                "price": "0",
                "reduceOnly": false,
                "side": "BUY",
                "positionSide": "SHORT",
                "status": "NEW",
                "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
                "closePosition": false, // if Close-All
                "symbol": "BTCUSD_200925",
                "pair": "BTCUSD",
                "time": 1579276756075, // order time
                "timeInForce": "GTC",
                "type": "TRAILING_STOP_MARKET",
                "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
                "updateTime": 1579276756075, // update time
                "workingType": "CONTRACT_PRICE",
                "priceProtect": false // if conditional order trigger is protected
              }
            ]
          ],
          "name": "",
          "isMinor": false
        },
        {
          "params": {
            "pair": {
              "name": "pair",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 50; max 100."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "avgPrice": "NumberString",
                "clientOrderId": "string",
                "cumBase": "NumberString",
                "executedQty": "NumberString",
                "orderId": "number",
                "origQty": "NumberString",
                "origType": "string",
                "price": "NumberString",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "status": "string",
                "stopPrice": "NumberString",
                "closePosition": "boolean",
                "symbol": "string",
                "pair": "string",
                "time": "number",
                "timeInForce": "TimeInForce",
                "type": "string",
                "activatePrice": "NumberString",
                "priceRate": "NumberString",
                "updateTime": "number",
                "workingType": "WorkingType",
                "priceProtect": "boolean"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "avgPrice": "0.0",
                "clientOrderId": "abc",
                "cumBase": "0",
                "executedQty": "0",
                "orderId": 1917641,
                "origQty": "0.40",
                "origType": "TRAILING_STOP_MARKET",
                "price": "0",
                "reduceOnly": false,
                "side": "BUY",
                "positionSide": "SHORT",
                "status": "NEW",
                "stopPrice": "9300",
                "closePosition": false,
                "symbol": "BTCUSD_200925",
                "pair": "BTCUSD",
                "time": 1579276756075,
                "timeInForce": "GTC",
                "type": "TRAILING_STOP_MARKET",
                "activatePrice": "9020",
                "priceRate": "0.3",
                "updateTime": 1579276756075,
                "workingType": "CONTRACT_PRICE",
                "priceProtect": false
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.all-orders-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#all-orders-user_data",
      "name": "All Orders (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/balance",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/balance",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "accountAlias": "string", // unique account code
                "asset": "string",
                "balance": "NumberString",
                "withdrawAvailable": "NumberString",
                "crossWalletBalance": "NumberString",
                "crossUnPnl": "NumberString",
                "availableBalance": "NumberString",
                "updateTime": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "accountAlias": "SgsR", // unique account code
                "asset": "BTC",
                "balance": "0.00250000",
                "withdrawAvailable": "0.00250000",
                "crossWalletBalance": "0.00241969",
                "crossUnPnl": "0.00000000",
                "availableBalance": "0.00241969",
                "updateTime": 1592468353979
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.futures-account-balance-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#futures-account-balance-user_data",
      "name": "Futures Account Balance (USER_DATA)"
    },
    {
      "description": "Get current account information.",
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/account",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/account",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "assets": [
                {
                  "asset": "string", // asset name
                  "walletBalance": "NumberString", // total wallet balance
                  "unrealizedProfit": "NumberString", // unrealized profit or loss
                  "marginBalance": "NumberString", // margin balance
                  "maintMargin": "NumberString", // maintenance margin
                  "initialMargin": "NumberString", // total intial margin required with the latest mark price
                  "positionInitialMargin": "NumberString", // positions" margin required with the latest mark price
                  "openOrderInitialMargin": "NumberString", // open orders" intial margin required with the latest mark price
                  "maxWithdrawAmount": "NumberString", // available amount for transfer out
                  "crossWalletBalance": "NumberString", // wallet balance for crossed margin
                  "crossUnPnl": "NumberString", // total unrealized profit or loss of crossed positions
                  "availableBalance": "NumberString", // available margin balance
                  "updateTime": "number" //update time
                }
              ],
              "positions": [
                {
                  "symbol": "string",
                  "positionAmt": "NumberString", // position amount
                  "initialMargin": "NumberString",
                  "maintMargin": "NumberString",
                  "unrealizedProfit": "NumberString",
                  "positionInitialMargin": "NumberString",
                  "openOrderInitialMargin": "NumberString",
                  "leverage": "NumberString",
                  "isolated": "boolean",
                  "positionSide": "PositionSide", // BOTH means that it is the position of One-way Mode
                  "entryPrice": "NumberString",
                  "breakEvenPrice": "NumberString", // break-even price
                  "maxQty": "NumberString", // maximum quantity of base asset
                  "updateTime": "number"
                },
                null,
                null
              ],
              "canDeposit": "boolean",
              "canTrade": "boolean",
              "canWithdraw": "boolean",
              "feeTier": "number",
              "updateTime": "number"
            }
          ],
          "responseExamples": [
            {
              "assets": [
                {
                  "asset": "BTC", // asset name
                  "walletBalance": "0.00241969", // total wallet balance
                  "unrealizedProfit": "0.00000000", // unrealized profit or loss
                  "marginBalance": "0.00241969", // margin balance
                  "maintMargin": "0.00000000", // maintenance margin
                  "initialMargin": "0.00000000", // total intial margin required with the latest mark price
                  "positionInitialMargin": "0.00000000", // positions" margin required with the latest mark price
                  "openOrderInitialMargin": "0.00000000", // open orders" intial margin required with the latest mark price
                  "maxWithdrawAmount": "0.00241969", // available amount for transfer out
                  "crossWalletBalance": "0.00241969", // wallet balance for crossed margin
                  "crossUnPnl": "0.00000000", // total unrealized profit or loss of crossed positions
                  "availableBalance": "0.00241969", // available margin balance
                  "updateTime": 1625474304765 //update time
                }
              ],
              "positions": [
                {
                  "symbol": "BTCUSD_201225",
                  "positionAmt": "0", // position amount
                  "initialMargin": "0",
                  "maintMargin": "0",
                  "unrealizedProfit": "0.00000000",
                  "positionInitialMargin": "0",
                  "openOrderInitialMargin": "0",
                  "leverage": "125",
                  "isolated": false,
                  "positionSide": "BOTH", // BOTH means that it is the position of One-way Mode
                  "entryPrice": "0.0",
                  "breakEvenPrice": "0.0", // break-even price
                  "maxQty": "50", // maximum quantity of base asset
                  "updateTime": 0
                },
                {
                  "symbol": "BTCUSD_201225",
                  "positionAmt": "0",
                  "initialMargin": "0",
                  "maintMargin": "0",
                  "unrealizedProfit": "0.00000000",
                  "positionInitialMargin": "0",
                  "openOrderInitialMargin": "0",
                  "leverage": "125",
                  "isolated": false,
                  "positionSide": "LONG", // LONG or SHORT means that it is the position of Hedge Mode
                  "entryPrice": "0.0",
                  "breakEvenPrice": "0.0", // break-even price
                  "maxQty": "50",
                  "updateTime": 0
                },
                {
                  "symbol": "BTCUSD_201225",
                  "positionAmt": "0",
                  "initialMargin": "0",
                  "maintMargin": "0",
                  "unrealizedProfit": "0.00000000",
                  "positionInitialMargin": "0",
                  "openOrderInitialMargin": "0",
                  "leverage": "125",
                  "isolated": false,
                  "positionSide": "SHORT", // LONG or SHORT means that it is the position of Hedge Mode
                  "entryPrice": "0.0",
                  "breakEvenPrice": "0.0", // break-even price
                  "maxQty": "50",
                  "updateTime": 1627026881327
                }
              ],
              "canDeposit": true,
              "canTrade": true,
              "canWithdraw": true,
              "feeTier": 2,
              "updateTime": 0
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.account-information-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#account-information-user_data",
      "name": "Account Information (USER_DATA)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /dapi/v1/leverage",
      "requestMethod": "POST",
      "requestEndPoint": "/dapi/v1/leverage",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "leverage": {
          "name": "leverage",
          "type": "INT",
          "required": true,
          "description": "target initial leverage: int from 1 to 125"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "leverage": {
              "name": "leverage",
              "type": "INT",
              "required": true,
              "description": "target initial leverage: int from 1 to 125"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "leverage": "number",
              "maxQty": "NumberString", // maximum quantity of base asset
              "symbol": "string"
            }
          ],
          "responseExamples": [
            {
              "leverage": 21,
              "maxQty": "1000", // maximum quantity of base asset
              "symbol": "BTCUSD_200925"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.change-initial-leverage-trade",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#change-initial-leverage-trade",
      "name": "Change Initial Leverage (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /dapi/v1/marginType",
      "requestMethod": "POST",
      "requestEndPoint": "/dapi/v1/marginType",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "marginType": {
          "name": "marginType",
          "type": "\"ISOLATED\"|\"CROSSED\"",
          "required": true,
          "description": "ISOLATED, CROSSED"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "marginType": {
              "name": "marginType",
              "type": "\"ISOLATED\"|\"CROSSED\"",
              "required": true,
              "description": "ISOLATED, CROSSED"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "code": 200,
              "msg": "success"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.change-margin-type-trade",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#change-margin-type-trade",
      "name": "Change Margin Type (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /dapi/v1/positionMargin",
      "requestMethod": "POST",
      "requestEndPoint": "/dapi/v1/positionMargin",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "positionSide": {
          "name": "positionSide",
          "type": "PositionSide",
          "required": false,
          "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent with Hedge Mode."
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "type": {
          "name": "type",
          "type": "INT",
          "required": true,
          "description": "1: Add position margin,2: Reduce position margin"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "positionSide": {
              "name": "positionSide",
              "type": "PositionSide",
              "required": false,
              "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent with Hedge Mode."
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "type": {
              "name": "type",
              "type": "INT",
              "required": true,
              "description": "1: Add position margin,2: Reduce position margin"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "amount": "number",
              "code": "number",
              "msg": "string",
              "type": "number"
            }
          ],
          "responseExamples": [
            {
              "amount": 100,
              "code": 200,
              "msg": "Successfully modify position margin.",
              "type": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.modify-isolated-position-margin-trade",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#modify-isolated-position-margin-trade",
      "name": "Modify Isolated Position Margin (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "GET /dapi/v1/positionMargin/history",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/positionMargin/history",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "type": {
          "name": "type",
          "type": "INT",
          "required": false,
          "description": "1: Add position margin,2: Reduce position margin"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default: 50"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "type": {
              "name": "type",
              "type": "INT",
              "required": false,
              "description": "1: Add position margin,2: Reduce position margin"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default: 50"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "amount": "NumberString",
                "asset": "string",
                "symbol": "string",
                "time": "number",
                "type": "number",
                "positionSide": "PositionSide"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "amount": "23.36332311",
                "asset": "BTC",
                "symbol": "BTCUSD_200925",
                "time": 1578047897183,
                "type": 1,
                "positionSide": "BOTH"
              },
              {
                "amount": "100",
                "asset": "BTC",
                "symbol": "BTCUSD_200925",
                "time": 1578047900425,
                "type": 1,
                "positionSide": "LONG"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-position-margin-change-history-trade",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#get-position-margin-change-history-trade",
      "name": "Get Position Margin Change History (TRADE)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/positionRisk",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/positionRisk",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "marginAsset": {
          "name": "marginAsset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "pair": {
          "name": "pair",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "marginAsset": {
              "name": "marginAsset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "pair": {
              "name": "pair",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "positionAmt": "NumberString",
                "entryPrice": "NumberString",
                "breakEvenPrice": "NumberString", // break-even price
                "markPrice": "NumberString",
                "unRealizedProfit": "NumberString",
                "liquidationPrice": "NumberString",
                "leverage": "NumberString",
                "maxQty": "NumberString", // maximum quantity of base asset
                "marginType": "string",
                "isolatedMargin": "NumberString",
                "isAutoAddMargin": "string",
                "positionSide": "PositionSide",
                "notionalValue": "NumberString",
                "updateTime": "number"
              },
              null,
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSD_201225",
                "positionAmt": "0",
                "entryPrice": "0.0",
                "breakEvenPrice": "0.0", // break-even price
                "markPrice": "0.00000000",
                "unRealizedProfit": "0.00000000",
                "liquidationPrice": "0",
                "leverage": "125",
                "maxQty": "50", // maximum quantity of base asset
                "marginType": "cross",
                "isolatedMargin": "0.00000000",
                "isAutoAddMargin": "false",
                "positionSide": "BOTH",
                "notionalValue": "0",
                "updateTime": 0
              },
              {
                "symbol": "BTCUSD_201225",
                "positionAmt": "1",
                "entryPrice": "11707.70000003",
                "breakEvenPrice": "11707.80000005", // break-even price
                "markPrice": "11788.66626667",
                "unRealizedProfit": "0.00005866",
                "liquidationPrice": "11667.63509587",
                "leverage": "125",
                "maxQty": "50",
                "marginType": "cross",
                "isolatedMargin": "0.00000000",
                "isAutoAddMargin": "false",
                "positionSide": "LONG",
                "notionalValue": "11788.66626667",
                "updateTime": 1627026881327
              },
              {
                "symbol": "BTCUSD_201225",
                "positionAmt": "0",
                "entryPrice": "0.0",
                "breakEvenPrice": "0.0", // break-even price
                "markPrice": "0.00000000",
                "unRealizedProfit": "0.00000000",
                "liquidationPrice": "0",
                "leverage": "125",
                "maxQty": "50",
                "marginType": "cross",
                "isolatedMargin": "0.00000000",
                "isAutoAddMargin": "false",
                "positionSide": "SHORT",
                "notionalValue": "0",
                "updateTime": 1627026881327
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.position-information-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#position-information-user_data",
      "name": "Position Information (USER_DATA)"
    },
    {
      "description": "Get trades for a specific account and symbol.",
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/userTrades",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/userTrades",
      "hmacSHA256": true,
      "weights": {
        "IP_text": "20 with symbol\n40 with pair"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "pair": {
          "name": "pair",
          "type": "string",
          "required": false,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "Trade id to fetch from. Default gets most recent trades."
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 50; max 1000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "pair": {
              "name": "pair",
              "type": "string",
              "required": false,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "Trade id to fetch from. Default gets most recent trades."
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 50; max 1000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "id": "number",
                "orderId": "number",
                "pair": "string",
                "side": "OrderSide",
                "price": "NumberString",
                "qty": "NumberString",
                "realizedPnl": "NumberString",
                "marginAsset": "string",
                "baseQty": "NumberString",
                "commission": "NumberString",
                "commissionAsset": "string",
                "time": "number",
                "positionSide": "PositionSide",
                "buyer": "boolean",
                "maker": "boolean"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSD_200626",
                "id": 6,
                "orderId": 28,
                "pair": "BTCUSD",
                "side": "SELL",
                "price": "8800",
                "qty": "1",
                "realizedPnl": "0",
                "marginAsset": "BTC",
                "baseQty": "0.01136364",
                "commission": "0.00000454",
                "commissionAsset": "BTC",
                "time": 1590743483586,
                "positionSide": "BOTH",
                "buyer": false,
                "maker": false
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.account-trade-list-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#account-trade-list-user_data",
      "name": "Account Trade List (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/income",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/income",
      "hmacSHA256": true,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "incomeType": {
          "name": "incomeType",
          "type": "string",
          "required": false,
          "description": "\"TRANSFER\",\"WELCOME_BONUS\", \"FUNDING_FEE\", \"REALIZED_PNL\", \"COMMISSION\", \"INSURANCE_CLEAR\", \"API_REBATE\" and \"DELIVERED_SETTELMENT\""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get funding from INCLUSIVE."
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get funding until INCLUSIVE."
        },
        "page": {
          "name": "page",
          "type": "INT",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 100; max 1000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "incomeType": {
              "name": "incomeType",
              "type": "string",
              "required": false,
              "description": "\"TRANSFER\",\"WELCOME_BONUS\", \"FUNDING_FEE\", \"REALIZED_PNL\", \"COMMISSION\", \"INSURANCE_CLEAR\", \"API_REBATE\" and \"DELIVERED_SETTELMENT\""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get funding from INCLUSIVE."
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get funding until INCLUSIVE."
            },
            "page": {
              "name": "page",
              "type": "INT",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 100; max 1000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string", // trade symbol, if existing
                "incomeType": "string", // income type
                "income": "NumberString", // income amount
                "asset": "string", // income asset
                "info": "string", // extra information
                "time": "number",
                "tranId": "NumberString", // transaction id
                "tradeId": "string" // trade id, if existing
              },
              {
                "symbol": "string",
                "incomeType": "string",
                "income": "NumberString",
                "asset": "string",
                "info": "string",
                "time": "number",
                "tranId": "NumberString",
                "tradeId": "NumberString"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "", // trade symbol, if existing
                "incomeType": "TRANSFER", // income type
                "income": "-0.37500000", // income amount
                "asset": "BTC", // income asset
                "info": "WITHDRAW", // extra information
                "time": 1570608000000,
                "tranId": "9689322392", // transaction id
                "tradeId": "" // trade id, if existing
              },
              {
                "symbol": "BTCUSD_200925",
                "incomeType": "COMMISSION",
                "income": "-0.01000000",
                "asset": "BTC",
                "info": "",
                "time": 1570636800000,
                "tranId": "9689322392",
                "tradeId": "2059192"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-income-history-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#get-income-history-user_data",
      "name": "Get Income History(USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/leverageBracket",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/leverageBracket",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "pair": {
          "name": "pair",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "pair": {
              "name": "pair",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "pair": "string",
                "brackets": [
                  {
                    "bracket": "number", // bracket level
                    "initialLeverage": "number", // the maximum leverage
                    "qtyCap": "number", // upper edge of base asset quantity
                    "qtylFloor": "number", // lower edge of base asset quantity
                    "maintMarginRatio": "number", // maintenance margin rate
                    "cum": "number" // Auxiliary number for quick calculation
                  }
                ]
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "pair": "BTCUSD",
                "brackets": [
                  {
                    "bracket": 1, // bracket level
                    "initialLeverage": 125, // the maximum leverage
                    "qtyCap": 50, // upper edge of base asset quantity
                    "qtylFloor": 0, // lower edge of base asset quantity
                    "maintMarginRatio": 0.004, // maintenance margin rate
                    "cum": 0 // Auxiliary number for quick calculation
                  }
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.notional-bracket-for-pair-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#notional-bracket-for-pair-user_data",
      "name": "Notional Bracket for Pair(USER_DATA)"
    },
    {
      "description": "Get the symbol's notional bracket list.",
      "securityType": "USER_DATA",
      "request": "GET /dapi/v2/leverageBracket",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v2/leverageBracket",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "notionalCoef": "number", //user symbol bracket multiplier, only appears when user's symbol bracket is adjusted
                "brackets": [
                  {
                    "bracket": "number", // bracket level
                    "initialLeverage": "number", // the maximum leverage
                    "qtyCap": "number", // upper edge of base asset quantity
                    "qtylFloor": "number", // lower edge of base asset quantity
                    "maintMarginRatio": "number", // maintenance margin rate
                    "cum": "number" // Auxiliary number for quick calculation
                  }
                ]
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSD_PERP",
                "notionalCoef": 1.5, //user symbol bracket multiplier, only appears when user's symbol bracket is adjusted
                "brackets": [
                  {
                    "bracket": 1, // bracket level
                    "initialLeverage": 125, // the maximum leverage
                    "qtyCap": 50, // upper edge of base asset quantity
                    "qtylFloor": 0, // lower edge of base asset quantity
                    "maintMarginRatio": 0.004, // maintenance margin rate
                    "cum": 0 // Auxiliary number for quick calculation
                  }
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.notional-bracket-for-symbol-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#notional-bracket-for-symbol-user_data",
      "name": "Notional Bracket for Symbol(USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/forceOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/forceOrders",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "20 with symbol, 50 without symbol"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "autoCloseType": {
          "name": "autoCloseType",
          "type": "ENUM",
          "required": false,
          "description": "\"LIQUIDATION\" for liquidation orders, \"ADL\" for ADL orders."
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 50; max 100."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "autoCloseType": {
              "name": "autoCloseType",
              "type": "ENUM",
              "required": false,
              "description": "\"LIQUIDATION\" for liquidation orders, \"ADL\" for ADL orders."
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 50; max 100."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "orderId": "number",
                "symbol": "string",
                "pair": "string",
                "status": "string",
                "clientOrderId": "string",
                "price": "NumberString",
                "avgPrice": "NumberString",
                "origQty": "NumberString",
                "executedQty": "NumberString",
                "cumBase": "NumberString",
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "reduceOnly": "boolean",
                "closePosition": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "stopPrice": "NumberString",
                "workingType": "WorkingType",
                "priceProtect": "boolean",
                "origType": "string",
                "time": "number",
                "updateTime": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "orderId": 165123080,
                "symbol": "BTCUSD_200925",
                "pair": "BTCUSD",
                "status": "FILLED",
                "clientOrderId": "autoclose-1596542005017000006",
                "price": "11326.9",
                "avgPrice": "11326.9",
                "origQty": "1",
                "executedQty": "1",
                "cumBase": "0.00882854",
                "timeInForce": "IOC",
                "type": "LIMIT",
                "reduceOnly": false,
                "closePosition": false,
                "side": "SELL",
                "positionSide": "BOTH",
                "stopPrice": "0",
                "workingType": "CONTRACT_PRICE",
                "priceProtect": false,
                "origType": "LIMIT",
                "time": 1596542005019,
                "updateTime": 1596542005050
              },
              {
                "orderId": 207251986,
                "symbol": "BTCUSD_200925",
                "pair": "BTCUSD",
                "status": "FILLED",
                "clientOrderId": "autoclose-1597307316020000006",
                "price": "11619.4",
                "avgPrice": "11661.2",
                "origQty": "1",
                "executedQty": "1",
                "cumBase": "0.00857544",
                "timeInForce": "IOC",
                "type": "LIMIT",
                "reduceOnly": false,
                "closePosition": false,
                "side": "SELL",
                "positionSide": "LONG",
                "stopPrice": "0",
                "workingType": "CONTRACT_PRICE",
                "priceProtect": false,
                "origType": "LIMIT",
                "time": 1597307316022,
                "updateTime": 1597307316035
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.user-39-s-force-orders-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#user-39-s-force-orders-user_data",
      "name": "User's Force Orders (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/adlQuantile",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/adlQuantile",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "adlQuantile": {
                  // if the positions of the symbol are crossed margined in Hedge Mode, "LONG" and "SHORT" will be returned a same quantile value, and "HEDGE" will be returned instead of "BOTH".
                  "LONG": "number",
                  "SHORT": "number",
                  "HEDGE": "number" // only a sign, ignore the value
                }
              },
              {
                "symbol": "string",
                "adlQuantile": {
                  // for positions of the symbol are in One-way Mode or isolated margined in Hedge Mode
                  "LONG": "number", // adl quantile for "LONG" position in hedge mode
                  "SHORT": "number", // adl qauntile for "SHORT" position in hedge mode
                  "BOTH": "number" // adl qunatile for position in one-way mode
                }
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSD_200925",
                "adlQuantile": {
                  // if the positions of the symbol are crossed margined in Hedge Mode, "LONG" and "SHORT" will be returned a same quantile value, and "HEDGE" will be returned instead of "BOTH".
                  "LONG": 3,
                  "SHORT": 3,
                  "HEDGE": 0 // only a sign, ignore the value
                }
              },
              {
                "symbol": "BTCUSD_201225",
                "adlQuantile": {
                  // for positions of the symbol are in One-way Mode or isolated margined in Hedge Mode
                  "LONG": 1, // adl quantile for "LONG" position in hedge mode
                  "SHORT": 2, // adl qauntile for "SHORT" position in hedge mode
                  "BOTH": 0 // adl qunatile for position in one-way mode
                }
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.position-adl-quantile-estimation-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#position-adl-quantile-estimation-user_data",
      "name": "Position ADL Quantile Estimation (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/commissionRate",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/commissionRate",
      "hmacSHA256": true,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "makerCommissionRate": "NumberString", // 0.015%
              "takerCommissionRate": "NumberString" // 0.040%
            }
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSD_PERP",
              "makerCommissionRate": "0.00015", // 0.015%
              "takerCommissionRate": "0.00040" // 0.040%
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.user-commission-rate-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#user-commission-rate-user_data",
      "name": "User Commission Rate (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/income/asyn",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/income/asyn",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": true,
          "description": "Timestamp in ms"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": true,
          "description": "Timestamp in ms"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": true,
              "description": "Timestamp in ms"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": true,
              "description": "Timestamp in ms"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "avgCostTimestampOfLast30d": "number", // Average time taken for data download in the past 30 days
              "downloadId": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "avgCostTimestampOfLast30d": 7241837, // Average time taken for data download in the past 30 days
              "downloadId": "546975389218332672"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-download-id-for-futures-transaction-history-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#get-download-id-for-futures-transaction-history-user_data",
      "name": "Get Download Id For Futures Transaction History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/income/asyn/id",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/income/asyn/id",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "downloadId": {
          "name": "downloadId",
          "type": "string",
          "required": true,
          "description": "get by download id api"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "downloadId": {
              "name": "downloadId",
              "type": "string",
              "required": true,
              "description": "get by download id api"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "",
            "(Response when server is processing)"
          ],
          "responseTypes": [
            {
              "downloadId": "NumberString",
              "status": "string", // Enum:completed,processing
              "url": "string", // The link is mapped to download id
              "notified": "boolean", // ignore
              "expirationTimestamp": "number", // The link would expire after this timestamp
              "isExpired": "null"
            },
            null
          ],
          "responseExamples": [
            {
              "downloadId": "545923594199212032",
              "status": "completed", // Enum:completed,processing
              "url": "www.binance.com", // The link is mapped to download id
              "notified": true, // ignore
              "expirationTimestamp": 1645009771000, // The link would expire after this timestamp
              "isExpired": null
            },
            {
              "downloadId": "545923594199212032",
              "status": "processing",
              "url": "",
              "notified": false,
              "expirationTimestamp": -1,
              "isExpired": null
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-futures-transaction-history-download-link-by-id-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#get-futures-transaction-history-download-link-by-id-user_data",
      "name": "Get Futures Transaction History Download Link by Id (USER_DATA)"
    },
    {
      "securityType": "USER_STREAM",
      "request": "POST /dapi/v1/listenKey",
      "requestMethod": "POST",
      "requestEndPoint": "/dapi/v1/listenKey",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "listenKey": "string"
            }
          ],
          "responseExamples": [
            {
              "listenKey": "pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "User Data Streams",
      "path": "toc.user-data-streams.start-user-data-stream-user_stream",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#start-user-data-stream-user_stream",
      "name": "Start User Data Stream (USER_STREAM)"
    },
    {
      "description": "Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. ",
      "securityType": "USER_STREAM",
      "request": "PUT /dapi/v1/listenKey",
      "requestMethod": "PUT",
      "requestEndPoint": "/dapi/v1/listenKey",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "User Data Streams",
      "path": "toc.user-data-streams.keepalive-user-data-stream-user_stream",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#keepalive-user-data-stream-user_stream",
      "name": "Keepalive User Data Stream (USER_STREAM)"
    },
    {
      "description": "Close out a user data stream.",
      "securityType": "USER_STREAM",
      "request": "DELETE /dapi/v1/listenKey",
      "requestMethod": "DELETE",
      "requestEndPoint": "/dapi/v1/listenKey",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "User Data Streams",
      "path": "toc.user-data-streams.close-user-data-stream-user_stream",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#close-user-data-stream-user_stream",
      "name": "Close User Data Stream (USER_STREAM)"
    },
    {
      "description": "Get Classic Portfolio Margin notional limit.",
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/pmExchangeInfo",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/pmExchangeInfo",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "pair": {
          "name": "pair",
          "type": "string",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "pair": {
              "name": "pair",
              "type": "string",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "notionalLimits": [ // Classic Portfolio Margin notional limit
                {
                  "symbol": "string", // Symbol
                  "pair": "string", // Pair
                  "notionalLimit": "NumberString" // Classic Portfolio Margin Notional Limit in coin
                },
                {
                  "symbol": "string",
                  "pair": "string",
                  " notionalLimit": "NumberString"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "notionalLimits": [ // Classic Portfolio Margin notional limit
                {
                  "symbol": "BTCUSD_PERP", // Symbol
                  "pair": "BTCUSD", // Pair
                  "notionalLimit": "500" // Classic Portfolio Margin Notional Limit in coin
                },
                {
                  "symbol": "BTCUSD_220624",
                  "pair": "BTCUSD",
                  " notionalLimit": "200"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Classic Portfolio Margin Endpoints",
      "path": "toc.classic-portfolio-margin-endpoints.query-classic-portfolio-margin-notional-limit-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#query-classic-portfolio-margin-notional-limit-user_data",
      "name": "Query Classic Portfolio Margin Notional Limit (USER_DATA)"
    },
    {
      "description": "Get Classic Portfolio Margin current account information.",
      "securityType": "USER_DATA",
      "request": "GET /dapi/v1/pmAccountInfo",
      "requestMethod": "GET",
      "requestEndPoint": "/dapi/v1/pmAccountInfo",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "maxWithdrawAmountUSD": "NumberString", // Classic Portfolio margin maximum virtual amount for transfer out in USD
              "asset": "string", // asset name
              "maxWithdrawAmount": "NumberString" // maximum amount for transfer out
            }
          ],
          "responseExamples": [
            {
              "maxWithdrawAmountUSD": "25347.92083245", // Classic Portfolio margin maximum virtual amount for transfer out in USD
              "asset": "BTC", // asset name
              "maxWithdrawAmount": "1.33663654" // maximum amount for transfer out
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Classic Portfolio Margin Endpoints",
      "path": "toc.classic-portfolio-margin-endpoints.classic-portfolio-margin-account-information-user_data",
      "apiType": "coin-futures",
      "ref": "https://binance-docs.github.io/apidocs/delivery/en/#classic-portfolio-margin-account-information-user_data",
      "name": "Classic Portfolio Margin Account Information (USER_DATA)"
    }
  ],
  "eapi": [
    {
      "description": "Test connectivity to the Rest API.",
      "securityType": "MARKET_DATA",
      "request": "GET /eapi/v1/ping",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/ping",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.test-connectivity",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#test-connectivity",
      "name": "Test Connectivity"
    },
    {
      "description": "Test connectivity to the Rest API and get the current server time.",
      "securityType": "MARKET_DATA",
      "request": "GET /eapi/v1/time",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/time",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "serverTime": "number"
            }
          ],
          "responseExamples": [
            {
              "serverTime": 1499827319559
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.check-server-time",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#check-server-time",
      "name": "Check Server Time"
    },
    {
      "description": "Current exchange trading rules and symbol information",
      "securityType": "MARKET_DATA",
      "request": "GET /eapi/v1/exchangeInfo",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/exchangeInfo",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "timezone": "string", // Time zone used by the server
              "serverTime": "number", // Current system time
              "optionContracts": [ // Option contract underlying asset info
                {
                  "id": "number",
                  "baseAsset": "string", // Base currency
                  "quoteAsset": "string", // Quotation asset
                  "underlying": "string", // Name of the underlying asset of the option contract
                  "settleAsset": "string" // Settlement currency
                }
              ],
              "optionAssets": [ // Option asset info
                {
                  "id": "number",
                  "name": "string" // Asset name
                }
              ],
              "optionSymbols": [ // Option trading pair info
                {
                  "contractId": "number",
                  "expiryDate": "number", // expiry time
                  "filters": [
                    {
                      "filterType": "\"PRICE_FILTER\"",
                      "minPrice": "NumberString",
                      "maxPrice": "NumberString",
                      "tickSize": "NumberString"
                    },
                    {
                      "filterType": "\"LOT_SIZE\"",
                      "minQty": "NumberString",
                      "maxQty": "NumberString",
                      "stepSize": "NumberString"
                    }
                  ],
                  "id": "number",
                  "symbol": "string", // Trading pair name
                  "side": "string", // Direction: CALL long, PUT short
                  "strikePrice": "NumberString", // Strike price
                  "underlying": "string", // Underlying asset of the contract
                  "unit": "number", // Contract unit, the quantity of the underlying asset represented by a single contract.
                  "makerFeeRate": "NumberString", // maker commission rate
                  "takerFeeRate": "NumberString", // taker commission rate
                  "minQty": "NumberString", // Minimum order quantity
                  "maxQty": "NumberString", // Maximum order quantity
                  "initialMargin": "NumberString", // Initial Magin Ratio
                  "maintenanceMargin": "NumberString", // Maintenance Margin Ratio
                  "minInitialMargin": "NumberString", // Min Initial Margin Ratio
                  "minMaintenanceMargin": "NumberString", // Min Maintenance Margin Ratio
                  "priceScale": "number", // price precision
                  "quantityScale": "number", // quantity precision
                  "quoteAsset": "string" // Quotation asset
                }
              ],
              "rateLimits": [
                {
                  "rateLimitType": "RateLimitType",
                  "interval": "RateLimitInterval",
                  "intervalNum": "number",
                  "limit": "number"
                },
                null,
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "timezone": "UTC", // Time zone used by the server
              "serverTime": 1592387337630, // Current system time
              "optionContracts": [ // Option contract underlying asset info
                {
                  "id": 1,
                  "baseAsset": "BTC", // Base currency
                  "quoteAsset": "USDT", // Quotation asset
                  "underlying": "BTCUSDT", // Name of the underlying asset of the option contract
                  "settleAsset": "USDT" // Settlement currency
                }
              ],
              "optionAssets": [ // Option asset info
                {
                  "id": 1,
                  "name": "USDT" // Asset name
                }
              ],
              "optionSymbols": [ // Option trading pair info
                {
                  "contractId": 2,
                  "expiryDate": 1660521600000, // expiry time
                  "filters": [
                    {
                      "filterType": "PRICE_FILTER",
                      "minPrice": "0.02",
                      "maxPrice": "80000.01",
                      "tickSize": "0.01"
                    },
                    {
                      "filterType": "LOT_SIZE",
                      "minQty": "0.01",
                      "maxQty": "100",
                      "stepSize": "0.01"
                    }
                  ],
                  "id": 17,
                  "symbol": "BTC-220815-50000-C", // Trading pair name
                  "side": "CALL", // Direction: CALL long, PUT short
                  "strikePrice": "50000", // Strike price
                  "underlying": "BTCUSDT", // Underlying asset of the contract
                  "unit": 1, // Contract unit, the quantity of the underlying asset represented by a single contract.
                  "makerFeeRate": "0.0002", // maker commission rate
                  "takerFeeRate": "0.0002", // taker commission rate
                  "minQty": "0.01", // Minimum order quantity
                  "maxQty": "100", // Maximum order quantity
                  "initialMargin": "0.15", // Initial Magin Ratio
                  "maintenanceMargin": "0.075", // Maintenance Margin Ratio
                  "minInitialMargin": "0.1", // Min Initial Margin Ratio
                  "minMaintenanceMargin": "0.05", // Min Maintenance Margin Ratio
                  "priceScale": 2, // price precision
                  "quantityScale": 2, // quantity precision
                  "quoteAsset": "USDT" // Quotation asset
                }
              ],
              "rateLimits": [
                {
                  "rateLimitType": "REQUEST_WEIGHT",
                  "interval": "MINUTE",
                  "intervalNum": 1,
                  "limit": 2400
                },
                {
                  "rateLimitType": "ORDERS",
                  "interval": "MINUTE",
                  "intervalNum": 1,
                  "limit": 1200
                },
                {
                  "rateLimitType": "ORDERS",
                  "interval": "SECOND",
                  "intervalNum": 10,
                  "limit": 300
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.exchange-information",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#exchange-information",
      "name": "Exchange Information"
    },
    {
      "securityType": "MARKET_DATA",
      "request": "GET /eapi/v1/depth",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/depth",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "Option trading pair, e.g BTC-200730-9000-C"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default:100 Max:1000.Optional value:[10, 20, 50, 100, 500, 1000]"
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Option trading pair, e.g BTC-200730-9000-C"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default:100 Max:1000.Optional value:[10, 20, 50, 100, 500, 1000]"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "T": "number", // transaction time
              "u": "number", // update id
              "bids": [ // Buy order
                [
                  "NumberString" // Price
                ]
              ],
              "asks": [ // Sell order
                [
                  "NumberString" // Price
                ]
              ]
            }
          ],
          "responseExamples": [
            {
              "T": 1589436922972, // transaction time
              "u": 37461, // update id
              "bids": [ // Buy order
                [
                  "1000", // Price
                  "0.9" // Quantity
                ]
              ],
              "asks": [ // Sell order
                [
                  "1100", // Price
                  "0.1" // Quantity
                ]
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.order-book",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#order-book",
      "name": "Order Book"
    },
    {
      "description": "Get recent market trades",
      "securityType": "MARKET_DATA",
      "request": "GET /eapi/v1/trades",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/trades",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "Option trading pair, e.g BTC-200730-9000-C"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Number of records Default:100 Max:500"
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Option trading pair, e.g BTC-200730-9000-C"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Number of records Default:100 Max:500"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "id": "NumberString", // TradeId
                "symbol": "string",
                "price": "NumberString", // Completed trade price
                "qty": "NumberString", // Completed trade quantity
                "quoteQty": "NumberString", // Completed trade amount
                "side": "number", // Completed trade direction（-1 Sell,1 Buy）
                "time": "number" // Time
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "id": "1", // TradeId
                "symbol": "BTC-220722-19000-C",
                "price": "1000", // Completed trade price
                "qty": "-0.1", // Completed trade quantity
                "quoteQty": "-100", // Completed trade amount
                "side": -1, // Completed trade direction（-1 Sell,1 Buy）
                "time": 1592449455993 // Time
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.recent-trades-list",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#recent-trades-list",
      "name": "Recent Trades List"
    },
    {
      "description": "Get older market historical trades.",
      "securityType": "MARKET_DATA",
      "request": "GET /eapi/v1/historicalTrades",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/historicalTrades",
      "hmacSHA256": false,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "Option trading pair, e.g BTC-200730-9000-C"
        },
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "The UniqueId ID from which to return. The latest deal record is returned by default"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Number of records Default:100 Max:500"
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Option trading pair, e.g BTC-200730-9000-C"
            },
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "The UniqueId ID from which to return. The latest deal record is returned by default"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Number of records Default:100 Max:500"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "id": "NumberString", // UniqueId
                "tradeId": "NumberString", // TradeId
                "price": "NumberString", // Completed trade price
                "qty": "NumberString", // Completed trade Quantity
                "quoteQty": "NumberString", // Completed trade amount
                "side": "number", // Completed trade direction（-1 Sell,1 Buy）
                "time": "number" // Time
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "id": "1", // UniqueId
                "tradeId": "159244329455993", // TradeId
                "price": "1000", // Completed trade price
                "qty": "-0.1", // Completed trade Quantity
                "quoteQty": "-100", // Completed trade amount
                "side": -1, // Completed trade direction（-1 Sell,1 Buy）
                "time": 1592449455993 // Time
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.old-trades-lookup-market_data",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#old-trades-lookup-market_data",
      "name": "Old Trades Lookup (MARKET_DATA)"
    },
    {
      "description": "Kline/candlestick bars for an option symbol. \nKlines are uniquely identified by their open time.",
      "securityType": "MARKET_DATA",
      "request": "GET /eapi/v1/klines",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/klines",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "Option trading pair, e.g BTC-200730-9000-C"
        },
        "interval": {
          "name": "interval",
          "type": "string",
          "required": true,
          "description": "Time interval"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Start Time  1592317127349"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "End Time"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Number of records Default:500 Max:1500"
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Option trading pair, e.g BTC-200730-9000-C"
            },
            "interval": {
              "name": "interval",
              "type": "string",
              "required": true,
              "description": "Time interval"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Start Time  1592317127349"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "End Time"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Number of records Default:500 Max:1500"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "open": "NumberString", // Opening price
                "high": "NumberString", // Highest price
                "low": "NumberString", // Lowest price
                "close": "NumberString", // Closing price (latest price if the current candle has not closed)
                "volume": "NumberString", // Trading volume(contracts)
                "amount": "NumberString", // Trading amount(in quote asset)
                "interval": "string", // Candle type
                "tradeCount": "number", // Number of completed trades
                "takerVolume": "NumberString", // Taker trading volume(contracts)
                "takerAmount": "NumberString", // Taker trade amount(in quote asset)
                "openTime": "number", // Opening time
                "closeTime": "number" // Closing time
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "open": "950", // Opening price
                "high": "1100", // Highest price
                "low": "900", // Lowest price
                "close": "1000", // Closing price (latest price if the current candle has not closed)
                "volume": "100", // Trading volume(contracts)
                "amount": "2", // Trading amount(in quote asset)
                "interval": "5m", // Candle type
                "tradeCount": 10, // Number of completed trades
                "takerVolume": "100", // Taker trading volume(contracts)
                "takerAmount": "10000", // Taker trade amount(in quote asset)
                "openTime": 1499040000000, // Opening time
                "closeTime": 1499644799999 // Closing time
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.kline-candlestick-data",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#kline-candlestick-data",
      "name": "Kline/Candlestick Data"
    },
    {
      "description": "Option mark price and greek info.",
      "securityType": "MARKET_DATA",
      "request": "GET /eapi/v1/mark",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/mark",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": "Option trading pair, e.g BTC-200730-9000-C"
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": "Option trading pair, e.g BTC-200730-9000-C"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "markPrice": "NumberString", // Mark price
                "bidIV": "NumberString", // Implied volatility Buy
                "askIV": "NumberString", // Implied volatility Sell
                "markIV": "NumberString", // Implied volatility mark
                "delta": "NumberString", // delta
                "theta": "NumberString", // theta
                "gamma": "NumberString", // gamma
                "vega": "NumberString", // vega
                "highPriceLimit": "NumberString", // Current highest buy price
                "lowPriceLimit": "NumberString" // Current lowest sell price
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTC-200730-9000-C",
                "markPrice": "1343.2883", // Mark price
                "bidIV": "1.40000077", // Implied volatility Buy
                "askIV": "1.50000153", // Implied volatility Sell
                "markIV": "1.45000000", // Implied volatility mark
                "delta": "0.55937056", // delta
                "theta": "3739.82509871", // theta
                "gamma": "0.00010969", // gamma
                "vega": "978.58874732", // vega
                "highPriceLimit": "1618.241", // Current highest buy price
                "lowPriceLimit": "1068.3356" // Current lowest sell price
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.option-mark-price",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#option-mark-price",
      "name": "Option Mark Price"
    },
    {
      "description": "24 hour rolling window price change statistics.",
      "securityType": "MARKET_DATA",
      "request": "GET /eapi/v1/ticker",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/ticker",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": "Option trading pair, e.g BTC-200730-9000-C"
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": "Option trading pair, e.g BTC-200730-9000-C"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "priceChange": "NumberString", //24-hour price change
                "priceChangePercent": "NumberString", //24-hour percent price change
                "lastPrice": "NumberString", //Last trade price
                "lastQty": "NumberString", //Last trade amount
                "open": "NumberString", //24-hour open price
                "high": "NumberString", //24-hour high
                "low": "NumberString", //24-hour low
                "volume": "NumberString", //Trading volume(contracts)
                "amount": "NumberString", //Trade amount(in quote asset)
                "bidPrice": "NumberString", //The best buy price
                "askPrice": "NumberString", //The best sell price
                "openTime": "number", //Time the first trade occurred within the last 24 hours
                "closeTime": "number", //Time the last trade occurred within the last 24 hours
                "firstTradeId": "number", //First trade ID
                "tradeCount": "number", //Number of trades
                "strikePrice": "NumberString", //Strike price
                "exercisePrice": "NumberString" //return estimated settlement price one hour before exercise, return index price at other times
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTC-200730-9000-C",
                "priceChange": "-16.2038", //24-hour price change
                "priceChangePercent": "-0.0162", //24-hour percent price change
                "lastPrice": "1000", //Last trade price
                "lastQty": "1000", //Last trade amount
                "open": "1016.2038", //24-hour open price
                "high": "1016.2038", //24-hour high
                "low": "0", //24-hour low
                "volume": "5", //Trading volume(contracts)
                "amount": "1", //Trade amount(in quote asset)
                "bidPrice": "999.34", //The best buy price
                "askPrice": "1000.23", //The best sell price
                "openTime": 1592317127349, //Time the first trade occurred within the last 24 hours
                "closeTime": 1592380593516, //Time the last trade occurred within the last 24 hours
                "firstTradeId": 1, //First trade ID
                "tradeCount": 5, //Number of trades
                "strikePrice": "9000", //Strike price
                "exercisePrice": "3000.3356" //return estimated settlement price one hour before exercise, return index price at other times
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.24hr-ticker-price-change-statistics",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#24hr-ticker-price-change-statistics",
      "name": "24hr Ticker Price Change Statistics"
    },
    {
      "description": "Get spot index price for option underlying.",
      "securityType": "MARKET_DATA",
      "request": "GET /eapi/v1/index",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/index",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "underlying": {
          "name": "underlying",
          "type": "string",
          "required": true,
          "description": "Spot pair（Option contract underlying asset, e.g BTCUSDT)"
        }
      },
      "overloads": [
        {
          "params": {
            "underlying": {
              "name": "underlying",
              "type": "string",
              "required": true,
              "description": "Spot pair（Option contract underlying asset, e.g BTCUSDT)"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "time": "number",
              "indexPrice": "NumberString" // Current spot index price
            }
          ],
          "responseExamples": [
            {
              "time": 1656647305000,
              "indexPrice": "9200" // Current spot index price
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.symbol-price-ticker",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#symbol-price-ticker",
      "name": "Symbol Price Ticker"
    },
    {
      "description": "REALISTIC_VALUE_STRICKEN -> Exercised",
      "securityType": "MARKET_DATA",
      "request": "GET /eapi/v1/exerciseHistory",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/exerciseHistory",
      "hmacSHA256": false,
      "weights": {
        "IP": 3,
        "IP_text": "3"
      },
      "baseParams": {
        "underlying": {
          "name": "underlying",
          "type": "string",
          "required": false,
          "description": "Underlying index like BTCUSDT"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Start Time"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "End Time"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Number of records Default:100 Max:100"
        }
      },
      "overloads": [
        {
          "params": {
            "underlying": {
              "name": "underlying",
              "type": "string",
              "required": false,
              "description": "Underlying index like BTCUSDT"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Start Time"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "End Time"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Number of records Default:100 Max:100"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string", // symbol
                "strikePrice": "NumberString", // strike price
                "realStrikePrice": "NumberString", // real strike price
                "expiryDate": "number", // Exercise time
                "strikeResult": "string" // strike result
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTC-220121-60000-P", // symbol
                "strikePrice": "60000", // strike price
                "realStrikePrice": "38844.69652571", // real strike price
                "expiryDate": 1642752000000, // Exercise time
                "strikeResult": "REALISTIC_VALUE_STRICKEN" // strike result
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.historical-exercise-records",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#historical-exercise-records",
      "name": "Historical Exercise Records"
    },
    {
      "description": "Get open interest for specific underlying asset on specific expiration date.",
      "securityType": "MARKET_DATA",
      "request": "GET /eapi/v1/openInterest",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/openInterest",
      "hmacSHA256": false,
      "weights": {},
      "baseParams": {
        "underlyingAsset": {
          "name": "underlyingAsset",
          "type": "string",
          "required": true,
          "description": "underlying asset, e.g ETH/BTC"
        },
        "expiration": {
          "name": "expiration",
          "type": "string",
          "required": true,
          "description": "expiration date, e.g 221225"
        }
      },
      "overloads": [
        {
          "params": {
            "underlyingAsset": {
              "name": "underlyingAsset",
              "type": "string",
              "required": true,
              "description": "underlying asset, e.g ETH/BTC"
            },
            "expiration": {
              "name": "expiration",
              "type": "string",
              "required": true,
              "description": "expiration date, e.g 221225"
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "sumOpenInterest": "NumberString",
                "sumOpenInterestUsd": "NumberString",
                "timestamp": "NumberString"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "ETH-221119-1175-P",
                "sumOpenInterest": "4.01",
                "sumOpenInterestUsd": "4880.2985615624",
                "timestamp": "1668754020000"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.open-interest",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#open-interest",
      "name": "Open interest"
    },
    {
      "description": "Get current account information.",
      "securityType": "TRADE",
      "request": "GET /eapi/v1/account",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/account",
      "hmacSHA256": true,
      "weights": {
        "IP": 3,
        "IP_text": "3"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "asset": [
                {
                  "asset": "string", // Asset type
                  "marginBalance": "NumberString", // Account balance
                  "equity": "NumberString", // Account equity
                  "available": "NumberString", // Available funds
                  "locked": "NumberString", // locked balance for order and position
                  "unrealizedPNL": "NumberString" // Unrealized profit/loss
                }
              ],
              "greek": [
                {
                  "underlying": "string", // Option Underlying
                  "delta": "NumberString", // Account delta
                  "gamma": "NumberString", // Account gamma
                  "theta": "NumberString", // Account theta
                  "vega": "NumberString" // Account vega
                }
              ],
              "riskLevel": "string", // Account risk level
              "time": "number" // Time
            }
          ],
          "responseExamples": [
            {
              "asset": [
                {
                  "asset": "USDT", // Asset type
                  "marginBalance": "1877.52214415", // Account balance
                  "equity": "617.77711415", // Account equity
                  "available": "0", // Available funds
                  "locked": "2898.92389933", // locked balance for order and position
                  "unrealizedPNL": "222.23697000" // Unrealized profit/loss
                }
              ],
              "greek": [
                {
                  "underlying": "BTCUSDT", // Option Underlying
                  "delta": "-0.05", // Account delta
                  "gamma": "-0.002", // Account gamma
                  "theta": "-0.05", // Account theta
                  "vega": "-0.002" // Account vega
                }
              ],
              "riskLevel": "NORMAL", // Account risk level
              "time": 1592449455993 // Time
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.option-account-information-trade",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#option-account-information-trade",
      "name": "Option Account Information (TRADE)"
    },
    {
      "description": "Send a new order.",
      "securityType": "TRADE",
      "request": "POST /eapi/v1/order",
      "requestMethod": "POST",
      "requestEndPoint": "/eapi/v1/order",
      "hmacSHA256": true,
      "weights": {
        "IP": 5
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "Option trading pair, e.g BTC-200730-9000-C"
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": "Buy/sell direction: SELL, BUY"
        },
        "type": {
          "name": "type",
          "type": "OrderType",
          "required": true,
          "description": "Order Type: LIMIT(only support limit)"
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": true,
          "description": "Order Quantity"
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": false,
          "description": "Order Price"
        },
        "timeInForce": {
          "name": "timeInForce",
          "type": "TimeInForce",
          "required": false,
          "description": "Time in force method（Default GTC）"
        },
        "reduceOnly": {
          "name": "reduceOnly",
          "type": "boolean",
          "required": false,
          "description": "Reduce Only（Default false）"
        },
        "postOnly": {
          "name": "postOnly",
          "type": "boolean",
          "required": false,
          "description": "Post Only（Default false）"
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "OrderResponseType",
          "required": false,
          "description": "\"ACK\", \"RESULT\", Default \"ACK\""
        },
        "clientOrderId": {
          "name": "clientOrderId",
          "type": "string",
          "required": false,
          "description": "User-defined order ID cannot be repeated in pending orders"
        },
        "isMmp": {
          "name": "isMmp",
          "type": "boolean",
          "required": false,
          "description": "is market maker protection order, true/false"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Option trading pair, e.g BTC-200730-9000-C"
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": "Buy/sell direction: SELL, BUY"
            },
            "type": {
              "name": "type",
              "type": "OrderType",
              "required": true,
              "description": "Order Type: LIMIT(only support limit)"
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": true,
              "description": "Order Quantity"
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": false,
              "description": "Order Price"
            },
            "timeInForce": {
              "name": "timeInForce",
              "type": "TimeInForce",
              "required": false,
              "description": "Time in force method（Default GTC）"
            },
            "reduceOnly": {
              "name": "reduceOnly",
              "type": "boolean",
              "required": false,
              "description": "Reduce Only（Default false）"
            },
            "postOnly": {
              "name": "postOnly",
              "type": "boolean",
              "required": false,
              "description": "Post Only（Default false）"
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "OrderResponseType",
              "required": false,
              "description": "\"ACK\", \"RESULT\", Default \"ACK\""
            },
            "clientOrderId": {
              "name": "clientOrderId",
              "type": "string",
              "required": false,
              "description": "User-defined order ID cannot be repeated in pending orders"
            },
            "isMmp": {
              "name": "isMmp",
              "type": "boolean",
              "required": false,
              "description": "is market maker protection order, true/false"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "ACK:",
            "RESULT:"
          ],
          "responseTypes": [
            {
              "orderId": "number", // System order number
              "clientOrderId": "string", // Client order ID
              "symbol": "string", // Option trading pair
              "price": "NumberString", // Order Price
              "quantity": "NumberString", // Order Quantity
              "side": "OrderSide", // Buy/sell direction
              "type": "OrderType", // Order type
              "createDate": "number", // Order Time
              "updateTime": "number" // Update time
            },
            {
              "orderId": "number", // System order number
              "symbol": "string", // Option trading pair
              "price": "NumberString", // Order Price
              "quantity": "NumberString", // Order Quantity
              "executedQty": "NumberString", // Number of executed quantity
              "fee": "NumberString", // Fee
              "side": "OrderSide", // Buy/sell direction
              "type": "OrderType", // Order type
              "timeInForce": "TimeInForce", // Time in force method
              "reduceOnly": "boolean", // Order is reduce only Y/N
              "postOnly": "boolean", // Order is post only
              "createTime": "number", // Order Time
              "updateTime": "number", // Update time
              "status": "string", // Order status
              "avgPrice": "NumberString", // Average price of completed trade
              "clientOrderId": "string", // Client order ID
              "priceScale": "number",
              "quantityScale": "number",
              "optionSide": "string",
              "quoteAsset": "string",
              "mmp": "boolean"
            }
          ],
          "responseExamples": [
            {
              "orderId": 4611875134427365000, // System order number
              "clientOrderId": "", // Client order ID
              "symbol": "BTC-200730-9000-C", // Option trading pair
              "price": "100", // Order Price
              "quantity": "1", // Order Quantity
              "side": "BUY", // Buy/sell direction
              "type": "LIMIT", // Order type
              "createDate": 1592465880683, // Order Time
              "updateTime": 1566818724722 // Update time
            },
            {
              "orderId": 4611875134427365000, // System order number
              "symbol": "BTC-200730-9000-C", // Option trading pair
              "price": "100", // Order Price
              "quantity": "1", // Order Quantity
              "executedQty": "0", // Number of executed quantity
              "fee": "0", // Fee
              "side": "BUY", // Buy/sell direction
              "type": "LIMIT", // Order type
              "timeInForce": "GTC", // Time in force method
              "reduceOnly": false, // Order is reduce only Y/N
              "postOnly": false, // Order is post only
              "createTime": 1592465880683, // Order Time
              "updateTime": 1566818724722, // Update time
              "status": "ACCEPTED", // Order status
              "avgPrice": "0", // Average price of completed trade
              "clientOrderId": "", // Client order ID
              "priceScale": 2,
              "quantityScale": 2,
              "optionSide": "CALL",
              "quoteAsset": "USDT",
              "mmp": false
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.new-order-trade",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#new-order-trade",
      "name": "New Order (TRADE)"
    },
    {
      "description": "Send multiple option orders.",
      "securityType": "TRADE",
      "request": "POST /eapi/v1/batchOrders",
      "requestMethod": "POST",
      "requestEndPoint": "/eapi/v1/batchOrders",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "orders": {
          "name": "orders",
          "type": "[]",
          "required": true,
          "description": "order list. Max 5 orders"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orders": {
              "name": "orders",
              "type": "[]",
              "required": true,
              "description": "order list. Max 5 orders"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "orderId": "number", // System order number
                "symbol": "string", // Option trading pair
                "price": "NumberString", // Order Price
                "quantity": "NumberString", // Order Quantity
                "side": "OrderSide", // Buy/sell direction
                "type": "OrderType", // Order type
                "reduceOnly": "boolean", // Order is reduce only Y/N
                "postOnly": "boolean", // Post only or not
                "clientOrderId": "NumberString", // Client order ID
                "mmp": "boolean" // MMP
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "orderId": 4612288550799409000, // System order number
                "symbol": "ETH-220826-1800-C", // Option trading pair
                "price": "100", // Order Price
                "quantity": "0.01", // Order Quantity
                "side": "BUY", // Buy/sell direction
                "type": "LIMIT", // Order type
                "reduceOnly": false, // Order is reduce only Y/N
                "postOnly": false, // Post only or not
                "clientOrderId": "1001", // Client order ID
                "mmp": false // MMP
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.place-multiple-orders-trade",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#place-multiple-orders-trade",
      "name": "Place Multiple Orders  (TRADE)"
    },
    {
      "description": "Check an order status.",
      "securityType": "TRADE",
      "request": "GET /eapi/v1/order",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/order",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "Option trading pair, e.g BTC-200730-9000-C"
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": "Order id"
        },
        "clientOrderId": {
          "name": "clientOrderId",
          "type": "string",
          "required": false,
          "description": "User-defined order ID cannot be repeated in pending orders"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Option trading pair, e.g BTC-200730-9000-C"
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": "Order id"
            },
            "clientOrderId": {
              "name": "clientOrderId",
              "type": "string",
              "required": false,
              "description": "User-defined order ID cannot be repeated in pending orders"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "",
            "No Order"
          ],
          "responseTypes": [
            {
              "orderId": "number", // System order id
              "symbol": "string", // Option trading pair
              "price": "NumberString", // Order Price
              "quantity": "NumberString", // Order Quantity
              "executedQty": "NumberString", // Number of executed quantity
              "fee": "NumberString", // Fee
              "side": "OrderSide", // Buy/sell direction
              "type": "OrderType", // Order type
              "timeInForce": "TimeInForce", // Time in force method
              "reduceOnly": "boolean", // Order is reduce only Y/N
              "postOnly": "boolean", // Order is post only
              "createTime": "number", // Order Time
              "updateTime": "number", // Update time
              "status": "string", // Order status
              "avgPrice": "NumberString", // Average price of completed trade
              "source": "string", // Order source
              "clientOrderId": "string", // Client order ID
              "priceScale": "number",
              "quantityScale": "number",
              "optionSide": "string",
              "quoteAsset": "string",
              "mmp": "boolean"
            },
            {
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "orderId": 4611875134427365000, // System order id
              "symbol": "BTC-200730-9000-C", // Option trading pair
              "price": "100", // Order Price
              "quantity": "1", // Order Quantity
              "executedQty": "0", // Number of executed quantity
              "fee": "0", // Fee
              "side": "BUY", // Buy/sell direction
              "type": "LIMIT", // Order type
              "timeInForce": "GTC", // Time in force method
              "reduceOnly": false, // Order is reduce only Y/N
              "postOnly": false, // Order is post only
              "createTime": 1592465880683, // Order Time
              "updateTime": 1566818724722, // Update time
              "status": "ACCEPTED", // Order status
              "avgPrice": "0", // Average price of completed trade
              "source": "API", // Order source
              "clientOrderId": "", // Client order ID
              "priceScale": 2,
              "quantityScale": 2,
              "optionSide": "CALL",
              "quoteAsset": "USDT",
              "mmp": false
            },
            {
              "code": -2013,
              "msg": "Order does not exist"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.query-single-order-trade",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#query-single-order-trade",
      "name": "Query Single Order (TRADE)"
    },
    {
      "description": "Cancel an active order.",
      "securityType": "TRADE",
      "request": "DELETE /eapi/v1/order",
      "requestMethod": "DELETE",
      "requestEndPoint": "/eapi/v1/order",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "Option trading pair, e.g BTC-200730-9000-C"
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": "Order ID, e.g 4611875134427365377"
        },
        "clientOrderId": {
          "name": "clientOrderId",
          "type": "string",
          "required": false,
          "description": "User-defined order ID, e.g 10000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Option trading pair, e.g BTC-200730-9000-C"
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": "Order ID, e.g 4611875134427365377"
            },
            "clientOrderId": {
              "name": "clientOrderId",
              "type": "string",
              "required": false,
              "description": "User-defined order ID, e.g 10000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderId": "number", // System order number
              "symbol": "string", // Option trading pair
              "price": "NumberString", // Order Price
              "quantity": "NumberString", // Order Quantity
              "executedQty": "NumberString", // Number of executed quantity
              "fee": "NumberString", // Fee
              "side": "OrderSide", // Buy/sell direction
              "type": "OrderType", // Order type
              "timeInForce": "TimeInForce", // Time in force method
              "reduceOnly": "boolean", // Order is reduce only Y/N
              "postOnly": "boolean",
              "createDate": "number", // Order Time
              "updateTime": "number", // Update time
              "status": "string", // Order status
              "avgPrice": "NumberString", // Average price of completed trade
              "source": "string",
              "clientOrderId": "string", // Client order ID
              "priceScale": "number",
              "quantityScale": "number",
              "optionSide": "string",
              "quoteAsset": "string",
              "mmp": "boolean"
            }
          ],
          "responseExamples": [
            {
              "orderId": 4611875134427365000, // System order number
              "symbol": "BTC-200730-9000-C", // Option trading pair
              "price": "100", // Order Price
              "quantity": "1", // Order Quantity
              "executedQty": "0", // Number of executed quantity
              "fee": "0", // Fee
              "side": "BUY", // Buy/sell direction
              "type": "LIMIT", // Order type
              "timeInForce": "GTC", // Time in force method
              "reduceOnly": false, // Order is reduce only Y/N
              "postOnly": false,
              "createDate": 1592465880683, // Order Time
              "updateTime": 1566818724722, // Update time
              "status": "ACCEPTED", // Order status
              "avgPrice": "0", // Average price of completed trade
              "source": "API",
              "clientOrderId": "", // Client order ID
              "priceScale": 4,
              "quantityScale": 4,
              "optionSide": "CALL",
              "quoteAsset": "USDT",
              "mmp": false
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.cancel-option-order-trade",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#cancel-option-order-trade",
      "name": "Cancel Option Order (TRADE)"
    },
    {
      "description": "Cancel an active order.",
      "securityType": "TRADE",
      "request": "DELETE /eapi/v1/batchOrders",
      "requestMethod": "DELETE",
      "requestEndPoint": "/eapi/v1/batchOrders",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "Option trading pair, e.g BTC-200730-9000-C"
        },
        "orderIds": {
          "name": "orderIds",
          "type": "LONG[]",
          "required": false,
          "description": "Order ID, e.g [4611875134427365377,4611875134427365378]"
        },
        "clientOrderIds": {
          "name": "clientOrderIds",
          "type": "string[]",
          "required": false,
          "description": "User-defined order ID, e.g [\"my_id_1\",\"my_id_2\"]"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Option trading pair, e.g BTC-200730-9000-C"
            },
            "orderIds": {
              "name": "orderIds",
              "type": "LONG[]",
              "required": false,
              "description": "Order ID, e.g [4611875134427365377,4611875134427365378]"
            },
            "clientOrderIds": {
              "name": "clientOrderIds",
              "type": "string[]",
              "required": false,
              "description": "User-defined order ID, e.g [\"my_id_1\",\"my_id_2\"]"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "orderId": "number", // System order number
                "symbol": "string", // Option trading pair
                "price": "NumberString", // Order Price
                "quantity": "NumberString", // Order Quantity
                "executedQty": "NumberString", // Number of completed quantity
                "fee": "number", // Fee
                "side": "OrderSide", // Buy/sell direction
                "type": "OrderType", // Order type
                "timeInForce": "TimeInForce", // Time in force method
                "createTime": "number", // Order Time
                "status": "string", // Order status
                "avgPrice": "NumberString", // Average price of completed trade
                "reduceOnly": "boolean", // Order is reduce only Y/N
                "clientOrderId": "string", // Client order ID
                "updateTime": "number" // Update time
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "orderId": 4611875134427365000, // System order number
                "symbol": "BTC-200730-9000-C", // Option trading pair
                "price": "100", // Order Price
                "quantity": "1", // Order Quantity
                "executedQty": "0", // Number of completed quantity
                "fee": 0, // Fee
                "side": "BUY", // Buy/sell direction
                "type": "LIMIT", // Order type
                "timeInForce": "GTC", // Time in force method
                "createTime": 1592465880683, // Order Time
                "status": "ACCEPTED", // Order status
                "avgPrice": "0", // Average price of completed trade
                "reduceOnly": false, // Order is reduce only Y/N
                "clientOrderId": "", // Client order ID
                "updateTime": 1566818724722 // Update time
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.cancel-multiple-option-orders-trade",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#cancel-multiple-option-orders-trade",
      "name": "Cancel Multiple Option Orders (TRADE)"
    },
    {
      "description": "Cancel all active order on a symbol.",
      "securityType": "TRADE",
      "request": "DELETE /eapi/v1/allOpenOrders",
      "requestMethod": "DELETE",
      "requestEndPoint": "/eapi/v1/allOpenOrders",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "Option trading pair, e.g BTC-200730-9000-C"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Option trading pair, e.g BTC-200730-9000-C"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "code": 0,
              "msg": "success"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.cancel-all-option-orders-on-specific-symbol-trade",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#cancel-all-option-orders-on-specific-symbol-trade",
      "name": "Cancel all Option orders on specific symbol (TRADE)"
    },
    {
      "description": "Cancel all active orders on specified underlying.",
      "securityType": "TRADE",
      "request": "DELETE /eapi/v1/allOpenOrdersByUnderlying",
      "requestMethod": "DELETE",
      "requestEndPoint": "/eapi/v1/allOpenOrdersByUnderlying",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "underlying": {
          "name": "underlying",
          "type": "string",
          "required": true,
          "description": "Option underlying, e.g BTCUSDT"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "underlying": {
              "name": "underlying",
              "type": "string",
              "required": true,
              "description": "Option underlying, e.g BTCUSDT"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string",
              "data": "number"
            }
          ],
          "responseExamples": [
            {
              "code": 0,
              "msg": "success",
              "data": 0
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.cancel-all-option-orders-by-underlying-trade",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#cancel-all-option-orders-by-underlying-trade",
      "name": "Cancel All Option Orders By Underlying (TRADE)"
    },
    {
      "description": "Query current all open orders, status: ACCEPTED PARTIALLY_FILLED",
      "securityType": "USER_DATA",
      "request": "GET /eapi/v1/openOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/openOrders",
      "hmacSHA256": true,
      "weights": {
        "IP_text": "1 for a single symbol; 40 when the symbol parameter is omitted"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": "return all orders if don't pass, Option trading pair, e.g BTC-200730-9000-C,"
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": "Returns the orderId and subsequent orders, the most recent order is returned by default"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Start Time"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "End Time"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Number of result sets returned Default:100 Max:1000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": "return all orders if don't pass, Option trading pair, e.g BTC-200730-9000-C,"
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": "Returns the orderId and subsequent orders, the most recent order is returned by default"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Start Time"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "End Time"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Number of result sets returned Default:100 Max:1000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "orderId": "number", // System order number
                "symbol": "string", // Option trading pair
                "price": "NumberString", // Order Price
                "quantity": "NumberString", // Order Quantity
                "executedQty": "NumberString", // Number of completed trades
                "fee": "NumberString", // Fee
                "side": "OrderSide", // Buy/sell direction
                "type": "OrderType", // Order type
                "timeInForce": "TimeInForce", // Time in force method
                "reduceOnly": "boolean", // Order is reduce only Y/N
                "postOnly": "boolean",
                "createTime": "number", // Order Time
                "updateTime": "number", // Update Time
                "status": "string", // Order status
                "avgPrice": "NumberString", // Average price of completed trade
                "clientOrderId": "string", // Client order ID
                "priceScale": "number",
                "quantityScale": "number",
                "optionSide": "string",
                "quoteAsset": "string",
                "mmp": "boolean"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "orderId": 4611875134427365000, // System order number
                "symbol": "BTC-200730-9000-C", // Option trading pair
                "price": "100", // Order Price
                "quantity": "1", // Order Quantity
                "executedQty": "0", // Number of completed trades
                "fee": "0", // Fee
                "side": "BUY", // Buy/sell direction
                "type": "LIMIT", // Order type
                "timeInForce": "GTC", // Time in force method
                "reduceOnly": false, // Order is reduce only Y/N
                "postOnly": false,
                "createTime": 1592465880683, // Order Time
                "updateTime": 1592465880683, // Update Time
                "status": "ACCEPTED", // Order status
                "avgPrice": "0", // Average price of completed trade
                "clientOrderId": "", // Client order ID
                "priceScale": 2,
                "quantityScale": 2,
                "optionSide": "CALL",
                "quoteAsset": "USDT",
                "mmp": false
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.query-current-open-option-orders-user_data",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#query-current-open-option-orders-user_data",
      "name": "Query Current Open Option Orders (USER_DATA)"
    },
    {
      "description": "Query all finished orders within 5 days, finished status: CANCELLED FILLED REJECTED. ",
      "securityType": "TRADE",
      "request": "GET /eapi/v1/historyOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/historyOrders",
      "hmacSHA256": true,
      "weights": {
        "IP": 3,
        "IP_text": "3"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": "Option trading pair"
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": "Returns the orderId and subsequent orders, the most recent order is returned by default"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Start Time, e.g 1593511200000"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "End Time, e.g 1593512200000"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Number of result sets returned Default:100 Max:1000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": "Option trading pair"
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": "Returns the orderId and subsequent orders, the most recent order is returned by default"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Start Time, e.g 1593511200000"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "End Time, e.g 1593512200000"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Number of result sets returned Default:100 Max:1000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "orderId": "number",
                "symbol": "string",
                "price": "NumberString",
                "quantity": "NumberString",
                "executedQty": "NumberString",
                "fee": "NumberString",
                "side": "OrderSide",
                "type": "OrderType",
                "timeInForce": "TimeInForce",
                "reduceOnly": "boolean",
                "postOnly": "boolean",
                "createTime": "number",
                "updateTime": "number",
                "status": "string",
                "reason": "NumberString",
                "avgPrice": "NumberString",
                "source": "string",
                "clientOrderId": "string",
                "priceScale": "number",
                "quantityScale": "number",
                "optionSide": "string",
                "quoteAsset": "string",
                "mmp": "boolean"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "orderId": 4611922413427360000,
                "symbol": "BTC-220715-2000-C",
                "price": "18000.00000000",
                "quantity": "-0.50000000",
                "executedQty": "-0.50000000",
                "fee": "3.00000000",
                "side": "SELL",
                "type": "LIMIT",
                "timeInForce": "GTC",
                "reduceOnly": false,
                "postOnly": false,
                "createTime": 1657867694244,
                "updateTime": 1657867888216,
                "status": "FILLED",
                "reason": "0",
                "avgPrice": "18000.00000000",
                "source": "API",
                "clientOrderId": "",
                "priceScale": 2,
                "quantityScale": 2,
                "optionSide": "CALL",
                "quoteAsset": "USDT",
                "mmp": false
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.query-option-order-history-trade",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#query-option-order-history-trade",
      "name": "Query Option Order History (TRADE)"
    },
    {
      "description": "Get current position information.",
      "securityType": "USER_DATA",
      "request": "GET /eapi/v1/position",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/position",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": "Option trading pair, e.g BTC-200730-9000-C"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": "Option trading pair, e.g BTC-200730-9000-C"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "entryPrice": "NumberString", // Average entry price
                "symbol": "string", // Option trading pair
                "side": "string", // Position direction
                "quantity": "NumberString", // Number of positions (positive numbers represent long positions, negative number represent short positions)
                "reducibleQty": "NumberString", // Number of positions that can be reduced
                "markValue": "NumberString", // Current market value
                "ror": "NumberString", // Rate of return
                "unrealizedPNL": "NumberString", // Unrealized profit/loss
                "markPrice": "NumberString", // Mark price
                "strikePrice": "NumberString", // Strike price
                "positionCost": "NumberString", // Position cost
                "expiryDate": "number", // Exercise time
                "priceScale": "number",
                "quantityScale": "number",
                "optionSide": "string",
                "quoteAsset": "string"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "entryPrice": "1000", // Average entry price
                "symbol": "BTC-200730-9000-C", // Option trading pair
                "side": "SHORT", // Position direction
                "quantity": "-0.1", // Number of positions (positive numbers represent long positions, negative number represent short positions)
                "reducibleQty": "0", // Number of positions that can be reduced
                "markValue": "105.00138", // Current market value
                "ror": "-0.05", // Rate of return
                "unrealizedPNL": "-5.00138", // Unrealized profit/loss
                "markPrice": "1050.0138", // Mark price
                "strikePrice": "9000", // Strike price
                "positionCost": "1000.0000", // Position cost
                "expiryDate": 1593511200000, // Exercise time
                "priceScale": 2,
                "quantityScale": 2,
                "optionSide": "CALL",
                "quoteAsset": "USDT"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.option-position-information-user_data",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#option-position-information-user_data",
      "name": "Option Position Information (USER_DATA)"
    },
    {
      "description": "Get trades for a specific account and symbol.",
      "securityType": "USER_DATA",
      "request": "GET /eapi/v1/userTrades",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/userTrades",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": "Option symbol, e.g BTC-200730-9000-C"
        },
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "Trade id to fetch from. Default gets most recent trades, e.g 4611875134427365376"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Start time, e.g 1593511200000"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "End time, e.g 1593512200000"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 100; max 1000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": "Option symbol, e.g BTC-200730-9000-C"
            },
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "Trade id to fetch from. Default gets most recent trades, e.g 4611875134427365376"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Start time, e.g 1593511200000"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "End time, e.g 1593512200000"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 100; max 1000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "id": "number", // unique id
                "tradeId": "number", // trade id
                "orderId": "number", // order id
                "symbol": "string", // option symbol
                "price": "NumberString", // trade price
                "quantity": "NumberString", // trade quantity
                "fee": "NumberString", // fee
                "realizedProfit": "NumberString", // realized profit/loss
                "side": "OrderSide", // order side
                "type": "OrderType", // order type
                "volatility": "NumberString", // volatility
                "liquidity": "string", // TAKER or MAKER
                "quoteAsset": "string", // quote asset
                "time": "number", // trade time
                "priceScale": "number",
                "quantityScale": "number",
                "optionSide": "string"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "id": 4611875134427365000, // unique id
                "tradeId": 239, // trade id
                "orderId": 4611875134427365000, // order id
                "symbol": "BTC-200730-9000-C", // option symbol
                "price": "100", // trade price
                "quantity": "1", // trade quantity
                "fee": "0", // fee
                "realizedProfit": "0.00000000", // realized profit/loss
                "side": "BUY", // order side
                "type": "LIMIT", // order type
                "volatility": "0.9", // volatility
                "liquidity": "TAKER", // TAKER or MAKER
                "quoteAsset": "USDT", // quote asset
                "time": 1592465880683, // trade time
                "priceScale": 2,
                "quantityScale": 2,
                "optionSide": "CALL"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.account-trade-list-user_data",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#account-trade-list-user_data",
      "name": "Account Trade List (USER_DATA)"
    },
    {
      "description": "Get account exercise records.",
      "securityType": "USER_DATA",
      "request": "GET /eapi/v1/exerciseRecord",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/exerciseRecord",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": "Option trading pair, e.g BTC-200730-9000-C"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "startTime"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "endTime"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "default 1000, max 1000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": "Option trading pair, e.g BTC-200730-9000-C"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "startTime"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "endTime"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "default 1000, max 1000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "id": "NumberString",
                "currency": "string",
                "symbol": "string",
                "exercisePrice": "NumberString",
                "markPrice": "NumberString",
                "quantity": "NumberString",
                "amount": "NumberString",
                "fee": "NumberString",
                "createDate": "number",
                "priceScale": "number",
                "quantityScale": "number",
                "optionSide": "string",
                "positionSide": "PositionSide",
                "quoteAsset": "string"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "id": "1125899906842624042",
                "currency": "USDT",
                "symbol": "BTC-220721-25000-C",
                "exercisePrice": "25000.00000000",
                "markPrice": "25000.00000000",
                "quantity": "1.00000000",
                "amount": "0.00000000",
                "fee": "0.00000000",
                "createDate": 1658361600000,
                "priceScale": 2,
                "quantityScale": 2,
                "optionSide": "CALL",
                "positionSide": "LONG",
                "quoteAsset": "USDT"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.user-exercise-record-user_data",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#user-exercise-record-user_data",
      "name": "User Exercise Record (USER_DATA)"
    },
    {
      "description": "Query account funding flows.",
      "securityType": "USER_DATA",
      "request": "GET /eapi/v1/bill",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/bill",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "currency": {
          "name": "currency",
          "type": "string",
          "required": true,
          "description": "Asset type, e.g USDT"
        },
        "recordId": {
          "name": "recordId",
          "type": "LONG",
          "required": false,
          "description": "Return the recordId and subsequent data, the latest data is returned by default, e.g 100000"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Start Time, e.g 1593511200000"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "End Time, e.g 1593512200000"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Number of result sets returned Default:100 Max:1000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "currency": {
              "name": "currency",
              "type": "string",
              "required": true,
              "description": "Asset type, e.g USDT"
            },
            "recordId": {
              "name": "recordId",
              "type": "LONG",
              "required": false,
              "description": "Return the recordId and subsequent data, the latest data is returned by default, e.g 100000"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Start Time, e.g 1593511200000"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "End Time, e.g 1593512200000"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Number of result sets returned Default:100 Max:1000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "id": "number",
                "asset": "string", // Asset type
                "amount": "NumberString", // Amount (positive numbers represent inflow, negative numbers represent outflow)
                "type": "string", // type (fees)
                "createDate": "number" // Time
              },
              null,
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "id": 1125899906842624000,
                "asset": "USDT", // Asset type
                "amount": "-0.552", // Amount (positive numbers represent inflow, negative numbers represent outflow)
                "type": "FEE", // type (fees)
                "createDate": 1592449456000 // Time
              },
              {
                "id": 1125899906842624000,
                "asset": "USDT", // Asset type
                "amount": "100", // Amount (positive numbers represent inflow, negative numbers represent outflow)
                "type": "CONTRACT", // type (buy/sell contracts)
                "createDate": 1592449456000 // Time
              },
              {
                "id": 1125899906842624000,
                "asset": "USDT", // Asset type
                "amount": "10000", // Amount (positive numbers represent inflow, negative numbers represent outflow)
                "type": "TRANSFER", // type（Funds transfer）
                "createDate": 1592448410000 // Time
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.account-funding-flow-user_data",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#account-funding-flow-user_data",
      "name": "Account Funding Flow (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /eapi/v1/income/asyn",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/income/asyn",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": true,
          "description": "Timestamp in ms"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": true,
          "description": "Timestamp in ms"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": true,
              "description": "Timestamp in ms"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": true,
              "description": "Timestamp in ms"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "avgCostTimestampOfLast30d": "number", // Average time taken for data download in the past 30 days
              "downloadId": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "avgCostTimestampOfLast30d": 7241837, // Average time taken for data download in the past 30 days
              "downloadId": "546975389218332672"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-download-id-for-option-transaction-history-user_data",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#get-download-id-for-option-transaction-history-user_data",
      "name": "Get Download Id For Option Transaction History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /eapi/v1/income/asyn/id",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/income/asyn/id",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "downloadId": {
          "name": "downloadId",
          "type": "string",
          "required": true,
          "description": "get by download id api"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "downloadId": {
              "name": "downloadId",
              "type": "string",
              "required": true,
              "description": "get by download id api"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "",
            "(Response when server is processing)"
          ],
          "responseTypes": [
            {
              "downloadId": "NumberString",
              "status": "string", // Enum:completed,processing
              "url": "string", // The link is mapped to download id
              "notified": "boolean", // ignore
              "expirationTimestamp": "number", // The link would expire after this timestamp
              "isExpired": "null"
            },
            null
          ],
          "responseExamples": [
            {
              "downloadId": "545923594199212032",
              "status": "completed", // Enum:completed,processing
              "url": "www.binance.com", // The link is mapped to download id
              "notified": true, // ignore
              "expirationTimestamp": 1645009771000, // The link would expire after this timestamp
              "isExpired": null
            },
            {
              "downloadId": "545923594199212032",
              "status": "processing",
              "url": "",
              "notified": false,
              "expirationTimestamp": -1,
              "isExpired": null
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account/Trades Endpoints",
      "path": "toc.account-trades-endpoints.get-option-transaction-history-download-link-by-id-user_data",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#get-option-transaction-history-download-link-by-id-user_data",
      "name": "Get Option Transaction History Download Link by Id (USER_DATA)"
    },
    {
      "securityType": "USER_STREAM",
      "request": "POST /eapi/v1/listenKey",
      "requestMethod": "POST",
      "requestEndPoint": "/eapi/v1/listenKey",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "listenKey": "string",
              "expiration": "number"
            }
          ],
          "responseExamples": [
            {
              "listenKey": "pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1",
              "expiration": 1710140106000
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "User Data Streams",
      "path": "toc.user-data-streams.start-user-data-stream-user_stream",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#start-user-data-stream-user_stream",
      "name": "Start User Data Stream (USER_STREAM)"
    },
    {
      "description": "Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 60 minutes.",
      "securityType": "USER_STREAM",
      "request": "PUT /eapi/v1/listenKey",
      "requestMethod": "PUT",
      "requestEndPoint": "/eapi/v1/listenKey",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "User Data Streams",
      "path": "toc.user-data-streams.keepalive-user-data-stream-user_stream",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#keepalive-user-data-stream-user_stream",
      "name": "Keepalive User Data Stream (USER_STREAM)"
    },
    {
      "description": "Close out a user data stream.",
      "securityType": "USER_STREAM",
      "request": "DELETE /eapi/v1/listenKey",
      "requestMethod": "DELETE",
      "requestEndPoint": "/eapi/v1/listenKey",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "User Data Streams",
      "path": "toc.user-data-streams.close-user-data-stream-user_stream",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#close-user-data-stream-user_stream",
      "name": "Close User Data Stream (USER_STREAM)"
    },
    {
      "description": "Get current account information.",
      "securityType": "USER_DATA",
      "request": "GET /eapi/v1/marginAccount",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/marginAccount",
      "hmacSHA256": true,
      "weights": {
        "IP": 3,
        "IP_text": "3"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "asset": [
                {
                  "asset": "string", // Asset type
                  "marginBalance": "NumberString", // Account balance
                  "equity": "NumberString", // Account equity
                  "available": "NumberString", // Available funds
                  "initialMargin": "NumberString", // Initial margin
                  "maintMargin": "NumberString", // Maintenance margin
                  "unrealizedPNL": "NumberString", // Unrealized profit/loss
                  "lpProfit": "NumberString" // Unrealized profit for long position
                }
              ],
              "greek": [
                {
                  "underlying": "string", // Option Underlying
                  "delta": "NumberString", // Account delta
                  "gamma": "NumberString", // Account gamma
                  "theta": "NumberString", // Account theta
                  "vega": "NumberString" // Account vega
                }
              ],
              "riskLevel": "string", // Account risk level
              "time": "number" // Time
            }
          ],
          "responseExamples": [
            {
              "asset": [
                {
                  "asset": "USDT", // Asset type
                  "marginBalance": "10099.448", // Account balance
                  "equity": "10094.44662", // Account equity
                  "available": "8725.92524", // Available funds
                  "initialMargin": "1084.52138", // Initial margin
                  "maintMargin": "151.00138", // Maintenance margin
                  "unrealizedPNL": "-5.00138", // Unrealized profit/loss
                  "lpProfit": "-5.00138" // Unrealized profit for long position
                }
              ],
              "greek": [
                {
                  "underlying": "BTCUSDT", // Option Underlying
                  "delta": "-0.05", // Account delta
                  "gamma": "-0.002", // Account gamma
                  "theta": "-0.05", // Account theta
                  "vega": "-0.002" // Account vega
                }
              ],
              "riskLevel": "NORMAL", // Account risk level
              "time": 1592449455993 // Time
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Maker Endpoints",
      "path": "toc.market-maker-endpoints.option-margin-account-information-user_data",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#option-margin-account-information-user_data",
      "name": "Option Margin Account Information (USER_DATA)"
    },
    {
      "description": "Set config for MMP.\nMarket Maker Protection(MMP) is a set of protection mechanism for option market maker, this mechanism is able to prevent mass trading in short period time. Once market maker's account branches the threshold, the Market Maker Protection will be triggered. When Market Maker Protection triggers, all the current MMP orders will be canceled, new MMP orders will be rejected. Market maker can use this time to reevaluate market and modify order price.",
      "securityType": "TRADE",
      "request": "POST /eapi/v1/mmpSet",
      "requestMethod": "POST",
      "requestEndPoint": "/eapi/v1/mmpSet",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "underlying": {
          "name": "underlying",
          "type": "string",
          "required": true,
          "description": "underlying, e.g BTCUSDT"
        },
        "windowTimeInMilliseconds": {
          "name": "windowTimeInMilliseconds",
          "type": "LONG",
          "required": true,
          "description": "MMP Interval in milliseconds; Range (0,5000]"
        },
        "frozenTimeInMilliseconds": {
          "name": "frozenTimeInMilliseconds",
          "type": "LONG",
          "required": true,
          "description": "MMP frozen time in milliseconds, if set to 0 manual reset is required"
        },
        "qtyLimit": {
          "name": "qtyLimit",
          "type": "DECIMAL",
          "required": true,
          "description": "quantity limit"
        },
        "deltaLimit": {
          "name": "deltaLimit",
          "type": "DECIMAL",
          "required": true,
          "description": "net delta limit"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "underlying": {
              "name": "underlying",
              "type": "string",
              "required": true,
              "description": "underlying, e.g BTCUSDT"
            },
            "windowTimeInMilliseconds": {
              "name": "windowTimeInMilliseconds",
              "type": "LONG",
              "required": true,
              "description": "MMP Interval in milliseconds; Range (0,5000]"
            },
            "frozenTimeInMilliseconds": {
              "name": "frozenTimeInMilliseconds",
              "type": "LONG",
              "required": true,
              "description": "MMP frozen time in milliseconds, if set to 0 manual reset is required"
            },
            "qtyLimit": {
              "name": "qtyLimit",
              "type": "DECIMAL",
              "required": true,
              "description": "quantity limit"
            },
            "deltaLimit": {
              "name": "deltaLimit",
              "type": "DECIMAL",
              "required": true,
              "description": "net delta limit"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "underlyingId": "number",
              "underlying": "string",
              "windowTimeInMilliseconds": "number",
              "frozenTimeInMilliseconds": "number",
              "qtyLimit": "NumberString",
              "deltaLimit": "NumberString",
              "lastTriggerTime": "number"
            }
          ],
          "responseExamples": [
            {
              "underlyingId": 2,
              "underlying": "BTCUSDT",
              "windowTimeInMilliseconds": 3000,
              "frozenTimeInMilliseconds": 300000,
              "qtyLimit": "2",
              "deltaLimit": "2.3",
              "lastTriggerTime": 0
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Maker Endpoints",
      "path": "toc.market-maker-endpoints.set-market-maker-protection-config-trade",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#set-market-maker-protection-config-trade",
      "name": "Set Market Maker Protection Config (TRADE)"
    },
    {
      "description": "Get config for MMP.",
      "securityType": "TRADE",
      "request": "Get /eapi/v1/mmp",
      "requestMethod": "Get",
      "requestEndPoint": "/eapi/v1/mmp",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "underlying": {
          "name": "underlying",
          "type": "string",
          "required": true,
          "description": "underlying, e.g BTCUSDT"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "underlying": {
              "name": "underlying",
              "type": "string",
              "required": true,
              "description": "underlying, e.g BTCUSDT"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "underlyingId": "number",
              "underlying": "string",
              "windowTimeInMilliseconds": "number",
              "frozenTimeInMilliseconds": "number",
              "qtyLimit": "NumberString",
              "deltaLimit": "NumberString",
              "lastTriggerTime": "number"
            }
          ],
          "responseExamples": [
            {
              "underlyingId": 2,
              "underlying": "BTCUSDT",
              "windowTimeInMilliseconds": 3000,
              "frozenTimeInMilliseconds": 300000,
              "qtyLimit": "2",
              "deltaLimit": "2.3",
              "lastTriggerTime": 0
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Maker Endpoints",
      "path": "toc.market-maker-endpoints.get-market-maker-protection-config-trade",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#get-market-maker-protection-config-trade",
      "name": "Get Market Maker Protection Config (TRADE)"
    },
    {
      "description": "Reset MMP, start MMP order again.",
      "securityType": "TRADE",
      "request": "POST /eapi/v1/mmpReset",
      "requestMethod": "POST",
      "requestEndPoint": "/eapi/v1/mmpReset",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "underlying": {
          "name": "underlying",
          "type": "string",
          "required": true,
          "description": "underlying, e.g BTCUSDT"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "underlying": {
              "name": "underlying",
              "type": "string",
              "required": true,
              "description": "underlying, e.g BTCUSDT"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "underlyingId": "number",
              "underlying": "string",
              "windowTimeInMilliseconds": "number",
              "frozenTimeInMilliseconds": "number",
              "qtyLimit": "NumberString",
              "deltaLimit": "NumberString",
              "lastTriggerTime": "number"
            }
          ],
          "responseExamples": [
            {
              "underlyingId": 2,
              "underlying": "BTCUSDT",
              "windowTimeInMilliseconds": 3000,
              "frozenTimeInMilliseconds": 300000,
              "qtyLimit": "2",
              "deltaLimit": "2.3",
              "lastTriggerTime": 0
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Maker Endpoints",
      "path": "toc.market-maker-endpoints.reset-market-maker-protection-config-trade",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#reset-market-maker-protection-config-trade",
      "name": "Reset Market Maker Protection Config (TRADE)"
    },
    {
      "description": "This endpoint sets the parameters of the auto-cancel feature which cancels all open orders (both market maker protection and non market maker protection order types) of the underlying symbol at the end of the specified countdown time period if no heartbeat message is sent.  After the countdown time period, all open orders will be cancelled and new orders will be rejected with error code -2010 until either a heartbeat message is sent or the auto-cancel feature is turned off by setting countdownTime to 0.",
      "securityType": "TRADE",
      "request": "POST /eapi/v1/countdownCancelAll",
      "requestMethod": "POST",
      "requestEndPoint": "/eapi/v1/countdownCancelAll",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "underlying": {
          "name": "underlying",
          "type": "string",
          "required": true,
          "description": "Option underlying, e.g BTCUSDT"
        },
        "countdownTime": {
          "name": "countdownTime",
          "type": "LONG",
          "required": true,
          "description": "Countdown time in milliseconds (ex. 1,000 for 1 second). 0 to disable the timer. Negative values (ex. -10000) are not accepted. Minimum acceptable value is 5,000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "underlying": {
              "name": "underlying",
              "type": "string",
              "required": true,
              "description": "Option underlying, e.g BTCUSDT"
            },
            "countdownTime": {
              "name": "countdownTime",
              "type": "LONG",
              "required": true,
              "description": "Countdown time in milliseconds (ex. 1,000 for 1 second). 0 to disable the timer. Negative values (ex. -10000) are not accepted. Minimum acceptable value is 5,000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "underlying": "string",
              "countdownTime": "number"
            }
          ],
          "responseExamples": [
            {
              "underlying": "ETHUSDT",
              "countdownTime": 30000
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Maker Endpoints",
      "path": "toc.market-maker-endpoints.set-auto-cancel-all-open-orders-kill-switch-config-trade",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#set-auto-cancel-all-open-orders-kill-switch-config-trade",
      "name": "Set Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE)"
    },
    {
      "description": "This endpoint returns the auto-cancel parameters for each underlying symbol. Note only active auto-cancel parameters will be returned, if countdownTime is set to 0 (ie. countdownTime has been turned off), the underlying symbol and corresponding countdownTime parameter will not be returned in the response.",
      "securityType": "TRADE",
      "request": "GET /eapi/v1/countdownCancelAll",
      "requestMethod": "GET",
      "requestEndPoint": "/eapi/v1/countdownCancelAll",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "underlying": {
          "name": "underlying",
          "type": "string",
          "required": false,
          "description": "Option underlying, e.g BTCUSDT"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "underlying": {
              "name": "underlying",
              "type": "string",
              "required": false,
              "description": "Option underlying, e.g BTCUSDT"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "underlying": "string",
              "countdownTime": "number"
            }
          ],
          "responseExamples": [
            {
              "underlying": "ETHUSDT",
              "countdownTime": 100000
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Maker Endpoints",
      "path": "toc.market-maker-endpoints.get-auto-cancel-all-open-orders-kill-switch-config-trade",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#get-auto-cancel-all-open-orders-kill-switch-config-trade",
      "name": "Get Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE)"
    },
    {
      "description": "This endpoint resets the time from which the countdown will begin to the time this messaged is received.  It should be called repeatedly as heartbeats.  Multiple heartbeats can be updated at once by specifying the underlying symbols as a list (ex. BTCUSDT,ETHUSDT) in the underlyings parameter. ",
      "securityType": "TRADE",
      "request": "POST /eapi/v1/countdownCancelAllHeartBeat",
      "requestMethod": "POST",
      "requestEndPoint": "/eapi/v1/countdownCancelAllHeartBeat",
      "hmacSHA256": true,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "underlyings": {
          "name": "underlyings",
          "type": "string",
          "required": true,
          "description": "Option Underlying Symbols, e.g BTCUSDT,ETHUSDT"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "underlyings": {
              "name": "underlyings",
              "type": "string",
              "required": true,
              "description": "Option Underlying Symbols, e.g BTCUSDT,ETHUSDT"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "underlyings": [
                "string"
              ]
            }
          ],
          "responseExamples": [
            {
              "underlyings": [
                "BTCUSDT",
                "ETHUSDT"
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Maker Endpoints",
      "path": "toc.market-maker-endpoints.auto-cancel-all-open-orders-kill-switch-heartbeat-trade",
      "apiType": "options",
      "ref": "https://binance-docs.github.io/apidocs/voptions/en/#auto-cancel-all-open-orders-kill-switch-heartbeat-trade",
      "name": "Auto-Cancel All Open Orders (Kill-Switch) Heartbeat (TRADE)"
    }
  ],
  "papi": [
    {
      "description": "Test connectivity to the Rest API.",
      "securityType": "MARKET_DATA",
      "request": "GET /papi/v1/ping",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/ping",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Market Data Endpoints",
      "path": "toc.market-data-endpoints.test-connectivity",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#test-connectivity",
      "name": "Test Connectivity"
    },
    {
      "description": "Additional mandatory parameters based on type:",
      "securityType": "TRADE",
      "request": "POST /papi/v1/um/order",
      "requestMethod": "POST",
      "requestEndPoint": "/papi/v1/um/order",
      "hmacSHA256": true,
      "weights": {
        "UID": 1,
        "UID_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": ""
        },
        "positionSide": {
          "name": "positionSide",
          "type": "PositionSide",
          "required": false,
          "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode."
        },
        "type": {
          "name": "type",
          "type": "\"LIMIT\"|\"MARKET\"",
          "required": true,
          "description": "LIMIT, MARKET"
        },
        "timeInForce": {
          "name": "timeInForce",
          "type": "TimeInForce",
          "required": false,
          "description": ""
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "reduceOnly": {
          "name": "reduceOnly",
          "type": "\"true\"|\"false\"",
          "required": false,
          "description": "\"true\" or \"false\". default \"false\". Cannot be sent in Hedge Mode ."
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "newClientOrderId": {
          "name": "newClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: ^[\\.A-Z\\:/a-z0-9_-]{1,32}$"
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "\"ACK\"|\"RESULT\"",
          "required": false,
          "description": "ACK, RESULT, default ACK"
        },
        "selfTradePreventionMode": {
          "name": "selfTradePreventionMode",
          "type": "ENUM",
          "required": false,
          "description": "NONE:No STP / EXPIRE_TAKER:expire taker order when STP triggers/ EXPIRE_MAKER:expire taker order when STP triggers/ EXPIRE_BOTH:expire both orders when STP triggers"
        },
        "goodTillDate": {
          "name": "goodTillDate",
          "type": "LONG",
          "required": false,
          "description": "order cancel time for timeInForce GTD, mandatory when timeInforce set to GTD; order the timestamp only retains second-level precision, ms part will be ignored; The goodTillDate timestamp must be greater than the current time plus 600 seconds and smaller than 253402300799000Mode. It must be sent in Hedge Mode."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": ""
            },
            "positionSide": {
              "name": "positionSide",
              "type": "PositionSide",
              "required": false,
              "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode."
            },
            "type": {
              "name": "type",
              "type": "\"LIMIT\"|\"MARKET\"",
              "required": true,
              "description": "LIMIT, MARKET"
            },
            "timeInForce": {
              "name": "timeInForce",
              "type": "TimeInForce",
              "required": false,
              "description": ""
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "reduceOnly": {
              "name": "reduceOnly",
              "type": "\"true\"|\"false\"",
              "required": false,
              "description": "\"true\" or \"false\". default \"false\". Cannot be sent in Hedge Mode ."
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "newClientOrderId": {
              "name": "newClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: ^[\\.A-Z\\:/a-z0-9_-]{1,32}$"
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "\"ACK\"|\"RESULT\"",
              "required": false,
              "description": "ACK, RESULT, default ACK"
            },
            "selfTradePreventionMode": {
              "name": "selfTradePreventionMode",
              "type": "ENUM",
              "required": false,
              "description": "NONE:No STP / EXPIRE_TAKER:expire taker order when STP triggers/ EXPIRE_MAKER:expire taker order when STP triggers/ EXPIRE_BOTH:expire both orders when STP triggers"
            },
            "goodTillDate": {
              "name": "goodTillDate",
              "type": "LONG",
              "required": false,
              "description": "order cancel time for timeInForce GTD, mandatory when timeInforce set to GTD; order the timestamp only retains second-level precision, ms part will be ignored; The goodTillDate timestamp must be greater than the current time plus 600 seconds and smaller than 253402300799000Mode. It must be sent in Hedge Mode."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "clientOrderId": "string",
              "cumQty": "NumberString",
              "cumQuote": "NumberString",
              "executedQty": "NumberString",
              "orderId": "number",
              "avgPrice": "NumberString",
              "origQty": "NumberString",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "status": "string",
              "symbol": "string",
              "timeInForce": "string",
              "type": "OrderType",
              "selfTradePreventionMode": "string", //self trading preventation mode
              "goodTillDate": "number", //order pre-set auot cancel time for TIF GTD order
              "updateTime": "number"
            }
          ],
          "responseExamples": [
            {
              "clientOrderId": "testOrder",
              "cumQty": "0",
              "cumQuote": "0",
              "executedQty": "0",
              "orderId": 22542179,
              "avgPrice": "0.00000",
              "origQty": "10",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "status": "NEW",
              "symbol": "BTCUSDT",
              "timeInForce": "GTD",
              "type": "MARKET",
              "selfTradePreventionMode": "NONE", //self trading preventation mode
              "goodTillDate": 1693207680000, //order pre-set auot cancel time for TIF GTD order
              "updateTime": 1566818724722
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "New Order",
      "path": "toc.new-order.new-um-order-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#new-um-order-trade",
      "name": "New UM Order (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /papi/v1/cm/order",
      "requestMethod": "POST",
      "requestEndPoint": "/papi/v1/cm/order",
      "hmacSHA256": true,
      "weights": {
        "UID": 1,
        "UID_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": ""
        },
        "positionSide": {
          "name": "positionSide",
          "type": "PositionSide",
          "required": false,
          "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode."
        },
        "type": {
          "name": "type",
          "type": "\"LIMIT\"|\"MARKET\"",
          "required": true,
          "description": "\"LIMIT\", \"MARKET\""
        },
        "timeInForce": {
          "name": "timeInForce",
          "type": "TimeInForce",
          "required": false,
          "description": ""
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "reduceOnly": {
          "name": "reduceOnly",
          "type": "\"true\"|\"false\"",
          "required": false,
          "description": "\"true\" or \"false\". default \"false\". Cannot be sent in Hedge Mode."
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "newClientOrderId": {
          "name": "newClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: ^[\\.A-Z\\:/a-z0-9_-]{1,32}$"
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "OrderResponseType",
          "required": false,
          "description": "\"ACK\", \"RESULT\", default \"ACK\""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": ""
            },
            "positionSide": {
              "name": "positionSide",
              "type": "PositionSide",
              "required": false,
              "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode."
            },
            "type": {
              "name": "type",
              "type": "\"LIMIT\"|\"MARKET\"",
              "required": true,
              "description": "\"LIMIT\", \"MARKET\""
            },
            "timeInForce": {
              "name": "timeInForce",
              "type": "TimeInForce",
              "required": false,
              "description": ""
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "reduceOnly": {
              "name": "reduceOnly",
              "type": "\"true\"|\"false\"",
              "required": false,
              "description": "\"true\" or \"false\". default \"false\". Cannot be sent in Hedge Mode."
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "newClientOrderId": {
              "name": "newClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: ^[\\.A-Z\\:/a-z0-9_-]{1,32}$"
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "OrderResponseType",
              "required": false,
              "description": "\"ACK\", \"RESULT\", default \"ACK\""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "clientOrderId": "string",
              "cumQty": "NumberString",
              "cumBase": "NumberString",
              "executedQty": "NumberString",
              "orderId": "number",
              "avgPrice": "NumberString",
              "origQty": "NumberString",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "status": "string",
              "symbol": "string",
              "pair": "string",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "updateTime": "number"
            }
          ],
          "responseExamples": [
            {
              "clientOrderId": "testOrder",
              "cumQty": "0",
              "cumBase": "0",
              "executedQty": "0",
              "orderId": 22542179,
              "avgPrice": "0.0",
              "origQty": "10",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "status": "NEW",
              "symbol": "BTCUSD_200925",
              "pair": "BTCUSD",
              "timeInForce": "GTC",
              "type": "MARKET",
              "updateTime": 1566818724722
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "New Order",
      "path": "toc.new-order.new-cm-order-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#new-cm-order-trade",
      "name": "New CM Order (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /papi/v1/margin/order",
      "requestMethod": "POST",
      "requestEndPoint": "/papi/v1/margin/order",
      "hmacSHA256": false,
      "weights": {
        "UID": 1,
        "UID_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": "BUY ; SELL"
        },
        "type": {
          "name": "type",
          "type": "OrderType",
          "required": true,
          "description": ""
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "quoteOrderQty": {
          "name": "quoteOrderQty",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "stopPrice": {
          "name": "stopPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders."
        },
        "newClientOrderId": {
          "name": "newClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique id among open orders. Automatically generated if not sent."
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "OrderResponseType",
          "required": false,
          "description": "Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK."
        },
        "icebergQty": {
          "name": "icebergQty",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order"
        },
        "sideEffectType": {
          "name": "sideEffectType",
          "type": "\"NO_SIDE_EFFECT\"|\"MARGIN_BUY\"|\"AUTO_REPAY\"|\"AUTO_BORROW_REPAY\"",
          "required": false,
          "description": "NO_SIDE_EFFECT, MARGIN_BUY, AUTO_REPAY,AUTO_BORROW_REPAY; default NO_SIDE_EFFECT."
        },
        "timeInForce": {
          "name": "timeInForce",
          "type": "\"GTC\"|\"IOC\"|\"FOK\"",
          "required": false,
          "description": "GTC,IOC,FOK"
        },
        "selfTradePreventionMode": {
          "name": "selfTradePreventionMode",
          "type": "ENUM",
          "required": false,
          "description": "NONE:No STP / EXPIRE_TAKER:expire taker order when STP triggers/ EXPIRE_MAKER:expire taker order when STP triggers/ EXPIRE_BOTH:expire both orders when STP triggers"
        },
        "autoRepayAtCancel": {
          "name": "autoRepayAtCancel",
          "type": "boolean",
          "required": false,
          "description": "只有在自动借款单或者自动借还单生效，true表示的是撤单后需要把订单产生的借款归还，默认为true"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": "BUY ; SELL"
            },
            "type": {
              "name": "type",
              "type": "OrderType",
              "required": true,
              "description": ""
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "quoteOrderQty": {
              "name": "quoteOrderQty",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "stopPrice": {
              "name": "stopPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders."
            },
            "newClientOrderId": {
              "name": "newClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique id among open orders. Automatically generated if not sent."
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "OrderResponseType",
              "required": false,
              "description": "Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to FULL, all other orders default to ACK."
            },
            "icebergQty": {
              "name": "icebergQty",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order"
            },
            "sideEffectType": {
              "name": "sideEffectType",
              "type": "\"NO_SIDE_EFFECT\"|\"MARGIN_BUY\"|\"AUTO_REPAY\"|\"AUTO_BORROW_REPAY\"",
              "required": false,
              "description": "NO_SIDE_EFFECT, MARGIN_BUY, AUTO_REPAY,AUTO_BORROW_REPAY; default NO_SIDE_EFFECT."
            },
            "timeInForce": {
              "name": "timeInForce",
              "type": "\"GTC\"|\"IOC\"|\"FOK\"",
              "required": false,
              "description": "GTC,IOC,FOK"
            },
            "selfTradePreventionMode": {
              "name": "selfTradePreventionMode",
              "type": "ENUM",
              "required": false,
              "description": "NONE:No STP / EXPIRE_TAKER:expire taker order when STP triggers/ EXPIRE_MAKER:expire taker order when STP triggers/ EXPIRE_BOTH:expire both orders when STP triggers"
            },
            "autoRepayAtCancel": {
              "name": "autoRepayAtCancel",
              "type": "boolean",
              "required": false,
              "description": "只有在自动借款单或者自动借还单生效，true表示的是撤单后需要把订单产生的借款归还，默认为true"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "orderId": "number",
              "clientOrderId": "string",
              "transactTime": "number",
              "price": "NumberString",
              "selfTradePreventionMode": "string", //self trading preventation mode
              "origQty": "NumberString",
              "executedQty": "NumberString",
              "cummulativeQuoteQty": "NumberString",
              "status": "string",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "side": "OrderSide",
              "marginBuyBorrowAmount": "number", // will not return if no margin trade happens
              "marginBuyBorrowAsset": "string", // will not return if no margin trade happens
              "fills": [
                {
                  "price": "NumberString",
                  "qty": "NumberString",
                  "commission": "NumberString",
                  "commissionAsset": "string"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSDT",
              "orderId": 28,
              "clientOrderId": "6gCrw2kRUAF9CvJDGP16IP",
              "transactTime": 1507725176595,
              "price": "1.00000000",
              "selfTradePreventionMode": "NONE", //self trading preventation mode
              "origQty": "10.00000000",
              "executedQty": "10.00000000",
              "cummulativeQuoteQty": "10.00000000",
              "status": "FILLED",
              "timeInForce": "GTC",
              "type": "MARKET",
              "side": "SELL",
              "marginBuyBorrowAmount": 5, // will not return if no margin trade happens
              "marginBuyBorrowAsset": "BTC", // will not return if no margin trade happens
              "fills": [
                {
                  "price": "4000.00000000",
                  "qty": "1.00000000",
                  "commission": "4.00000000",
                  "commissionAsset": "USDT"
                },
                {
                  "price": "3999.00000000",
                  "qty": "5.00000000",
                  "commission": "19.99500000",
                  "commissionAsset": "USDT"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "New Order",
      "path": "toc.new-order.new-margin-order-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#new-margin-order-trade",
      "name": "New Margin Order (TRADE)"
    },
    {
      "description": "Apply for a margin loan.",
      "securityType": "MARGIN",
      "request": "POST /papi/v1/marginLoan",
      "requestMethod": "POST",
      "requestEndPoint": "/papi/v1/marginLoan",
      "hmacSHA256": false,
      "weights": {
        "IP": 100,
        "IP_text": "100"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              //transaction id
              "tranId": "number"
            }
          ],
          "responseExamples": [
            {
              //transaction id
              "tranId": 100000001
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "New Order",
      "path": "toc.new-order.margin-account-borrow-margin",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#margin-account-borrow-margin",
      "name": "Margin Account Borrow (MARGIN)"
    },
    {
      "description": "Repay for a margin loan.",
      "securityType": "MARGIN",
      "request": "POST /papi/v1/repayLoan",
      "requestMethod": "POST",
      "requestEndPoint": "/papi/v1/repayLoan",
      "hmacSHA256": false,
      "weights": {
        "IP": 100,
        "IP_text": "100"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              //transaction id
              "tranId": "number"
            }
          ],
          "responseExamples": [
            {
              //transaction id
              "tranId": 100000001
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "New Order",
      "path": "toc.new-order.margin-account-repay-margin",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#margin-account-repay-margin",
      "name": "Margin Account Repay (MARGIN)"
    },
    {
      "description": "Send in a new OCO for a margin account",
      "securityType": "TRADE",
      "request": "POST /papi/v1/margin/order/oco",
      "requestMethod": "POST",
      "requestEndPoint": "/papi/v1/margin/order/oco",
      "hmacSHA256": false,
      "weights": {
        "UID": 1,
        "UID_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "listClientOrderId": {
          "name": "listClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique Id for the entire orderList"
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": ""
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "limitClientOrderId": {
          "name": "limitClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique Id for the limit order"
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "limitIcebergQty": {
          "name": "limitIcebergQty",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "stopClientOrderId": {
          "name": "stopClientOrderId",
          "type": "string",
          "required": false,
          "description": "A unique Id for the stop loss/stop loss limit leg"
        },
        "stopPrice": {
          "name": "stopPrice",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "stopLimitPrice": {
          "name": "stopLimitPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "If provided, stopLimitTimeInForce is required."
        },
        "stopIcebergQty": {
          "name": "stopIcebergQty",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "stopLimitTimeInForce": {
          "name": "stopLimitTimeInForce",
          "type": "ENUM",
          "required": false,
          "description": "Valid values are GTC/FOK/IOC"
        },
        "newOrderRespType": {
          "name": "newOrderRespType",
          "type": "OrderResponseType",
          "required": false,
          "description": "Set the response JSON."
        },
        "sideEffectType": {
          "name": "sideEffectType",
          "type": "\"NO_SIDE_EFFECT\"|\"MARGIN_BUY\"|\"AUTO_REPAY\"|\"AUTO_BORROW_REPAY\"",
          "required": false,
          "description": "NO_SIDE_EFFECT, MARGIN_BUY, AUTO_REPAY,AUTO_BORROW_REPAY; default NO_SIDE_EFFECT."
        },
        "selfTradePreventionMode": {
          "name": "selfTradePreventionMode",
          "type": "ENUM",
          "required": false,
          "description": "NONE:No STP / EXPIRE_TAKER:expire taker order when STP triggers/ EXPIRE_MAKER:expire taker order when STP triggers/ EXPIRE_BOTH:expire both orders when STP triggers"
        },
        "autoRepayAtCancel": {
          "name": "autoRepayAtCancel",
          "type": "boolean",
          "required": false,
          "description": "只有在自动借款单或者自动借还单生效，true表示的是撤单后需要把订单产生的借款归还，默认为true"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "listClientOrderId": {
              "name": "listClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique Id for the entire orderList"
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": ""
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "limitClientOrderId": {
              "name": "limitClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique Id for the limit order"
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "limitIcebergQty": {
              "name": "limitIcebergQty",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "stopClientOrderId": {
              "name": "stopClientOrderId",
              "type": "string",
              "required": false,
              "description": "A unique Id for the stop loss/stop loss limit leg"
            },
            "stopPrice": {
              "name": "stopPrice",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "stopLimitPrice": {
              "name": "stopLimitPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "If provided, stopLimitTimeInForce is required."
            },
            "stopIcebergQty": {
              "name": "stopIcebergQty",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "stopLimitTimeInForce": {
              "name": "stopLimitTimeInForce",
              "type": "ENUM",
              "required": false,
              "description": "Valid values are GTC/FOK/IOC"
            },
            "newOrderRespType": {
              "name": "newOrderRespType",
              "type": "OrderResponseType",
              "required": false,
              "description": "Set the response JSON."
            },
            "sideEffectType": {
              "name": "sideEffectType",
              "type": "\"NO_SIDE_EFFECT\"|\"MARGIN_BUY\"|\"AUTO_REPAY\"|\"AUTO_BORROW_REPAY\"",
              "required": false,
              "description": "NO_SIDE_EFFECT, MARGIN_BUY, AUTO_REPAY,AUTO_BORROW_REPAY; default NO_SIDE_EFFECT."
            },
            "selfTradePreventionMode": {
              "name": "selfTradePreventionMode",
              "type": "ENUM",
              "required": false,
              "description": "NONE:No STP / EXPIRE_TAKER:expire taker order when STP triggers/ EXPIRE_MAKER:expire taker order when STP triggers/ EXPIRE_BOTH:expire both orders when STP triggers"
            },
            "autoRepayAtCancel": {
              "name": "autoRepayAtCancel",
              "type": "boolean",
              "required": false,
              "description": "只有在自动借款单或者自动借还单生效，true表示的是撤单后需要把订单产生的借款归还，默认为true"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderListId": "number",
              "contingencyType": "string",
              "listStatusType": "OCOStatus",
              "listOrderStatus": "OCOOrderStatus",
              "listClientOrderId": "string",
              "transactionTime": "number",
              "symbol": "string",
              "marginBuyBorrowAmount": "NumberString", // will not return if no margin trade happens
              "marginBuyBorrowAsset": "string", // will not return if no margin trade happens
              "orders": [
                {
                  "symbol": "string",
                  "orderId": "number",
                  "clientOrderId": "string"
                },
                null
              ],
              "orderReports": [
                {
                  "symbol": "string",
                  "orderId": "number",
                  "orderListId": "number",
                  "clientOrderId": "string",
                  "transactTime": "number",
                  "price": "NumberString",
                  "origQty": "NumberString",
                  "executedQty": "NumberString",
                  "cummulativeQuoteQty": "NumberString",
                  "status": "string",
                  "timeInForce": "TimeInForce",
                  "type": "OrderType",
                  "side": "OrderSide",
                  "stopPrice": "NumberString",
                  "selfTradePreventionMode": "string"
                },
                {
                  "symbol": "string",
                  "orderId": "number",
                  "orderListId": "number",
                  "clientOrderId": "string",
                  "transactTime": "number",
                  "price": "NumberString",
                  "origQty": "NumberString",
                  "executedQty": "NumberString",
                  "cummulativeQuoteQty": "NumberString",
                  "status": "string",
                  "timeInForce": "TimeInForce",
                  "type": "OrderType",
                  "side": "OrderSide",
                  "selfTradePreventionMode": "string"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "orderListId": 0,
              "contingencyType": "OCO",
              "listStatusType": "EXEC_STARTED",
              "listOrderStatus": "EXECUTING",
              "listClientOrderId": "JYVpp3F0f5CAG15DhtrqLp",
              "transactionTime": 1563417480525,
              "symbol": "LTCBTC",
              "marginBuyBorrowAmount": "5", // will not return if no margin trade happens
              "marginBuyBorrowAsset": "BTC", // will not return if no margin trade happens
              "orders": [
                {
                  "symbol": "LTCBTC",
                  "orderId": 2,
                  "clientOrderId": "Kk7sqHb9J6mJWTMDVW7Vos"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 3,
                  "clientOrderId": "xTXKaGYd4bluPVp78IVRvl"
                }
              ],
              "orderReports": [
                {
                  "symbol": "LTCBTC",
                  "orderId": 2,
                  "orderListId": 0,
                  "clientOrderId": "Kk7sqHb9J6mJWTMDVW7Vos",
                  "transactTime": 1563417480525,
                  "price": "0.000000",
                  "origQty": "0.624363",
                  "executedQty": "0.000000",
                  "cummulativeQuoteQty": "0.000000",
                  "status": "NEW",
                  "timeInForce": "GTC",
                  "type": "STOP_LOSS",
                  "side": "BUY",
                  "stopPrice": "0.960664",
                  "selfTradePreventionMode": "EXPIRE_BOTH"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 3,
                  "orderListId": 0,
                  "clientOrderId": "xTXKaGYd4bluPVp78IVRvl",
                  "transactTime": 1563417480525,
                  "price": "0.036435",
                  "origQty": "0.624363",
                  "executedQty": "0.000000",
                  "cummulativeQuoteQty": "0.000000",
                  "status": "NEW",
                  "timeInForce": "GTC",
                  "type": "LIMIT_MAKER",
                  "side": "BUY",
                  "selfTradePreventionMode": "EXPIRE_BOTH"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "New Order",
      "path": "toc.new-order.margin-account-new-oco-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#margin-account-new-oco-trade",
      "name": "Margin Account New OCO (TRADE)"
    },
    {
      "description": "Additional mandatory parameters based on type:",
      "securityType": "TRADE",
      "request": "POST/papi/v1/um/conditional/order",
      "requestMethod": "POST",
      "requestEndPoint": "/papi/v1/um/conditional/order",
      "hmacSHA256": false,
      "weights": {
        "UID": 1,
        "UID_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": ""
        },
        "positionSide": {
          "name": "positionSide",
          "type": "PositionSide",
          "required": false,
          "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode."
        },
        "strategyType": {
          "name": "strategyType",
          "type": "ENUM",
          "required": true,
          "description": "\"STOP\", \"STOP_MARKET\", \"TAKE_PROFIT\", \"TAKE_PROFIT_MARKET\", and \"TRAILING_STOP_MARKET\""
        },
        "timeInForce": {
          "name": "timeInForce",
          "type": "TimeInForce",
          "required": false,
          "description": ""
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "reduceOnly": {
          "name": "reduceOnly",
          "type": "\"true\"|\"false\"",
          "required": false,
          "description": "\"true\" or \"false\". default \"false\". Cannot be sent in Hedge Mode ; cannot be sent with closePosition=true"
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "workingType": {
          "name": "workingType",
          "type": "WorkingType",
          "required": false,
          "description": "stopPrice triggered by: \"MARK_PRICE\", \"CONTRACT_PRICE\". Default \"CONTRACT_PRICE\""
        },
        "priceProtect": {
          "name": "priceProtect",
          "type": "\"TRUE\"|\"FALSE\"",
          "required": false,
          "description": "\"TRUE\" or \"FALSE\", default \"FALSE\". Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders"
        },
        "newClientStrategyId": {
          "name": "newClientStrategyId",
          "type": "string",
          "required": false,
          "description": "A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: ^[\\.A-Z\\:/a-z0-9_-]{1,32}$"
        },
        "stopPrice": {
          "name": "stopPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
        },
        "activationPrice": {
          "name": "activationPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with TRAILING_STOP_MARKET orders, default as the mark price"
        },
        "callbackRate": {
          "name": "callbackRate",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with TRAILING_STOP_MARKET orders, min 0.1, max 5 where 1 for 1%"
        },
        "selfTradePreventionMode": {
          "name": "selfTradePreventionMode",
          "type": "ENUM",
          "required": false,
          "description": "NONE:No STP / EXPIRE_TAKER:expire taker order when STP triggers/ EXPIRE_MAKER:expire taker order when STP triggers/ EXPIRE_BOTH:expire both orders when STP triggers"
        },
        "goodTillDate": {
          "name": "goodTillDate",
          "type": "LONG",
          "required": false,
          "description": "order cancel time for timeInForce GTD, mandatory when timeInforce set to GTD; order the timestamp only retains second-level precision, ms part will be ignored; The goodTillDate timestamp must be greater than the current time plus 600 seconds and smaller than 253402300799000Mode. It must be sent in Hedge Mode."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": ""
            },
            "positionSide": {
              "name": "positionSide",
              "type": "PositionSide",
              "required": false,
              "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode."
            },
            "strategyType": {
              "name": "strategyType",
              "type": "ENUM",
              "required": true,
              "description": "\"STOP\", \"STOP_MARKET\", \"TAKE_PROFIT\", \"TAKE_PROFIT_MARKET\", and \"TRAILING_STOP_MARKET\""
            },
            "timeInForce": {
              "name": "timeInForce",
              "type": "TimeInForce",
              "required": false,
              "description": ""
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "reduceOnly": {
              "name": "reduceOnly",
              "type": "\"true\"|\"false\"",
              "required": false,
              "description": "\"true\" or \"false\". default \"false\". Cannot be sent in Hedge Mode ; cannot be sent with closePosition=true"
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "workingType": {
              "name": "workingType",
              "type": "WorkingType",
              "required": false,
              "description": "stopPrice triggered by: \"MARK_PRICE\", \"CONTRACT_PRICE\". Default \"CONTRACT_PRICE\""
            },
            "priceProtect": {
              "name": "priceProtect",
              "type": "\"TRUE\"|\"FALSE\"",
              "required": false,
              "description": "\"TRUE\" or \"FALSE\", default \"FALSE\". Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders"
            },
            "newClientStrategyId": {
              "name": "newClientStrategyId",
              "type": "string",
              "required": false,
              "description": "A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: ^[\\.A-Z\\:/a-z0-9_-]{1,32}$"
            },
            "stopPrice": {
              "name": "stopPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
            },
            "activationPrice": {
              "name": "activationPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with TRAILING_STOP_MARKET orders, default as the mark price"
            },
            "callbackRate": {
              "name": "callbackRate",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with TRAILING_STOP_MARKET orders, min 0.1, max 5 where 1 for 1%"
            },
            "selfTradePreventionMode": {
              "name": "selfTradePreventionMode",
              "type": "ENUM",
              "required": false,
              "description": "NONE:No STP / EXPIRE_TAKER:expire taker order when STP triggers/ EXPIRE_MAKER:expire taker order when STP triggers/ EXPIRE_BOTH:expire both orders when STP triggers"
            },
            "goodTillDate": {
              "name": "goodTillDate",
              "type": "LONG",
              "required": false,
              "description": "order cancel time for timeInForce GTD, mandatory when timeInforce set to GTD; order the timestamp only retains second-level precision, ms part will be ignored; The goodTillDate timestamp must be greater than the current time plus 600 seconds and smaller than 253402300799000Mode. It must be sent in Hedge Mode."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "newClientStrategyId": "string",
              "strategyId": "number",
              "strategyStatus": "string",
              "strategyType": "string",
              "origQty": "NumberString",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
              "symbol": "string",
              "timeInForce": "string",
              "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
              "bookTime": "number", // order place time
              "updateTime": "number",
              "workingType": "WorkingType",
              "priceProtect": "boolean",
              "selfTradePreventionMode": "string", //self trading preventation mode
              "goodTillDate": "number" //order pre-set auot cancel time for TIF GTD order
            }
          ],
          "responseExamples": [
            {
              "newClientStrategyId": "testOrder",
              "strategyId": 123445,
              "strategyStatus": "NEW",
              "strategyType": "TRAILING_STOP_MARKET",
              "origQty": "10",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
              "symbol": "BTCUSDT",
              "timeInForce": "GTD",
              "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
              "bookTime": 1566818724710, // order place time
              "updateTime": 1566818724722,
              "workingType": "CONTRACT_PRICE",
              "priceProtect": false,
              "selfTradePreventionMode": "NONE", //self trading preventation mode
              "goodTillDate": 1693207680000 //order pre-set auot cancel time for TIF GTD order
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "New Order",
      "path": "toc.new-order.new-um-conditional-order-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#new-um-conditional-order-trade",
      "name": "New UM Conditional Order (TRADE)"
    },
    {
      "description": "Additional mandatory parameters based on type:",
      "securityType": "TRADE",
      "request": "POST /papi/v1/cm/conditional/order",
      "requestMethod": "POST",
      "requestEndPoint": "/papi/v1/cm/conditional/order",
      "hmacSHA256": false,
      "weights": {
        "UID": 1,
        "UID_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "side": {
          "name": "side",
          "type": "OrderSide",
          "required": true,
          "description": ""
        },
        "positionSide": {
          "name": "positionSide",
          "type": "PositionSide",
          "required": false,
          "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode."
        },
        "strategyType": {
          "name": "strategyType",
          "type": "ENUM",
          "required": true,
          "description": "\"STOP\", \"STOP_MARKET\", \"TAKE_PROFIT\", \"TAKE_PROFIT_MARKET\", and \"TRAILING_STOP_MARKET\""
        },
        "timeInForce": {
          "name": "timeInForce",
          "type": "TimeInForce",
          "required": false,
          "description": ""
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "reduceOnly": {
          "name": "reduceOnly",
          "type": "\"true\"|\"false\"",
          "required": false,
          "description": "\"true\" or \"false\". default \"false\". Cannot be sent in Hedge Mode"
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": false,
          "description": ""
        },
        "workingType": {
          "name": "workingType",
          "type": "WorkingType",
          "required": false,
          "description": "stopPrice triggered by: \"MARK_PRICE\", \"CONTRACT_PRICE\". Default \"CONTRACT_PRICE\""
        },
        "priceProtect": {
          "name": "priceProtect",
          "type": "\"TRUE\"|\"FALSE\"",
          "required": false,
          "description": "\"TRUE\" or \"FALSE\", default \"FALSE\". Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders"
        },
        "newClientStrategyId": {
          "name": "newClientStrategyId",
          "type": "string",
          "required": false,
          "description": "A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: ^[\\.A-Z\\:/a-z0-9_-]{1,36}$"
        },
        "stopPrice": {
          "name": "stopPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
        },
        "activationPrice": {
          "name": "activationPrice",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with TRAILING_STOP_MARKET orders, default as the mark price"
        },
        "callbackRate": {
          "name": "callbackRate",
          "type": "DECIMAL",
          "required": false,
          "description": "Used with TRAILING_STOP_MARKET orders, min 0.1, max 5 where 1 for 1%"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "side": {
              "name": "side",
              "type": "OrderSide",
              "required": true,
              "description": ""
            },
            "positionSide": {
              "name": "positionSide",
              "type": "PositionSide",
              "required": false,
              "description": "Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode."
            },
            "strategyType": {
              "name": "strategyType",
              "type": "ENUM",
              "required": true,
              "description": "\"STOP\", \"STOP_MARKET\", \"TAKE_PROFIT\", \"TAKE_PROFIT_MARKET\", and \"TRAILING_STOP_MARKET\""
            },
            "timeInForce": {
              "name": "timeInForce",
              "type": "TimeInForce",
              "required": false,
              "description": ""
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "reduceOnly": {
              "name": "reduceOnly",
              "type": "\"true\"|\"false\"",
              "required": false,
              "description": "\"true\" or \"false\". default \"false\". Cannot be sent in Hedge Mode"
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": false,
              "description": ""
            },
            "workingType": {
              "name": "workingType",
              "type": "WorkingType",
              "required": false,
              "description": "stopPrice triggered by: \"MARK_PRICE\", \"CONTRACT_PRICE\". Default \"CONTRACT_PRICE\""
            },
            "priceProtect": {
              "name": "priceProtect",
              "type": "\"TRUE\"|\"FALSE\"",
              "required": false,
              "description": "\"TRUE\" or \"FALSE\", default \"FALSE\". Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders"
            },
            "newClientStrategyId": {
              "name": "newClientStrategyId",
              "type": "string",
              "required": false,
              "description": "A unique id among open orders. Automatically generated if not sent. Can only be string following the rule: ^[\\.A-Z\\:/a-z0-9_-]{1,36}$"
            },
            "stopPrice": {
              "name": "stopPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders."
            },
            "activationPrice": {
              "name": "activationPrice",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with TRAILING_STOP_MARKET orders, default as the mark price"
            },
            "callbackRate": {
              "name": "callbackRate",
              "type": "DECIMAL",
              "required": false,
              "description": "Used with TRAILING_STOP_MARKET orders, min 0.1, max 5 where 1 for 1%"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "newClientStrategyId": "string",
              "strategyId": "number",
              "strategyStatus": "string",
              "strategyType": "string",
              "origQty": "NumberString",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
              "symbol": "string",
              "pair": "string",
              "timeInForce": "TimeInForce",
              "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
              "bookTime": "number", // order place time
              "updateTime": "number",
              "workingType": "WorkingType",
              "priceProtect": "boolean"
            }
          ],
          "responseExamples": [
            {
              "newClientStrategyId": "testOrder",
              "strategyId": 123445,
              "strategyStatus": "NEW",
              "strategyType": "TRAILING_STOP_MARKET",
              "origQty": "10",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
              "symbol": "BTCUSD_200925",
              "pair": "BTCUSD",
              "timeInForce": "GTC",
              "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
              "bookTime": 1566818724710, // order place time
              "updateTime": 1566818724722,
              "workingType": "CONTRACT_PRICE",
              "priceProtect": false
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "New Order",
      "path": "toc.new-order.new-cm-conditional-order-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#new-cm-conditional-order-trade",
      "name": "New CM Conditional Order (TRADE)"
    },
    {
      "description": "Order modify function, currently only LIMIT order modification is supported, modified orders will be reordered in the match queue",
      "securityType": "TRADE",
      "request": "PUT /papi/v1/um/order",
      "requestMethod": "PUT",
      "requestEndPoint": "/papi/v1/um/order",
      "hmacSHA256": true,
      "weights": {
        "UID": 1,
        "UID_text": "1"
      },
      "baseParams": {
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "side": {
          "name": "side",
          "type": "\"SELL\"|\"BUY\"",
          "required": true,
          "description": "SELL, BUY"
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": true,
          "description": "Order quantity"
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "side": {
              "name": "side",
              "type": "\"SELL\"|\"BUY\"",
              "required": true,
              "description": "SELL, BUY"
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": true,
              "description": "Order quantity"
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderId": "number",
              "symbol": "string",
              "status": "string",
              "clientOrderId": "string",
              "price": "NumberString",
              "avgPrice": "NumberString",
              "origQty": "NumberString",
              "executedQty": "NumberString",
              "cumQty": "NumberString",
              "cumQuote": "NumberString",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "origType": "string",
              "selfTradePreventionMode": "string", //self trading preventation mode
              "goodTillDate": "number", //order pre-set auot cancel time for TIF GTD order
              "updateTime": "number"
            }
          ],
          "responseExamples": [
            {
              "orderId": 20072994037,
              "symbol": "BTCUSDT",
              "status": "NEW",
              "clientOrderId": "LJ9R4QZDihCaS8UAOOLpgW",
              "price": "30005",
              "avgPrice": "0.0",
              "origQty": "1",
              "executedQty": "0",
              "cumQty": "0",
              "cumQuote": "0",
              "timeInForce": "GTC",
              "type": "LIMIT",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "LONG",
              "origType": "LIMIT",
              "selfTradePreventionMode": "NONE", //self trading preventation mode
              "goodTillDate": 0, //order pre-set auot cancel time for TIF GTD order
              "updateTime": 1629182711600
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "New Order",
      "path": "toc.new-order.modify-um-order-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#modify-um-order-trade",
      "name": "Modify UM Order (TRADE)"
    },
    {
      "description": "Order modify function, currently only LIMIT order modification is supported, modified orders will be reordered in the match queue",
      "securityType": "TRADE",
      "request": "PUT/papi/v1/cm/order",
      "requestMethod": "PUT",
      "requestEndPoint": "/papi/v1/cm/order",
      "hmacSHA256": true,
      "weights": {
        "UID": 1,
        "UID_text": "1"
      },
      "baseParams": {
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "side": {
          "name": "side",
          "type": "\"SELL\"|\"BUY\"",
          "required": true,
          "description": "SELL, BUY"
        },
        "quantity": {
          "name": "quantity",
          "type": "DECIMAL",
          "required": true,
          "description": "Order quantity"
        },
        "price": {
          "name": "price",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "side": {
              "name": "side",
              "type": "\"SELL\"|\"BUY\"",
              "required": true,
              "description": "SELL, BUY"
            },
            "quantity": {
              "name": "quantity",
              "type": "DECIMAL",
              "required": true,
              "description": "Order quantity"
            },
            "price": {
              "name": "price",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderId": "number",
              "symbol": "string",
              "pair": "string",
              "status": "string",
              "clientOrderId": "string",
              "price": "NumberString",
              "avgPrice": "NumberString",
              "origQty": "NumberString",
              "executedQty": "NumberString",
              "cumQty": "NumberString",
              "cumBase": "NumberString",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "origType": "string",
              "updateTime": "number"
            }
          ],
          "responseExamples": [
            {
              "orderId": 20072994037,
              "symbol": "BTCUSD_PERP",
              "pair": "BTCUSD",
              "status": "NEW",
              "clientOrderId": "LJ9R4QZDihCaS8UAOOLpgW",
              "price": "30005",
              "avgPrice": "0.0",
              "origQty": "1",
              "executedQty": "0",
              "cumQty": "0",
              "cumBase": "0",
              "timeInForce": "GTC",
              "type": "LIMIT",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "LONG",
              "origType": "LIMIT",
              "updateTime": 1629182711600
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "New Order",
      "path": "toc.new-order.modify-cm-order-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#modify-cm-order-trade",
      "name": "Modify CM Order (TRADE)"
    },
    {
      "description": "Cancel an active UM LIMIT order",
      "securityType": "TRADE",
      "request": "DELETE /papi/v1/um/order",
      "requestMethod": "DELETE",
      "requestEndPoint": "/papi/v1/um/order",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "avgPrice": "NumberString",
              "clientOrderId": "string",
              "cumQty": "NumberString",
              "cumQuote": "NumberString",
              "executedQty": "NumberString",
              "orderId": "number",
              "origQty": "NumberString",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "status": "string",
              "symbol": "string",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "updateTime": "number",
              "selfTradePreventionMode": "string", //self trading preventation mode
              "goodTillDate": "number"
            }
          ],
          "responseExamples": [
            {
              "avgPrice": "0.00000",
              "clientOrderId": "myOrder1",
              "cumQty": "0",
              "cumQuote": "0",
              "executedQty": "0",
              "orderId": 4611875134427365000,
              "origQty": "0.40",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "status": "CANCELED",
              "symbol": "BTCUSDT",
              "timeInForce": "GTC",
              "type": "LIMIT",
              "updateTime": 1571110484038,
              "selfTradePreventionMode": "NONE", //self trading preventation mode
              "goodTillDate": 0
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Cancel Order",
      "path": "toc.cancel-order.cancel-um-order-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#cancel-um-order-trade",
      "name": "Cancel UM Order (TRADE)"
    },
    {
      "description": "Cancel all active LIMIT orders on specific symbol",
      "securityType": "TRADE",
      "request": "DELETE /papi/v1/um/allOpenOrders",
      "requestMethod": "DELETE",
      "requestEndPoint": "/papi/v1/um/allOpenOrders",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "code": 200,
              "msg": "The operation of cancel all open order is done."
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Cancel Order",
      "path": "toc.cancel-order.cancel-all-um-open-orders-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#cancel-all-um-open-orders-trade",
      "name": "Cancel All UM Open Orders (TRADE)"
    },
    {
      "description": "Cancel an active LIMIT order",
      "securityType": "TRADE",
      "request": "DELETE /papi/v1/cm/order",
      "requestMethod": "DELETE",
      "requestEndPoint": "/papi/v1/cm/order",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "avgPrice": "NumberString",
              "clientOrderId": "string",
              "cumQty": "NumberString",
              "cumBase": "NumberString",
              "executedQty": "NumberString",
              "orderId": "number",
              "origQty": "NumberString",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "status": "string",
              "symbol": "string",
              "pair": "string",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "updateTime": "number"
            }
          ],
          "responseExamples": [
            {
              "avgPrice": "0.0",
              "clientOrderId": "myOrder1",
              "cumQty": "0",
              "cumBase": "0",
              "executedQty": "0",
              "orderId": 283194212,
              "origQty": "2",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "status": "CANCELED",
              "symbol": "BTCUSD_200925",
              "pair": "BTCUSD",
              "timeInForce": "GTC",
              "type": "LIMIT",
              "updateTime": 1571110484038
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Cancel Order",
      "path": "toc.cancel-order.cancel-cm-order-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#cancel-cm-order-trade",
      "name": "Cancel CM Order (TRADE)"
    },
    {
      "description": "Cancel all active LIMIT orders on specific symbol",
      "securityType": "TRADE",
      "request": "DELETE /papi/v1/cm/allOpenOrders",
      "requestMethod": "DELETE",
      "requestEndPoint": "/papi/v1/cm/allOpenOrders",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "code": 200,
              "msg": "The operation of cancel all open order is done."
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Cancel Order",
      "path": "toc.cancel-order.cancel-all-cm-open-orders-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#cancel-all-cm-open-orders-trade",
      "name": "Cancel All CM Open Orders (TRADE)"
    },
    {
      "description": "Cancel Margin Account Order",
      "securityType": "TRADE",
      "request": "DELETE /papi/v1/margin/order",
      "requestMethod": "DELETE",
      "requestEndPoint": "/papi/v1/margin/order",
      "hmacSHA256": true,
      "weights": {
        "IP": 2,
        "IP_text": "2"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "newClientOrderId": {
          "name": "newClientOrderId",
          "type": "string",
          "required": false,
          "description": "Used to uniquely identify this cancel. Automatically generated by default."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "newClientOrderId": {
              "name": "newClientOrderId",
              "type": "string",
              "required": false,
              "description": "Used to uniquely identify this cancel. Automatically generated by default."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "orderId": "number",
              "origClientOrderId": "string",
              "clientOrderId": "string",
              "price": "NumberString",
              "origQty": "NumberString",
              "executedQty": "NumberString",
              "cummulativeQuoteQty": "NumberString",
              "status": "string",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "side": "OrderSide",
              "selfTradePreventionMode": "string"
            }
          ],
          "responseExamples": [
            {
              "symbol": "LTCBTC",
              "orderId": 28,
              "origClientOrderId": "myOrder1",
              "clientOrderId": "cancelMyOrder1",
              "price": "1.00000000",
              "origQty": "10.00000000",
              "executedQty": "8.00000000",
              "cummulativeQuoteQty": "8.00000000",
              "status": "CANCELED",
              "timeInForce": "GTC",
              "type": "LIMIT",
              "side": "SELL",
              "selfTradePreventionMode": "EXPIRE_TAKER"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Cancel Order",
      "path": "toc.cancel-order.cancel-margin-account-order-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#cancel-margin-account-order-trade",
      "name": "Cancel Margin Account Order (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "DELETE /papi/v1/margin/allOpenOrders",
      "requestMethod": "DELETE",
      "requestEndPoint": "/papi/v1/margin/allOpenOrders",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "origClientOrderId": "string",
                "orderId": "number",
                "orderListId": "number",
                "clientOrderId": "string",
                "price": "NumberString",
                "origQty": "NumberString",
                "executedQty": "NumberString",
                "cummulativeQuoteQty": "NumberString",
                "status": "string",
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "side": "OrderSide"
              },
              {
                "orderListId": "number",
                "contingencyType": "string",
                "listStatusType": "OCOStatus",
                "listOrderStatus": "OCOOrderStatus",
                "listClientOrderId": "string",
                "transactionTime": "number",
                "symbol": "string",
                "orders": [
                  {
                    "symbol": "string",
                    "orderId": "number",
                    "clientOrderId": "string"
                  },
                  null
                ],
                "orderReports": [
                  {
                    "symbol": "string",
                    "origClientOrderId": "string",
                    "orderId": "number",
                    "orderListId": "number",
                    "clientOrderId": "string",
                    "price": "NumberString",
                    "origQty": "NumberString",
                    "executedQty": "NumberString",
                    "cummulativeQuoteQty": "NumberString",
                    "status": "string",
                    "timeInForce": "TimeInForce",
                    "type": "OrderType",
                    "side": "OrderSide",
                    "stopPrice": "NumberString",
                    "icebergQty": "NumberString",
                    "selfTradePreventionMode": "string"
                  },
                  {
                    "symbol": "string",
                    "origClientOrderId": "string",
                    "orderId": "number",
                    "orderListId": "number",
                    "clientOrderId": "string",
                    "price": "NumberString",
                    "origQty": "NumberString",
                    "executedQty": "NumberString",
                    "cummulativeQuoteQty": "NumberString",
                    "status": "string",
                    "timeInForce": "TimeInForce",
                    "type": "OrderType",
                    "side": "OrderSide",
                    "icebergQty": "NumberString",
                    "selfTradePreventionMode": "string"
                  }
                ]
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSDT",
                "origClientOrderId": "E6APeyTJvkMvLMYMqu1KQ4",
                "orderId": 11,
                "orderListId": -1,
                "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                "price": "0.089853",
                "origQty": "0.178622",
                "executedQty": "0.000000",
                "cummulativeQuoteQty": "0.000000",
                "status": "CANCELED",
                "timeInForce": "GTC",
                "type": "LIMIT",
                "side": "BUY"
              },
              {
                "orderListId": 1929,
                "contingencyType": "OCO",
                "listStatusType": "ALL_DONE",
                "listOrderStatus": "ALL_DONE",
                "listClientOrderId": "2inzWQdDvZLHbbAmAozX2N",
                "transactionTime": 1585230948299,
                "symbol": "BTCUSDT",
                "orders": [
                  {
                    "symbol": "BTCUSDT",
                    "orderId": 20,
                    "clientOrderId": "CwOOIPHSmYywx6jZX77TdL"
                  },
                  {
                    "symbol": "BTCUSDT",
                    "orderId": 21,
                    "clientOrderId": "461cPg51vQjV3zIMOXNz39"
                  }
                ],
                "orderReports": [
                  {
                    "symbol": "BTCUSDT",
                    "origClientOrderId": "CwOOIPHSmYywx6jZX77TdL",
                    "orderId": 20,
                    "orderListId": 1929,
                    "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                    "price": "0.668611",
                    "origQty": "0.690354",
                    "executedQty": "0.000000",
                    "cummulativeQuoteQty": "0.000000",
                    "status": "CANCELED",
                    "timeInForce": "GTC",
                    "type": "STOP_LOSS_LIMIT",
                    "side": "BUY",
                    "stopPrice": "0.378131",
                    "icebergQty": "0.017083",
                    "selfTradePreventionMode": "EXPIRE_TAKER"
                  },
                  {
                    "symbol": "BTCUSDT",
                    "origClientOrderId": "461cPg51vQjV3zIMOXNz39",
                    "orderId": 21,
                    "orderListId": 1929,
                    "clientOrderId": "pXLV6Hz6mprAcVYpVMTGgx",
                    "price": "0.008791",
                    "origQty": "0.690354",
                    "executedQty": "0.000000",
                    "cummulativeQuoteQty": "0.000000",
                    "status": "CANCELED",
                    "timeInForce": "GTC",
                    "type": "LIMIT_MAKER",
                    "side": "BUY",
                    "icebergQty": "0.639962",
                    "selfTradePreventionMode": "EXPIRE_TAKER"
                  }
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Cancel Order",
      "path": "toc.cancel-order.cancel-margin-account-all-open-orders-on-a-symbol-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#cancel-margin-account-all-open-orders-on-a-symbol-trade",
      "name": "Cancel Margin Account All Open Orders on a Symbol (TRADE)"
    },
    {
      "description": "Cancel Margin Account OCO Orders",
      "securityType": "TRADE",
      "request": "DELETE /papi/v1/margin/orderList",
      "requestMethod": "DELETE",
      "requestEndPoint": "/papi/v1/margin/orderList",
      "hmacSHA256": true,
      "weights": {
        "IP": 2,
        "IP_text": "2"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderListId": {
          "name": "orderListId",
          "type": "LONG",
          "required": false,
          "description": "Either orderListId or listClientOrderId must be provided"
        },
        "listClientOrderId": {
          "name": "listClientOrderId",
          "type": "string",
          "required": false,
          "description": "Either orderListId or listClientOrderId must be provided"
        },
        "newClientOrderId": {
          "name": "newClientOrderId",
          "type": "string",
          "required": false,
          "description": "Used to uniquely identify this cancel. Automatically generated by default"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderListId": {
              "name": "orderListId",
              "type": "LONG",
              "required": false,
              "description": "Either orderListId or listClientOrderId must be provided"
            },
            "listClientOrderId": {
              "name": "listClientOrderId",
              "type": "string",
              "required": false,
              "description": "Either orderListId or listClientOrderId must be provided"
            },
            "newClientOrderId": {
              "name": "newClientOrderId",
              "type": "string",
              "required": false,
              "description": "Used to uniquely identify this cancel. Automatically generated by default"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderListId": "number",
              "contingencyType": "string",
              "listStatusType": "OCOStatus",
              "listOrderStatus": "OCOOrderStatus",
              "listClientOrderId": "string",
              "transactionTime": "number",
              "symbol": "string",
              "orders": [
                {
                  "symbol": "string",
                  "orderId": "number",
                  "clientOrderId": "string"
                },
                null
              ],
              "orderReports": [
                {
                  "symbol": "string",
                  "origClientOrderId": "string",
                  "orderId": "number",
                  "orderListId": "number",
                  "clientOrderId": "string",
                  "price": "NumberString",
                  "origQty": "NumberString",
                  "executedQty": "NumberString",
                  "cummulativeQuoteQty": "NumberString",
                  "status": "string",
                  "timeInForce": "TimeInForce",
                  "type": "OrderType",
                  "side": "OrderSide",
                  "stopPrice": "NumberString",
                  "selfTradePreventionMode": "string"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "orderListId": 0,
              "contingencyType": "OCO",
              "listStatusType": "ALL_DONE",
              "listOrderStatus": "ALL_DONE",
              "listClientOrderId": "C3wyj4WVEktd7u9aVBRXcN",
              "transactionTime": 1574040868128,
              "symbol": "LTCBTC",
              "orders": [
                {
                  "symbol": "LTCBTC",
                  "orderId": 2,
                  "clientOrderId": "pO9ufTiFGg3nw2fOdgeOXa"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 3,
                  "clientOrderId": "TXOvglzXuaubXAaENpaRCB"
                }
              ],
              "orderReports": [
                {
                  "symbol": "LTCBTC",
                  "origClientOrderId": "pO9ufTiFGg3nw2fOdgeOXa",
                  "orderId": 2,
                  "orderListId": 0,
                  "clientOrderId": "unfWT8ig8i0uj6lPuYLez6",
                  "price": "1.00000000",
                  "origQty": "10.00000000",
                  "executedQty": "0.00000000",
                  "cummulativeQuoteQty": "0.00000000",
                  "status": "CANCELED",
                  "timeInForce": "GTC",
                  "type": "STOP_LOSS_LIMIT",
                  "side": "SELL",
                  "stopPrice": "1.00000000",
                  "selfTradePreventionMode": "EXPIRE_BOTH"
                },
                {
                  "symbol": "LTCBTC",
                  "origClientOrderId": "TXOvglzXuaubXAaENpaRCB",
                  "orderId": 3,
                  "orderListId": 0,
                  "clientOrderId": "unfWT8ig8i0uj6lPuYLez6",
                  "price": "3.00000000",
                  "origQty": "10.00000000",
                  "executedQty": "0.00000000",
                  "cummulativeQuoteQty": "0.00000000",
                  "status": "CANCELED",
                  "timeInForce": "GTC",
                  "type": "LIMIT_MAKER",
                  "side": "SELL",
                  "stopPrice": "1.00000000",
                  "selfTradePreventionMode": "EXPIRE_BOTH"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Cancel Order",
      "path": "toc.cancel-order.cancel-margin-account-oco-orders-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#cancel-margin-account-oco-orders-trade",
      "name": "Cancel Margin Account OCO Orders(TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "DELETE /papi/v1/um/conditional/order",
      "requestMethod": "DELETE",
      "requestEndPoint": "/papi/v1/um/conditional/order",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "strategyId": {
          "name": "strategyId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "newClientStrategyId": {
          "name": "newClientStrategyId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "strategyId": {
              "name": "strategyId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "newClientStrategyId": {
              "name": "newClientStrategyId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "newClientStrategyId": "string",
              "strategyId": "number",
              "strategyStatus": "string",
              "strategyType": "string",
              "origQty": "NumberString",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
              "symbol": "string",
              "timeInForce": "TimeInForce",
              "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
              "bookTime": "number",
              "updateTime": "number",
              "workingType": "WorkingType",
              "priceProtect": "boolean",
              "selfTradePreventionMode": "string", //self trading preventation mode
              "goodTillDate": "number"
            }
          ],
          "responseExamples": [
            {
              "newClientStrategyId": "myOrder1",
              "strategyId": 123445,
              "strategyStatus": "CANCELED",
              "strategyType": "TRAILING_STOP_MARKET",
              "origQty": "11",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
              "symbol": "BTCUSDT",
              "timeInForce": "GTC",
              "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
              "bookTime": 1566818724710,
              "updateTime": 1566818724722,
              "workingType": "CONTRACT_PRICE",
              "priceProtect": false,
              "selfTradePreventionMode": "NONE", //self trading preventation mode
              "goodTillDate": 0
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Cancel Order",
      "path": "toc.cancel-order.cancel-um-conditional-order-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#cancel-um-conditional-order-trade",
      "name": "Cancel UM Conditional Order (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "DELETE /papi/v1/um/conditional/allOpenOrders",
      "requestMethod": "DELETE",
      "requestEndPoint": "/papi/v1/um/conditional/allOpenOrders",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "NumberString",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "code": "200",
              "msg": "The operation of cancel all conditional open order is done."
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Cancel Order",
      "path": "toc.cancel-order.cancel-all-um-open-conditional-orders-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#cancel-all-um-open-conditional-orders-trade",
      "name": "Cancel All UM Open Conditional Orders (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "DELETE /papi/v1/cm/conditional/order",
      "requestMethod": "DELETE",
      "requestEndPoint": "/papi/v1/cm/conditional/order",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "strategyId": {
          "name": "strategyId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "newClientStrategyId": {
          "name": "newClientStrategyId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "strategyId": {
              "name": "strategyId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "newClientStrategyId": {
              "name": "newClientStrategyId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "newClientStrategyId": "string",
              "strategyId": "number",
              "strategyStatus": "string",
              "strategyType": "string",
              "origQty": "NumberString",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
              "symbol": "string",
              "timeInForce": "TimeInForce",
              "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
              "bookTime": "number",
              "updateTime": "number",
              "workingType": "WorkingType",
              "priceProtect": "boolean"
            }
          ],
          "responseExamples": [
            {
              "newClientStrategyId": "myOrder1",
              "strategyId": 123445,
              "strategyStatus": "CANCELED",
              "strategyType": "TRAILING_STOP_MARKET",
              "origQty": "11",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
              "symbol": "BTCUSD",
              "timeInForce": "GTC",
              "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
              "bookTime": 1566818724710,
              "updateTime": 1566818724722,
              "workingType": "CONTRACT_PRICE",
              "priceProtect": false
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Cancel Order",
      "path": "toc.cancel-order.cancel-cm-conditional-order-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#cancel-cm-conditional-order-trade",
      "name": "Cancel CM Conditional Order (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "DELETE /papi/v1/cm/conditional/allOpenOrders",
      "requestMethod": "DELETE",
      "requestEndPoint": "/papi/v1/cm/conditional/allOpenOrders",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "NumberString",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "code": "200",
              "msg": "The operation of cancel all conditional open order is done."
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Cancel Order",
      "path": "toc.cancel-order.cancel-all-cm-open-conditional-orders-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#cancel-all-cm-open-conditional-orders-trade",
      "name": "Cancel All CM Open Conditional Orders (TRADE)"
    },
    {
      "description": "Check an UM order's status.",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/um/order",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/order",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "avgPrice": "NumberString",
              "clientOrderId": "string",
              "cumQuote": "NumberString",
              "executedQty": "NumberString",
              "orderId": "number",
              "origQty": "NumberString",
              "origType": "string",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "status": "string",
              "symbol": "string",
              "time": "number", // order time
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "updateTime": "number", // update time
              "selfTradePreventionMode": "string", //self trading preventation mode
              "goodTillDate": "number"
            }
          ],
          "responseExamples": [
            {
              "avgPrice": "0.00000",
              "clientOrderId": "abc",
              "cumQuote": "0",
              "executedQty": "0",
              "orderId": 1917641,
              "origQty": "0.40",
              "origType": "LIMIT",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "status": "NEW",
              "symbol": "BTCUSDT",
              "time": 1579276756075, // order time
              "timeInForce": "GTC",
              "type": "LIMIT",
              "updateTime": 1579276756075, // update time
              "selfTradePreventionMode": "NONE", //self trading preventation mode
              "goodTillDate": 0
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-um-order-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-um-order-user_data",
      "name": "Query UM Order (USER_DATA)"
    },
    {
      "description": "Query current UM open order",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/um/openOrder",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/openOrder",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "avgPrice": "NumberString",
              "clientOrderId": "string",
              "cumQuote": "NumberString",
              "executedQty": "NumberString",
              "orderId": "number",
              "origQty": "NumberString",
              "origType": "string",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "status": "string",
              "symbol": "string",
              "time": "number", // order time
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "updateTime": "number",
              "selfTradePreventionMode": "string", //self trading preventation mode
              "goodTillDate": "number"
            }
          ],
          "responseExamples": [
            {
              "avgPrice": "0.00000",
              "clientOrderId": "abc",
              "cumQuote": "0",
              "executedQty": "0",
              "orderId": 1917641,
              "origQty": "0.40",
              "origType": "LIMIT",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "status": "NEW",
              "symbol": "BTCUSDT",
              "time": 1579276756075, // order time
              "timeInForce": "GTC",
              "type": "LIMIT",
              "updateTime": 1579276756075,
              "selfTradePreventionMode": "NONE", //self trading preventation mode
              "goodTillDate": 0
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-current-um-open-order-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-current-um-open-order-user_data",
      "name": "Query Current UM Open Order (USER_DATA)"
    },
    {
      "description": "Notes:\n* If the symbol is not sent, orders for all symbols will be returned in an array.",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/um/openOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/openOrders",
      "hmacSHA256": true,
      "weights": {
        "IP_text": "1 for a single symbol; 40 when the symbol parameter is omitted"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "avgPrice": "NumberString",
                "clientOrderId": "string",
                "cumQuote": "NumberString",
                "executedQty": "NumberString",
                "orderId": "number",
                "origQty": "NumberString",
                "origType": "string",
                "price": "NumberString",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "status": "string",
                "symbol": "string",
                "time": "number", // order time
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "updateTime": "number", // update time
                "selfTradePreventionMode": "string", //self trading preventation mode
                "goodTillDate": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "avgPrice": "0.00000",
                "clientOrderId": "abc",
                "cumQuote": "0",
                "executedQty": "0",
                "orderId": 1917641,
                "origQty": "0.40",
                "origType": "LIMIT",
                "price": "0",
                "reduceOnly": false,
                "side": "BUY",
                "positionSide": "SHORT",
                "status": "NEW",
                "symbol": "BTCUSDT",
                "time": 1579276756075, // order time
                "timeInForce": "GTC",
                "type": "LIMIT",
                "updateTime": 1579276756075, // update time
                "selfTradePreventionMode": "NONE", //self trading preventation mode
                "goodTillDate": 0
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-all-current-um-open-orders-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-all-current-um-open-orders-user_data",
      "name": "Query All Current UM Open Orders (USER_DATA)"
    },
    {
      "description": "Get all account UM orders; active, canceled, or filled.",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/um/allOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/allOrders",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "avgPrice": "NumberString",
                "clientOrderId": "string",
                "cumQuote": "NumberString",
                "executedQty": "NumberString",
                "orderId": "number",
                "origQty": "NumberString",
                "origType": "string",
                "price": "NumberString",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "status": "string",
                "symbol": "string",
                "time": "number", // order time
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "updateTime": "number", // update time
                "selfTradePreventionMode": "string", //self trading preventation mode
                "goodTillDate": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "avgPrice": "0.00000",
                "clientOrderId": "abc",
                "cumQuote": "0",
                "executedQty": "0",
                "orderId": 1917641,
                "origQty": "0.40",
                "origType": "LIMIT",
                "price": "0",
                "reduceOnly": false,
                "side": "BUY",
                "positionSide": "SHORT",
                "status": "NEW",
                "symbol": "BTCUSDT",
                "time": 1579276756075, // order time
                "timeInForce": "GTC",
                "type": "LIMIT",
                "updateTime": 1579276756075, // update time
                "selfTradePreventionMode": "NONE", //self trading preventation mode
                "goodTillDate": 0
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-all-um-orders-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-all-um-orders-user_data",
      "name": "Query All UM Orders (USER_DATA)"
    },
    {
      "description": "Check an CM order's status.",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/cm/order",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/cm/order",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "avgPrice": "NumberString",
              "clientOrderId": "string",
              "cumBase": "NumberString",
              "executedQty": "NumberString",
              "orderId": "number",
              "origQty": "NumberString",
              "origType": "string",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "status": "string",
              "symbol": "string",
              "pair": "string",
              "positionSide": "PositionSide",
              "time": "number", // order time
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "updateTime": "number" // update time
            }
          ],
          "responseExamples": [
            {
              "avgPrice": "0.0",
              "clientOrderId": "abc",
              "cumBase": "0",
              "executedQty": "0",
              "orderId": 1917641,
              "origQty": "0.40",
              "origType": "LIMIT",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "status": "NEW",
              "symbol": "BTCUSD_200925",
              "pair": "BTCUSD",
              "positionSide": "SHORT",
              "time": 1579276756075, // order time
              "timeInForce": "GTC",
              "type": "LIMIT",
              "updateTime": 1579276756075 // update time
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-cm-order-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-cm-order-user_data",
      "name": "Query CM Order (USER_DATA)"
    },
    {
      "description": "Query current CM open order",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/cm/openOrder",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/cm/openOrder",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "avgPrice": "NumberString",
              "clientOrderId": "string",
              "cumBase": "NumberString",
              "executedQty": "NumberString",
              "orderId": "number",
              "origQty": "NumberString",
              "origType": "string",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "status": "string",
              "symbol": "string",
              "pair": "string",
              "time": "number", // order time
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "updateTime": "number" // update time
            }
          ],
          "responseExamples": [
            {
              "avgPrice": "0.0",
              "clientOrderId": "abc",
              "cumBase": "0",
              "executedQty": "0",
              "orderId": 1917641,
              "origQty": "0.40",
              "origType": "LIMIT",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "status": "NEW",
              "symbol": "BTCUSD_200925",
              "pair": "BTCUSD",
              "time": 1579276756075, // order time
              "timeInForce": "GTC",
              "type": "LIMIT",
              "updateTime": 1579276756075 // update time
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-current-cm-open-order-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-current-cm-open-order-user_data",
      "name": "Query Current CM Open Order (USER_DATA)"
    },
    {
      "description": "Notes: \n* If the symbol is not sent, orders for all symbols will be returned in an array.",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/cm/openOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/cm/openOrders",
      "hmacSHA256": true,
      "weights": {
        "IP_text": "1 for a single symbol; 40 when the symbol parameter is omitted"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "pair": {
          "name": "pair",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "pair": {
              "name": "pair",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "avgPrice": "NumberString",
                "clientOrderId": "string",
                "cumBase": "NumberString",
                "executedQty": "NumberString",
                "orderId": "number",
                "origQty": "NumberString",
                "origType": "string",
                "price": "NumberString",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "status": "string",
                "symbol": "string",
                "pair": "string",
                "time": "number", // order time
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "updateTime": "number" // update time
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "avgPrice": "0.0",
                "clientOrderId": "abc",
                "cumBase": "0",
                "executedQty": "0",
                "orderId": 1917641,
                "origQty": "0.40",
                "origType": "LIMIT",
                "price": "0",
                "reduceOnly": false,
                "side": "BUY",
                "positionSide": "SHORT",
                "status": "NEW",
                "symbol": "BTCUSD_200925",
                "pair": "BTCUSD",
                "time": 1579276756075, // order time
                "timeInForce": "GTC",
                "type": "LIMIT",
                "updateTime": 1579276756075 // update time
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-all-current-cm-open-orders-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-all-current-cm-open-orders-user_data",
      "name": "Query All Current CM Open Orders (USER_DATA)"
    },
    {
      "description": "Get all account CM orders; active, canceled, or filled.",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/cm/allOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/cm/allOrders",
      "hmacSHA256": true,
      "weights": {
        "IP_text": "20 with symbol 40 with pair"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "pair": {
          "name": "pair",
          "type": "string",
          "required": false,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 50; max 100."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "pair": {
              "name": "pair",
              "type": "string",
              "required": false,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 50; max 100."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "avgPrice": "NumberString",
                "clientOrderId": "string",
                "cumBase": "NumberString",
                "executedQty": "NumberString",
                "orderId": "number",
                "origQty": "NumberString",
                "origType": "string",
                "price": "NumberString",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "status": "string",
                "symbol": "string",
                "pair": "string",
                "time": "number", // order time
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "updateTime": "number" // update time
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "avgPrice": "0.0",
                "clientOrderId": "abc",
                "cumBase": "0",
                "executedQty": "0",
                "orderId": 1917641,
                "origQty": "0.40",
                "origType": "LIMIT",
                "price": "0",
                "reduceOnly": false,
                "side": "BUY",
                "positionSide": "SHORT",
                "status": "NEW",
                "symbol": "BTCUSD_200925",
                "pair": "BTCUSD",
                "time": 1579276756075, // order time
                "timeInForce": "GTC",
                "type": "LIMIT",
                "updateTime": 1579276756075 // update time
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-all-cm-orders-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-all-cm-orders-user_data",
      "name": "Query All CM Orders (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/um/conditional/openOrder",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/conditional/openOrder",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "strategyId": {
          "name": "strategyId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "newClientStrategyId": {
          "name": "newClientStrategyId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "strategyId": {
              "name": "strategyId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "newClientStrategyId": {
              "name": "newClientStrategyId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "newClientStrategyId": "string",
              "strategyId": "number",
              "strategyStatus": "string",
              "strategyType": "string",
              "origQty": "NumberString",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
              "symbol": "string",
              "bookTime": "number", // order time
              "updateTime": "number",
              "timeInForce": "TimeInForce",
              "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
              "selfTradePreventionMode": "string", //self trading preventation mode
              "goodTillDate": "number"
            }
          ],
          "responseExamples": [
            {
              "newClientStrategyId": "abc",
              "strategyId": 123445,
              "strategyStatus": "NEW",
              "strategyType": "TRAILING_STOP_MARKET",
              "origQty": "0.40",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
              "symbol": "BTCUSDT",
              "bookTime": 1566818724710, // order time
              "updateTime": 1566818724722,
              "timeInForce": "GTC",
              "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
              "selfTradePreventionMode": "NONE", //self trading preventation mode
              "goodTillDate": 0
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-current-um-open-conditional-order-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-current-um-open-conditional-order-user_data",
      "name": "Query Current UM Open Conditional Order (USER_DATA)"
    },
    {
      "description": "Notes:\n* If the symbol is not sent, orders for all symbols will be returned in an array.",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/um/conditional/openOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/conditional/openOrders",
      "hmacSHA256": true,
      "weights": {
        "IP_text": "1 for a single symbol; 40 when the symbol parameter is omitted"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "newClientStrategyId": "string",
                "strategyId": "number",
                "strategyStatus": "string",
                "strategyType": "string",
                "origQty": "NumberString",
                "price": "NumberString",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
                "symbol": "string",
                "bookTime": "number", // order time
                "updateTime": "number",
                "timeInForce": "TimeInForce",
                "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
                "selfTradePreventionMode": "string", //self trading preventation mode
                "goodTillDate": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "newClientStrategyId": "abc",
                "strategyId": 123445,
                "strategyStatus": "NEW",
                "strategyType": "TRAILING_STOP_MARKET",
                "origQty": "0.40",
                "price": "0",
                "reduceOnly": false,
                "side": "BUY",
                "positionSide": "SHORT",
                "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
                "symbol": "BTCUSDT",
                "bookTime": 1566818724710, // order time
                "updateTime": 1566818724722,
                "timeInForce": "GTC",
                "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
                "selfTradePreventionMode": "NONE", //self trading preventation mode
                "goodTillDate": 0
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-all-current-um-open-conditional-orders-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-all-current-um-open-conditional-orders-user_data",
      "name": "Query All Current UM Open Conditional Orders (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/um/conditional/orderHistory",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/conditional/orderHistory",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "strategyId": {
          "name": "strategyId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "newClientStrategyId": {
          "name": "newClientStrategyId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "strategyId": {
              "name": "strategyId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "newClientStrategyId": {
              "name": "newClientStrategyId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "newClientStrategyId": "string",
              "strategyId": "number",
              "strategyStatus": "string",
              "strategyType": "string",
              "origQty": "NumberString",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
              "symbol": "string",
              "orderId": "number", //Normal orderID after trigger if appliable,only have when the strategy is triggered
              "status": "string", //Normal order status after trigger if appliable, only have when the strategy is triggered
              "bookTime": "number", // order time
              "updateTime": "number",
              "triggerTime": "number",
              "timeInForce": "TimeInForce",
              "type": "OrderType", //Normal order type after trigger if appliable
              "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
              "workingType": "WorkingType",
              "priceProtect": "boolean",
              "selfTradePreventionMode": "string", //self trading preventation mode
              "goodTillDate": "number"
            }
          ],
          "responseExamples": [
            {
              "newClientStrategyId": "abc",
              "strategyId": 123445,
              "strategyStatus": "TRIGGERED",
              "strategyType": "TRAILING_STOP_MARKET",
              "origQty": "0.40",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
              "symbol": "BTCUSDT",
              "orderId": 12132343435, //Normal orderID after trigger if appliable,only have when the strategy is triggered
              "status": "NEW", //Normal order status after trigger if appliable, only have when the strategy is triggered
              "bookTime": 1566818724710, // order time
              "updateTime": 1566818724722,
              "triggerTime": 1566818724750,
              "timeInForce": "GTC",
              "type": "MARKET", //Normal order type after trigger if appliable
              "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
              "workingType": "CONTRACT_PRICE",
              "priceProtect": false,
              "selfTradePreventionMode": "NONE", //self trading preventation mode
              "goodTillDate": 0
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-um-conditional-order-history-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-um-conditional-order-history-user_data",
      "name": "Query UM Conditional Order History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/um/conditional/allOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/conditional/allOrders",
      "hmacSHA256": true,
      "weights": {
        "IP_text": "1 for a single symbol; 40 when the symbol parameter is omitted"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "strategyId": {
          "name": "strategyId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "strategyId": {
              "name": "strategyId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "newClientStrategyId": "string",
                "strategyId": "number",
                "strategyStatus": "string",
                "strategyType": "string",
                "origQty": "NumberString",
                "price": "NumberString",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
                "symbol": "string",
                "orderId": "number", //Normal orderID after trigger if appliable, only have when the strategy is triggered
                "status": "string", //Normal order status after trigger if appliable, only have when the strategy is triggered
                "bookTime": "number", // order time
                "updateTime": "number",
                "triggerTime": "number",
                "timeInForce": "TimeInForce",
                "type": "OrderType", //Normal order type after trigger if appliable
                "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
                "selfTradePreventionMode": "string", //self trading preventation mode
                "goodTillDate": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "newClientStrategyId": "abc",
                "strategyId": 123445,
                "strategyStatus": "TRIGGERED",
                "strategyType": "TRAILING_STOP_MARKET",
                "origQty": "0.40",
                "price": "0",
                "reduceOnly": false,
                "side": "BUY",
                "positionSide": "SHORT",
                "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
                "symbol": "BTCUSDT",
                "orderId": 12132343435, //Normal orderID after trigger if appliable, only have when the strategy is triggered
                "status": "NEW", //Normal order status after trigger if appliable, only have when the strategy is triggered
                "bookTime": 1566818724710, // order time
                "updateTime": 1566818724722,
                "triggerTime": 1566818724750,
                "timeInForce": "GTC",
                "type": "MARKET", //Normal order type after trigger if appliable
                "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
                "selfTradePreventionMode": "NONE", //self trading preventation mode
                "goodTillDate": 0
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-all-um-conditional-orders-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-all-um-conditional-orders-user_data",
      "name": "Query All UM Conditional Orders (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/cm/conditional/openOrder",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/cm/conditional/openOrder",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "strategyId": {
          "name": "strategyId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "newClientStrategyId": {
          "name": "newClientStrategyId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "strategyId": {
              "name": "strategyId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "newClientStrategyId": {
              "name": "newClientStrategyId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "newClientStrategyId": "string",
              "strategyId": "number",
              "strategyStatus": "string",
              "strategyType": "string",
              "origQty": "NumberString",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
              "symbol": "string",
              "bookTime": "number", // order time
              "updateTime": "number",
              "timeInForce": "TimeInForce",
              "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "NumberString" // callback rate, only return with TRAILING_STOP_MARKET order
            }
          ],
          "responseExamples": [
            {
              "newClientStrategyId": "abc",
              "strategyId": 123445,
              "strategyStatus": "NEW",
              "strategyType": "TRAILING_STOP_MARKET",
              "origQty": "0.40",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
              "symbol": "BTCUSD",
              "bookTime": 1566818724710, // order time
              "updateTime": 1566818724722,
              "timeInForce": "GTC",
              "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "0.3" // callback rate, only return with TRAILING_STOP_MARKET order
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-current-cm-open-conditional-order-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-current-cm-open-conditional-order-user_data",
      "name": "Query Current CM Open Conditional Order (USER_DATA)"
    },
    {
      "description": "Notes:\n* If the symbol is not sent, orders for all symbols will be returned in an array.",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/cm/conditional/openOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/cm/conditional/openOrders",
      "hmacSHA256": true,
      "weights": {
        "IP_text": "1 for a single symbol; 40 when the symbol parameter is omitted"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "newClientStrategyId": "string",
                "strategyId": "number",
                "strategyStatus": "string",
                "strategyType": "string",
                "origQty": "NumberString",
                "price": "NumberString",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
                "symbol": "string",
                "bookTime": "number", // order time
                "updateTime": "number",
                "timeInForce": "TimeInForce",
                "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "NumberString" // callback rate, only return with TRAILING_STOP_MARKET order
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "newClientStrategyId": "abc",
                "strategyId": 123445,
                "strategyStatus": "NEW",
                "strategyType": "TRAILING_STOP_MARKET",
                "origQty": "0.40",
                "price": "0",
                "reduceOnly": false,
                "side": "BUY",
                "positionSide": "SHORT",
                "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
                "symbol": "BTCUSD",
                "bookTime": 1566818724710, // order time
                "updateTime": 1566818724722,
                "timeInForce": "GTC",
                "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "0.3" // callback rate, only return with TRAILING_STOP_MARKET order
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-all-current-cm-open-conditional-orders-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-all-current-cm-open-conditional-orders-user_data",
      "name": "Query All Current CM Open Conditional Orders (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/cm/conditional/orderHistory",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/cm/conditional/orderHistory",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "strategyId": {
          "name": "strategyId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "newClientStrategyId": {
          "name": "newClientStrategyId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "strategyId": {
              "name": "strategyId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "newClientStrategyId": {
              "name": "newClientStrategyId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "newClientStrategyId": "string",
              "strategyId": "number",
              "strategyStatus": "string",
              "strategyType": "string",
              "origQty": "NumberString",
              "price": "NumberString",
              "reduceOnly": "boolean",
              "side": "OrderSide",
              "positionSide": "PositionSide",
              "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
              "symbol": "string",
              "orderId": "number", //Normal orderID after trigger if appliable,only have when the strategy is triggered
              "status": "string", //Normal order status after trigger if appliable, only have when the strategy is triggered
              "bookTime": "number", // order time
              "updateTime": "number",
              "triggerTime": "number",
              "timeInForce": "TimeInForce",
              "type": "OrderType", //Normal order type after trigger if appliable
              "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "NumberString", // callback rate, only return with TRAILING_STOP_MARKET order
              "workingType": "WorkingType",
              "priceProtect": "boolean"
            }
          ],
          "responseExamples": [
            {
              "newClientStrategyId": "abc",
              "strategyId": 123445,
              "strategyStatus": "TRIGGERED",
              "strategyType": "TRAILING_STOP_MARKET",
              "origQty": "0.40",
              "price": "0",
              "reduceOnly": false,
              "side": "BUY",
              "positionSide": "SHORT",
              "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
              "symbol": "BTCUSD",
              "orderId": 12123343534, //Normal orderID after trigger if appliable,only have when the strategy is triggered
              "status": "NEW", //Normal order status after trigger if appliable, only have when the strategy is triggered
              "bookTime": 1566818724710, // order time
              "updateTime": 1566818724722,
              "triggerTime": 1566818724750,
              "timeInForce": "GTC",
              "type": "MARKET", //Normal order type after trigger if appliable
              "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
              "priceRate": "0.3", // callback rate, only return with TRAILING_STOP_MARKET order
              "workingType": "CONTRACT_PRICE",
              "priceProtect": false
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-cm-conditional-order-history-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-cm-conditional-order-history-user_data",
      "name": "Query CM Conditional Order History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/cm/conditional/allOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/cm/conditional/allOrders",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "1 for a single symbol; 40 when the symbol parameter is omitted"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "strategyId": {
          "name": "strategyId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "strategyId": {
              "name": "strategyId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "newClientStrategyId": "string",
                "strategyId": "number",
                "strategyStatus": "string",
                "strategyType": "string",
                "origQty": "NumberString",
                "price": "NumberString",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "stopPrice": "NumberString", // please ignore when order type is TRAILING_STOP_MARKET
                "symbol": "string",
                "orderId": "number", //Normal orderID after trigger if appliable, only have when the strategy is triggered
                "status": "string", //Normal order status after trigger if appliable, only have when the strategy is triggered
                "bookTime": "number", // order time
                "updateTime": "number",
                "triggerTime": "number",
                "timeInForce": "TimeInForce",
                "type": "OrderType", //Normal order type after trigger if appliable
                "activatePrice": "NumberString", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "NumberString" // callback rate, only return with TRAILING_STOP_MARKET order
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "newClientStrategyId": "abc",
                "strategyId": 123445,
                "strategyStatus": "TRIGGERED",
                "strategyType": "TRAILING_STOP_MARKET",
                "origQty": "0.40",
                "price": "0",
                "reduceOnly": false,
                "side": "BUY",
                "positionSide": "SHORT",
                "stopPrice": "9300", // please ignore when order type is TRAILING_STOP_MARKET
                "symbol": "BTCUSD",
                "orderId": 12123343534, //Normal orderID after trigger if appliable, only have when the strategy is triggered
                "status": "NEW", //Normal order status after trigger if appliable, only have when the strategy is triggered
                "bookTime": 1566818724710, // order time
                "updateTime": 1566818724722,
                "triggerTime": 1566818724750,
                "timeInForce": "GTC",
                "type": "MARKET", //Normal order type after trigger if appliable
                "activatePrice": "9020", // activation price, only return with TRAILING_STOP_MARKET order
                "priceRate": "0.3" // callback rate, only return with TRAILING_STOP_MARKET order
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-all-cm-conditional-orders-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-all-cm-conditional-orders-user_data",
      "name": "Query All CM Conditional Orders (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/margin/order",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/margin/order",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "clientOrderId": "string",
              "cummulativeQuoteQty": "NumberString",
              "executedQty": "NumberString",
              "icebergQty": "NumberString",
              "isWorking": "boolean",
              "orderId": "number",
              "origQty": "NumberString",
              "price": "NumberString",
              "side": "OrderSide",
              "status": "string",
              "stopPrice": "NumberString",
              "symbol": "string",
              "time": "number",
              "timeInForce": "TimeInForce",
              "type": "OrderType",
              "updateTime": "number",
              "accountId": "number",
              "selfTradePreventionMode": "string",
              "preventedMatchId": "null",
              "preventedQuantity": "null"
            }
          ],
          "responseExamples": [
            {
              "clientOrderId": "ZwfQzuDIGpceVhKW5DvCmO",
              "cummulativeQuoteQty": "0.00000000",
              "executedQty": "0.00000000",
              "icebergQty": "0.00000000",
              "isWorking": true,
              "orderId": 213205622,
              "origQty": "0.30000000",
              "price": "0.00493630",
              "side": "SELL",
              "status": "NEW",
              "stopPrice": "0.00000000",
              "symbol": "BNBBTC",
              "time": 1562133008725,
              "timeInForce": "GTC",
              "type": "LIMIT",
              "updateTime": 1562133008725,
              "accountId": 152950866,
              "selfTradePreventionMode": "EXPIRE_TAKER",
              "preventedMatchId": null,
              "preventedQuantity": null
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-margin-account-order-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-margin-account-order-user_data",
      "name": "Query Margin Account Order (USER_DATA)"
    },
    {
      "description": "Notes:\n* If the symbol is not sent, orders for all symbols will be returned in an array.\n* When all symbols are returned, the number of requests counted against the rate limiter is equal to the number of symbols currently trading on the exchange.",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/margin/openOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/margin/openOrders",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "clientOrderId": "string",
                "cummulativeQuoteQty": "NumberString",
                "executedQty": "NumberString",
                "icebergQty": "NumberString",
                "isWorking": "boolean",
                "orderId": "number",
                "origQty": "NumberString",
                "price": "NumberString",
                "side": "OrderSide",
                "status": "string",
                "stopPrice": "NumberString",
                "symbol": "string",
                "time": "number",
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "updateTime": "number",
                "accountId": "number",
                "selfTradePreventionMode": "string",
                "preventedMatchId": "null",
                "preventedQuantity": "null"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "clientOrderId": "qhcZw71gAkCCTv0t0k8LUK",
                "cummulativeQuoteQty": "0.00000000",
                "executedQty": "0.00000000",
                "icebergQty": "0.00000000",
                "isWorking": true,
                "orderId": 211842552,
                "origQty": "0.30000000",
                "price": "0.00475010",
                "side": "SELL",
                "status": "NEW",
                "stopPrice": "0.00000000",
                "symbol": "BNBBTC",
                "time": 1562040170089,
                "timeInForce": "GTC",
                "type": "LIMIT",
                "updateTime": 1562040170089,
                "accountId": 152950866,
                "selfTradePreventionMode": "EXPIRE_TAKER",
                "preventedMatchId": null,
                "preventedQuantity": null
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-current-margin-open-order-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-current-margin-open-order-user_data",
      "name": "Query Current Margin Open Order (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/margin/allOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/margin/allOrders",
      "hmacSHA256": true,
      "weights": {
        "IP": 100,
        "IP_text": "100"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 500."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 500."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "clientOrderId": "string",
                "cummulativeQuoteQty": "NumberString",
                "executedQty": "NumberString",
                "icebergQty": "NumberString",
                "isWorking": "boolean",
                "orderId": "number",
                "origQty": "NumberString",
                "price": "NumberString",
                "side": "OrderSide",
                "status": "string",
                "stopPrice": "NumberString",
                "symbol": "string",
                "time": "number",
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "updateTime": "number",
                "accountId": "number",
                "selfTradePreventionMode": "string",
                "preventedMatchId": "null",
                "preventedQuantity": "null"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "clientOrderId": "D2KDy4DIeS56PvkM13f8cP",
                "cummulativeQuoteQty": "0.00000000",
                "executedQty": "0.00000000",
                "icebergQty": "0.00000000",
                "isWorking": false,
                "orderId": 41295,
                "origQty": "5.31000000",
                "price": "0.22500000",
                "side": "SELL",
                "status": "CANCELED",
                "stopPrice": "0.18000000",
                "symbol": "BNBBTC",
                "time": 1565769338806,
                "timeInForce": "GTC",
                "type": "TAKE_PROFIT_LIMIT",
                "updateTime": 1565769342148,
                "accountId": 152950866,
                "selfTradePreventionMode": "EXPIRE_TAKER",
                "preventedMatchId": null,
                "preventedQuantity": null
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-all-margin-account-orders-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-all-margin-account-orders-user_data",
      "name": "Query All Margin Account Orders (USER_DATA)"
    },
    {
      "description": "Retrieves a specific OCO based on provided optional parameters",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/margin/orderList",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/margin/orderList",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "orderListId": {
          "name": "orderListId",
          "type": "LONG",
          "required": false,
          "description": "Either orderListId or origClientOrderId must be provided"
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": "Either orderListId or origClientOrderId must be provided"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "orderListId": {
              "name": "orderListId",
              "type": "LONG",
              "required": false,
              "description": "Either orderListId or origClientOrderId must be provided"
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": "Either orderListId or origClientOrderId must be provided"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "orderListId": "number",
              "contingencyType": "string",
              "listStatusType": "OCOStatus",
              "listOrderStatus": "OCOOrderStatus",
              "listClientOrderId": "string",
              "transactionTime": "number",
              "symbol": "string",
              "orders": [
                {
                  "symbol": "string",
                  "orderId": "number",
                  "clientOrderId": "string"
                },
                null
              ]
            }
          ],
          "responseExamples": [
            {
              "orderListId": 27,
              "contingencyType": "OCO",
              "listStatusType": "EXEC_STARTED",
              "listOrderStatus": "EXECUTING",
              "listClientOrderId": "h2USkA5YQpaXHPIrkd96xE",
              "transactionTime": 1565245656253,
              "symbol": "LTCBTC",
              "orders": [
                {
                  "symbol": "LTCBTC",
                  "orderId": 4,
                  "clientOrderId": "qD1gy3kc3Gx0rihm9Y3xwS"
                },
                {
                  "symbol": "LTCBTC",
                  "orderId": 5,
                  "clientOrderId": "ARzZ9I00CPM8i3NhmU9Ega"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-margin-account-39-s-oco-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-margin-account-39-s-oco-user_data",
      "name": "Query Margin Account's OCO (USER_DATA)"
    },
    {
      "description": "Query all OCO for a specific margin account based on provided optional parameters",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/margin/allOrderList",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/margin/allOrderList",
      "hmacSHA256": true,
      "weights": {
        "IP": 100,
        "IP_text": "100"
      },
      "baseParams": {
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "If supplied, neither startTime or endTime can be provided"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default Value: 500; Max Value: 1000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "If supplied, neither startTime or endTime can be provided"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default Value: 500; Max Value: 1000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "orderListId": "number",
                "contingencyType": "string",
                "listStatusType": "OCOStatus",
                "listOrderStatus": "OCOOrderStatus",
                "listClientOrderId": "string",
                "transactionTime": "number",
                "symbol": "string",
                "orders": [
                  {
                    "symbol": "string",
                    "orderId": "number",
                    "clientOrderId": "string"
                  },
                  null
                ]
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "orderListId": 29,
                "contingencyType": "OCO",
                "listStatusType": "EXEC_STARTED",
                "listOrderStatus": "EXECUTING",
                "listClientOrderId": "amEEAXryFzFwYF1FeRpUoZ",
                "transactionTime": 1565245913483,
                "symbol": "LTCBTC",
                "orders": [
                  {
                    "symbol": "LTCBTC",
                    "orderId": 4,
                    "clientOrderId": "oD7aesZqjEGlZrbtRpy5zB"
                  },
                  {
                    "symbol": "LTCBTC",
                    "orderId": 5,
                    "clientOrderId": "Jr1h6xirOxgeJOUuYQS7V3"
                  }
                ]
              },
              {
                "orderListId": 28,
                "contingencyType": "OCO",
                "listStatusType": "EXEC_STARTED",
                "listOrderStatus": "EXECUTING",
                "listClientOrderId": "hG7hFNxJV6cZy3Ze4AUT4d",
                "transactionTime": 1565245913407,
                "symbol": "LTCBTC",
                "orders": [
                  {
                    "symbol": "LTCBTC",
                    "orderId": 2,
                    "clientOrderId": "j6lFOfbmFMRjTYA7rRJ0LP"
                  },
                  {
                    "symbol": "LTCBTC",
                    "orderId": 3,
                    "clientOrderId": "z0KCjOdditiLS5ekAFtK81"
                  }
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-margin-account-39-s-all-oco-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-margin-account-39-s-all-oco-user_data",
      "name": "Query Margin Account's all OCO (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/margin/openOrderList",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/margin/openOrderList",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "orderListId": "number",
                "contingencyType": "string",
                "listStatusType": "OCOStatus",
                "listOrderStatus": "OCOOrderStatus",
                "listClientOrderId": "string",
                "transactionTime": "number",
                "symbol": "string",
                "orders": [
                  {
                    "symbol": "string",
                    "orderId": "number",
                    "clientOrderId": "string"
                  },
                  null
                ]
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "orderListId": 31,
                "contingencyType": "OCO",
                "listStatusType": "EXEC_STARTED",
                "listOrderStatus": "EXECUTING",
                "listClientOrderId": "wuB13fmulKj3YjdqWEcsnp",
                "transactionTime": 1565246080644,
                "symbol": "LTCBTC",
                "orders": [
                  {
                    "symbol": "LTCBTC",
                    "orderId": 4,
                    "clientOrderId": "r3EH2N76dHfLoSZWIUw1bT"
                  },
                  {
                    "symbol": "LTCBTC",
                    "orderId": 5,
                    "clientOrderId": "Cv1SnyPD3qhqpbjpYEHbd2"
                  }
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-margin-account-39-s-open-oco-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-margin-account-39-s-open-oco-user_data",
      "name": "Query Margin Account's Open OCO (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/margin/myTrades",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/margin/myTrades",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "TradeId to fetch from. Default gets most recent trades."
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "TradeId to fetch from. Default gets most recent trades."
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "commission": "NumberString",
                "commissionAsset": "string",
                "id": "number",
                "isBestMatch": "boolean",
                "isBuyer": "boolean",
                "isMaker": "boolean",
                "orderId": "number",
                "price": "NumberString",
                "qty": "NumberString",
                "symbol": "string",
                "time": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "commission": "0.00006000",
                "commissionAsset": "BTC",
                "id": 34,
                "isBestMatch": true,
                "isBuyer": false,
                "isMaker": false,
                "orderId": 39324,
                "price": "0.02000000",
                "qty": "3.00000000",
                "symbol": "BNBBTC",
                "time": 1561973357171
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.margin-account-trade-list-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#margin-account-trade-list-user_data",
      "name": "Margin Account Trade List (USER_DATA)"
    },
    {
      "description": "Get order modification history",
      "securityType": "TRADE",
      "request": "GET /papi/v1/um/orderAmendment",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/orderAmendment",
      "hmacSHA256": true,
      "weights": {
        "UID": 1,
        "UID_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get modification history from INCLUSIVE"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get modification history until INCLUSIVE"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500, max 1000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get modification history from INCLUSIVE"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get modification history until INCLUSIVE"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500, max 1000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "amendmentId": "number", // Order modification ID
                "symbol": "string",
                "pair": "string",
                "orderId": "number",
                "clientOrderId": "string",
                "time": "number", // Order modification time
                "amendment": {
                  "price": {
                    "before": "NumberString",
                    "after": "NumberString"
                  },
                  "origQty": {
                    "before": "NumberString",
                    "after": "NumberString"
                  },
                  "count": "number" // Order modification count, representing the number of times the order has been modified
                }
              },
              null,
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "amendmentId": 5363, // Order modification ID
                "symbol": "BTCUSDT",
                "pair": "BTCUSDT",
                "orderId": 20072994037,
                "clientOrderId": "LJ9R4QZDihCaS8UAOOLpgW",
                "time": 1629184560899, // Order modification time
                "amendment": {
                  "price": {
                    "before": "30004",
                    "after": "30003.2"
                  },
                  "origQty": {
                    "before": "1",
                    "after": "1"
                  },
                  "count": 3 // Order modification count, representing the number of times the order has been modified
                }
              },
              {
                "amendmentId": 5361,
                "symbol": "BTCUSDT",
                "pair": "BTCUSDT",
                "orderId": 20072994037,
                "clientOrderId": "LJ9R4QZDihCaS8UAOOLpgW",
                "time": 1629184533946,
                "amendment": {
                  "price": {
                    "before": "30005",
                    "after": "30004"
                  },
                  "origQty": {
                    "before": "1",
                    "after": "1"
                  },
                  "count": 2
                }
              },
              {
                "amendmentId": 5325,
                "symbol": "BTCUSDT",
                "pair": "BTCUSDT",
                "orderId": 20072994037,
                "clientOrderId": "LJ9R4QZDihCaS8UAOOLpgW",
                "time": 1629182711787,
                "amendment": {
                  "price": {
                    "before": "30002",
                    "after": "30005"
                  },
                  "origQty": {
                    "before": "1",
                    "after": "1"
                  },
                  "count": 1
                }
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-um-modify-order-history-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-um-modify-order-history-trade",
      "name": "Query UM Modify Order History (TRADE)"
    },
    {
      "description": "Get order modification history",
      "securityType": "TRADE",
      "request": "GET /papi/v1/cm/orderAmendment",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/cm/orderAmendment",
      "hmacSHA256": true,
      "weights": {
        "UID": 1,
        "UID_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "origClientOrderId": {
          "name": "origClientOrderId",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get modification history from INCLUSIVE"
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get modification history until INCLUSIVE"
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 50, max 100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "origClientOrderId": {
              "name": "origClientOrderId",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get modification history from INCLUSIVE"
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get modification history until INCLUSIVE"
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 50, max 100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "amendmentId": "number", // Order modification ID
                "symbol": "string",
                "pair": "string",
                "orderId": "number",
                "clientOrderId": "string",
                "time": "number", // Order modification time
                "amendment": {
                  "price": {
                    "before": "NumberString",
                    "after": "NumberString"
                  },
                  "origQty": {
                    "before": "NumberString",
                    "after": "NumberString"
                  },
                  "count": "number" // Order modification count, representing the number of times the order has been modified
                }
              },
              null,
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "amendmentId": 5363, // Order modification ID
                "symbol": "BTCUSD_PERP",
                "pair": "BTCUSD",
                "orderId": 20072994037,
                "clientOrderId": "LJ9R4QZDihCaS8UAOOLpgW",
                "time": 1629184560899, // Order modification time
                "amendment": {
                  "price": {
                    "before": "30004",
                    "after": "30003.2"
                  },
                  "origQty": {
                    "before": "1",
                    "after": "1"
                  },
                  "count": 3 // Order modification count, representing the number of times the order has been modified
                }
              },
              {
                "amendmentId": 5361,
                "symbol": "BTCUSD_PERP",
                "pair": "BTCUSD",
                "orderId": 20072994037,
                "clientOrderId": "LJ9R4QZDihCaS8UAOOLpgW",
                "time": 1629184533946,
                "amendment": {
                  "price": {
                    "before": "30005",
                    "after": "30004"
                  },
                  "origQty": {
                    "before": "1",
                    "after": "1"
                  },
                  "count": 2
                }
              },
              {
                "amendmentId": 5325,
                "symbol": "BTCUSD_PERP",
                "pair": "BTCUSD",
                "orderId": 20072994037,
                "clientOrderId": "LJ9R4QZDihCaS8UAOOLpgW",
                "time": 1629182711787,
                "amendment": {
                  "price": {
                    "before": "30002",
                    "after": "30005"
                  },
                  "origQty": {
                    "before": "1",
                    "after": "1"
                  },
                  "count": 1
                }
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Query Order",
      "path": "toc.query-order.query-cm-modify-order-history-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-cm-modify-order-history-trade",
      "name": "Query CM Modify Order History (TRADE)"
    },
    {
      "description": "query account balance",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/balance",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/balance",
      "hmacSHA256": true,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            "",
            "OR (when symbol sent)"
          ],
          "responseTypes": [
            [
              {
                "asset": "string", // asset name
                "totalWalletBalance": "NumberString", // wallet balance =  cross margin free + cross margin locked + UM wallet balance + CM wallet balance
                "crossMarginAsset": "NumberString", // crossMarginAsset = crossMarginFree + crossMarginLocked
                "crossMarginBorrowed": "NumberString", // principal of cross margin
                "crossMarginFree": "NumberString", // free asset of cross margin
                "crossMarginInterest": "NumberString", // interest of cross margin
                "crossMarginLocked": "NumberString", //lock asset of cross margin
                "umWalletBalance": "NumberString", // wallet balance of um
                "umUnrealizedPNL": "NumberString", // unrealized profit of um
                "cmWalletBalance": "NumberString", // wallet balance of cm
                "cmUnrealizedPNL": "string", // unrealized profit of cm
                "updateTime": "number",
                "negativeBalance": "NumberString"
              }
            ],
            {
              "asset": "string", // asset name
              "totalWalletBalance": "NumberString", // wallet balance =  cross margin free + cross margin locked + UM wallet balance + CM wallet balance
              "crossMarginBorrowed": "NumberString", // principal of cross margin
              "crossMarginFree": "NumberString", // free asset of cross margin
              "crossMarginInterest": "NumberString", // interest of cross margin
              "crossMarginLocked": "NumberString", //lock asset of cross margin
              "umWalletBalance": "NumberString", // wallet balance of um
              "umUnrealizedPNL": "NumberString", // unrealized profit of um
              "cmWalletBalance": "NumberString", // wallet balance of cm
              "cmUnrealizedPNL": "string", // unrealized profit of cm
              "updateTime": "number",
              "negativeBalance": "NumberString"
            }
          ],
          "responseExamples": [
            [
              {
                "asset": "USDT", // asset name
                "totalWalletBalance": "122607.35137903", // wallet balance =  cross margin free + cross margin locked + UM wallet balance + CM wallet balance
                "crossMarginAsset": "92.27530794", // crossMarginAsset = crossMarginFree + crossMarginLocked
                "crossMarginBorrowed": "10.00000000", // principal of cross margin
                "crossMarginFree": "100.00000000", // free asset of cross margin
                "crossMarginInterest": "0.72469206", // interest of cross margin
                "crossMarginLocked": "3.00000000", //lock asset of cross margin
                "umWalletBalance": "0.00000000", // wallet balance of um
                "umUnrealizedPNL": "23.72469206", // unrealized profit of um
                "cmWalletBalance": "23.72469206", // wallet balance of cm
                "cmUnrealizedPNL": "", // unrealized profit of cm
                "updateTime": 1617939110373,
                "negativeBalance": "0"
              }
            ],
            {
              "asset": "USDT", // asset name
              "totalWalletBalance": "122607.35137903", // wallet balance =  cross margin free + cross margin locked + UM wallet balance + CM wallet balance
              "crossMarginBorrowed": "10.00000000", // principal of cross margin
              "crossMarginFree": "100.00000000", // free asset of cross margin
              "crossMarginInterest": "0.72469206", // interest of cross margin
              "crossMarginLocked": "3.00000000", //lock asset of cross margin
              "umWalletBalance": "0.00000000", // wallet balance of um
              "umUnrealizedPNL": "23.72469206", // unrealized profit of um
              "cmWalletBalance": "23.72469206", // wallet balance of cm
              "cmUnrealizedPNL": "", // unrealized profit of cm
              "updateTime": 1617939110373,
              "negativeBalance": "0"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.account-balance-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#account-balance-user_data",
      "name": "Account Balance(USER_DATA)"
    },
    {
      "description": "Query account information",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/account",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/account",
      "hmacSHA256": true,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "uniMMR": "NumberString", // Portfolio margin account maintenance margin rate
              "accountEquity": "NumberString", // Account equity, in USD value
              "actualEquity": "NumberString", //Account equity calculated without discount on collateral rate, in USD value
              "accountInitialMargin": "NumberString",
              "accountMaintMargin": "NumberString", // Portfolio margin account maintenance margin, unit:USD
              "accountStatus": "string", // Portfolio margin account status:"NORMAL", "MARGIN_CALL", "SUPPLY_MARGIN", "REDUCE_ONLY", "ACTIVE_LIQUIDATION", "FORCE_LIQUIDATION", "BANKRUPTED"
              "virtualMaxWithdrawAmount": "NumberString", // Portfolio margin maximum amount for transfer out in USD
              "totalAvailableBalance": "string",
              "totalMarginOpenLoss": "string", // in USD margin open order
              "updateTime": "number" // last update time
            }
          ],
          "responseExamples": [
            {
              "uniMMR": "5167.92171923", // Portfolio margin account maintenance margin rate
              "accountEquity": "122607.35137903", // Account equity, in USD value
              "actualEquity": "73.47428058", //Account equity calculated without discount on collateral rate, in USD value
              "accountInitialMargin": "23.72469206",
              "accountMaintMargin": "23.72469206", // Portfolio margin account maintenance margin, unit:USD
              "accountStatus": "NORMAL", // Portfolio margin account status:"NORMAL", "MARGIN_CALL", "SUPPLY_MARGIN", "REDUCE_ONLY", "ACTIVE_LIQUIDATION", "FORCE_LIQUIDATION", "BANKRUPTED"
              "virtualMaxWithdrawAmount": "1627523.32459208", // Portfolio margin maximum amount for transfer out in USD
              "totalAvailableBalance": "",
              "totalMarginOpenLoss": "", // in USD margin open order
              "updateTime": 1657707212154 // last update time
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.account-information-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#account-information-user_data",
      "name": "Account Information(USER_DATA)"
    },
    {
      "description": "Query margin max borrow",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/margin/maxBorrowable",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/margin/maxBorrowable",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "amount": "number", // account's currently max borrowable amount with sufficient system availability
              "borrowLimit": "number" // max borrowable amount limited by the account level
            }
          ],
          "responseExamples": [
            {
              "amount": 125, // account's currently max borrowable amount with sufficient system availability
              "borrowLimit": 60 // max borrowable amount limited by the account level
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.margin-max-borrow-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#margin-max-borrow-user_data",
      "name": "Margin Max Borrow(USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/margin/maxWithdraw",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/margin/maxWithdraw",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "amount": "NumberString"
            }
          ],
          "responseExamples": [
            {
              "amount": "60"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.query-margin-max-withdraw-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-margin-max-withdraw-user_data",
      "name": "Query Margin Max Withdraw(USER_DATA)"
    },
    {
      "description": "Get current UM position information.",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/um/positionRisk",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/positionRisk",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            " For One-way position mode(only return with position):",
            " For Hedge position mode(only return with position):"
          ],
          "responseTypes": [
            [
              {
                "entryPrice": "NumberString",
                "leverage": "NumberString",
                "markPrice": "NumberString",
                "maxNotionalValue": "NumberString",
                "positionAmt": "NumberString",
                "notional": "NumberString",
                "symbol": "string",
                "unRealizedProfit": "NumberString",
                "liquidationPrice": "NumberString",
                "positionSide": "PositionSide",
                "updateTime": "number"
              }
            ],
            [
              {
                "symbol": "string",
                "positionAmt": "NumberString",
                "entryPrice": "NumberString",
                "markPrice": "NumberString",
                "unRealizedProfit": "NumberString",
                "liquidationPrice": "NumberString",
                "leverage": "NumberString",
                "maxNotionalValue": "NumberString",
                "positionSide": "PositionSide",
                "notional": "NumberString",
                "updateTime": "number"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "entryPrice": "0.00000",
                "leverage": "10",
                "markPrice": "6679.50671178",
                "maxNotionalValue": "20000000",
                "positionAmt": "0.000",
                "notional": "0",
                "symbol": "BTCUSDT",
                "unRealizedProfit": "0.00000000",
                "liquidationPrice": "6170.20509059",
                "positionSide": "BOTH",
                "updateTime": 1625474304765
              }
            ],
            [
              {
                "symbol": "BTCUSDT",
                "positionAmt": "0.001",
                "entryPrice": "22185.2",
                "markPrice": "21123.05052574",
                "unRealizedProfit": "-1.06214947",
                "liquidationPrice": "6170.20509059",
                "leverage": "4",
                "maxNotionalValue": "100000000",
                "positionSide": "LONG",
                "notional": "21.12305052",
                "updateTime": 1655217461579
              },
              {
                "symbol": "BTCUSDT",
                "positionAmt": "0.001",
                "entryPrice": "0.0",
                "markPrice": "21123.05052574",
                "unRealizedProfit": "0.00000000",
                "liquidationPrice": "6170.20509059",
                "leverage": "4",
                "maxNotionalValue": "100000000",
                "positionSide": "SHORT",
                "notional": "0",
                "updateTime": 0
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.query-um-position-information-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-um-position-information-user_data",
      "name": "Query UM Position Information(USER_DATA)"
    },
    {
      "description": "Get current CM position information.",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/cm/positionRisk",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/cm/positionRisk",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "marginAsset": {
          "name": "marginAsset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "pair": {
          "name": "pair",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "marginAsset": {
              "name": "marginAsset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "pair": {
              "name": "pair",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            " For One-way position mode:",
            " For Hedge position mode(only return with position):"
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "positionAmt": "NumberString",
                "entryPrice": "NumberString",
                "markPrice": "NumberString",
                "liquidationPrice": "NumberString",
                "unRealizedProfit": "NumberString",
                "leverage": "NumberString",
                "positionSide": "PositionSide",
                "updateTime": "number",
                "maxQty": "NumberString",
                "notionalValue": "NumberString",
                "breakEvenPrice": "NumberString"
              }
            ],
            [
              {
                "symbol": "string",
                "positionAmt": "NumberString",
                "entryPrice": "NumberString",
                "markPrice": "NumberString",
                "unRealizedProfit": "NumberString",
                "liquidationPrice": "NumberString",
                "leverage": "NumberString",
                "positionSide": "PositionSide",
                "updateTime": "number",
                "maxQty": "NumberString",
                "notionalValue": "NumberString",
                "breakEvenPrice": "NumberString"
              },
              null
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSD_201225",
                "positionAmt": "1",
                "entryPrice": "11707.70000003",
                "markPrice": "11788.66626667",
                "liquidationPrice": "6170.20509059",
                "unRealizedProfit": "0.00005866",
                "leverage": "125",
                "positionSide": "LONG",
                "updateTime": 1627026881327,
                "maxQty": "50",
                "notionalValue": "0.00084827",
                "breakEvenPrice": "0.00000"
              }
            ],
            [
              {
                "symbol": "BTCUSD_201225",
                "positionAmt": "1",
                "entryPrice": "11707.70000003",
                "markPrice": "11788.66626667",
                "unRealizedProfit": "0.00005866",
                "liquidationPrice": "6170.20509059",
                "leverage": "125",
                "positionSide": "LONG",
                "updateTime": 1627026881327,
                "maxQty": "50",
                "notionalValue": "0.00084827",
                "breakEvenPrice": "0.00000"
              },
              {
                "symbol": "BTCUSD_201225",
                "positionAmt": "1",
                "entryPrice": "11707.70000003",
                "markPrice": "11788.66626667",
                "unRealizedProfit": "0.00005866",
                "liquidationPrice": "6170.20509059",
                "leverage": "125",
                "positionSide": "LONG",
                "updateTime": 1627026881327,
                "maxQty": "50",
                "notionalValue": "0.00084827",
                "breakEvenPrice": "0.00000"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.query-cm-position-information-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-cm-position-information-user_data",
      "name": "Query CM Position Information(USER_DATA)"
    },
    {
      "description": "Change user's initial leverage of specific symbol in UM.",
      "securityType": "TRADE",
      "request": "POST /papi/v1/um/leverage",
      "requestMethod": "POST",
      "requestEndPoint": "/papi/v1/um/leverage",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "leverage": {
          "name": "leverage",
          "type": "INT",
          "required": true,
          "description": "target initial leverage: int from 1 to 125"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "leverage": {
              "name": "leverage",
              "type": "INT",
              "required": true,
              "description": "target initial leverage: int from 1 to 125"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "leverage": "number",
              "maxNotionalValue": "NumberString",
              "symbol": "string"
            }
          ],
          "responseExamples": [
            {
              "leverage": 21,
              "maxNotionalValue": "1000000",
              "symbol": "BTCUSDT"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.change-um-initial-leverage-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#change-um-initial-leverage-trade",
      "name": "Change UM Initial Leverage (TRADE)"
    },
    {
      "description": "Change user's initial leverage of specific symbol in CM.",
      "securityType": "TRADE",
      "request": "POST /papi/v1/cm/leverage",
      "requestMethod": "POST",
      "requestEndPoint": "/papi/v1/cm/leverage",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "leverage": {
          "name": "leverage",
          "type": "INT",
          "required": true,
          "description": "target initial leverage: int from 1 to 125"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "leverage": {
              "name": "leverage",
              "type": "INT",
              "required": true,
              "description": "target initial leverage: int from 1 to 125"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "leverage": "number",
              "maxQty": "NumberString",
              "symbol": "string"
            }
          ],
          "responseExamples": [
            {
              "leverage": 21,
              "maxQty": "1000",
              "symbol": "BTCUSD_200925"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.change-cm-initial-leverage-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#change-cm-initial-leverage-trade",
      "name": "Change CM Initial Leverage (TRADE)"
    },
    {
      "description": "Change user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol in UM",
      "securityType": "TRADE",
      "request": "POST /papi/v1/um/positionSide/dual",
      "requestMethod": "POST",
      "requestEndPoint": "/papi/v1/um/positionSide/dual",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "dualSidePosition": {
          "name": "dualSidePosition",
          "type": "string",
          "required": true,
          "description": "\"true\": Hedge Mode; \"false\": One-way Mode"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "dualSidePosition": {
              "name": "dualSidePosition",
              "type": "string",
              "required": true,
              "description": "\"true\": Hedge Mode; \"false\": One-way Mode"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "code": 200,
              "msg": "success"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.change-um-position-mode-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#change-um-position-mode-trade",
      "name": "Change UM Position Mode(TRADE)"
    },
    {
      "description": "Change user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol in CM",
      "securityType": "TRADE",
      "request": "POST /papi/v1/cm/positionSide/dual",
      "requestMethod": "POST",
      "requestEndPoint": "/papi/v1/cm/positionSide/dual",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "dualSidePosition": {
          "name": "dualSidePosition",
          "type": "string",
          "required": true,
          "description": "\"true\": Hedge Mode; \"false\": One-way Mode"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "dualSidePosition": {
              "name": "dualSidePosition",
              "type": "string",
              "required": true,
              "description": "\"true\": Hedge Mode; \"false\": One-way Mode"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "code": "number",
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "code": 200,
              "msg": "success"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.change-cm-position-mode-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#change-cm-position-mode-trade",
      "name": "Change CM Position Mode(TRADE)"
    },
    {
      "description": "Get user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol in UM",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/um/positionSide/dual",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/positionSide/dual",
      "hmacSHA256": true,
      "weights": {
        "IP": 30,
        "IP_text": "30"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "dualSidePosition": "boolean" // "true": Hedge Mode; "false": One-way Mode
            }
          ],
          "responseExamples": [
            {
              "dualSidePosition": true // "true": Hedge Mode; "false": One-way Mode
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.get-um-current-position-mode-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#get-um-current-position-mode-user_data",
      "name": "Get UM Current Position Mode(USER_DATA)"
    },
    {
      "description": "Get user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol in CM",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/cm/positionSide/dual",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/cm/positionSide/dual",
      "hmacSHA256": true,
      "weights": {
        "IP": 30,
        "IP_text": "30"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "dualSidePosition": "boolean" // "true": Hedge Mode; "false": One-way Mode
            }
          ],
          "responseExamples": [
            {
              "dualSidePosition": true // "true": Hedge Mode; "false": One-way Mode
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.get-cm-current-position-mode-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#get-cm-current-position-mode-user_data",
      "name": "Get CM Current Position Mode(USER_DATA)"
    },
    {
      "description": "Get trades for a specific account and UM symbol.",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/um/userTrades",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/userTrades",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "orderId": {
          "name": "orderId",
          "type": "INT",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "Trade id to fetch from. Default gets most recent trades."
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 500; max 1000."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "orderId": {
              "name": "orderId",
              "type": "INT",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "Trade id to fetch from. Default gets most recent trades."
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 500; max 1000."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "id": "number",
                "orderId": "number",
                "side": "OrderSide",
                "price": "NumberString",
                "qty": "NumberString",
                "realizedPnl": "NumberString",
                "marginAsset": "string",
                "quoteQty": "NumberString",
                "commission": "NumberString",
                "commissionAsset": "string",
                "time": "number",
                "buyer": "boolean",
                "maker": "boolean",
                "positionSide": "PositionSide"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSDT",
                "id": 67880589,
                "orderId": 270093109,
                "side": "SELL",
                "price": "28511.00",
                "qty": "0.010",
                "realizedPnl": "2.58500000",
                "marginAsset": "USDT",
                "quoteQty": "285.11000",
                "commission": "-0.11404400",
                "commissionAsset": "USDT",
                "time": 1680688557875,
                "buyer": false,
                "maker": false,
                "positionSide": "BOTH"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.um-account-trade-list-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#um-account-trade-list-user_data",
      "name": "UM Account Trade List (USER_DATA)"
    },
    {
      "description": "Get trades for a specific account and CM symbol.",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/cm/userTrades",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/cm/userTrades",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "20 with symbol 40 with pair"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "pair": {
          "name": "pair",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "fromId": {
          "name": "fromId",
          "type": "LONG",
          "required": false,
          "description": "Trade id to fetch from. Default gets most recent trades."
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 50; max 1000."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "pair": {
              "name": "pair",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "fromId": {
              "name": "fromId",
              "type": "LONG",
              "required": false,
              "description": "Trade id to fetch from. Default gets most recent trades."
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 50; max 1000."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "id": "number",
                "orderId": "number",
                "pair": "string",
                "side": "OrderSide",
                "price": "NumberString",
                "qty": "NumberString",
                "realizedPnl": "NumberString",
                "marginAsset": "string",
                "baseQty": "NumberString",
                "commission": "NumberString",
                "commissionAsset": "string",
                "time": "number",
                "positionSide": "PositionSide",
                "buyer": "boolean",
                "maker": "boolean"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSD_200626",
                "id": 6,
                "orderId": 28,
                "pair": "BTCUSD",
                "side": "SELL",
                "price": "8800",
                "qty": "1",
                "realizedPnl": "0",
                "marginAsset": "BTC",
                "baseQty": "0.01136364",
                "commission": "0.00000454",
                "commissionAsset": "BTC",
                "time": 1590743483586,
                "positionSide": "BOTH",
                "buyer": false,
                "maker": false
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.cm-account-trade-list-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#cm-account-trade-list-user_data",
      "name": "CM Account Trade List (USER_DATA)"
    },
    {
      "description": "Query UM notional and leverage brackets",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/um/leverageBracket",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/leverageBracket",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "notionalCoef": "NumberString",
                "brackets": [
                  {
                    "bracket": "number", // Notional bracket
                    "initialLeverage": "number", // Max initial leverage for this bracket
                    "notionalCap": "number", // Cap notional of this bracket
                    "notionalFloor": "number", // Notional threshold of this bracket
                    "maintMarginRatio": "number", // Maintenance ratio for this bracket
                    "cum": "number" // Auxiliary number for quick calculation
                  }
                ]
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "ETHUSDT",
                "notionalCoef": "4.0",
                "brackets": [
                  {
                    "bracket": 1, // Notional bracket
                    "initialLeverage": 75, // Max initial leverage for this bracket
                    "notionalCap": 10000, // Cap notional of this bracket
                    "notionalFloor": 0, // Notional threshold of this bracket
                    "maintMarginRatio": 0.0065, // Maintenance ratio for this bracket
                    "cum": 0 // Auxiliary number for quick calculation
                  }
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.um-notional-and-leverage-brackets-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#um-notional-and-leverage-brackets-user_data",
      "name": "UM Notional and Leverage Brackets (USER_DATA)"
    },
    {
      "description": "Query CM notional and leverage brackets",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/cm/leverageBracket",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/cm/leverageBracket",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "notionalCoef": "NumberString",
                "brackets": [
                  {
                    "bracket": "number", // bracket level
                    "initialLeverage": "number", // the maximum leverage
                    "qtyCap": "number", // upper edge of base asset quantity
                    "qtyFloor": "number", // lower edge of base asset quantity
                    "maintMarginRatio": "number", // maintenance margin rate
                    "cum": "number" // Auxiliary number for quick calculation
                  }
                ]
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSD_PERP",
                "notionalCoef": "4.0",
                "brackets": [
                  {
                    "bracket": 1, // bracket level
                    "initialLeverage": 125, // the maximum leverage
                    "qtyCap": 50, // upper edge of base asset quantity
                    "qtyFloor": 0, // lower edge of base asset quantity
                    "maintMarginRatio": 0.004, // maintenance margin rate
                    "cum": 0 // Auxiliary number for quick calculation
                  }
                ]
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.cm-notional-and-leverage-brackets-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#cm-notional-and-leverage-brackets-user_data",
      "name": "CM Notional and Leverage Brackets (USER_DATA)"
    },
    {
      "description": "Query user's margin force orders",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/margin/forceOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/margin/forceOrders",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10 Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10 Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "avgPrice": "NumberString",
                  "executedQty": "NumberString",
                  "orderId": "number",
                  "price": "NumberString",
                  "qty": "NumberString",
                  "side": "OrderSide",
                  "symbol": "string",
                  "timeInForce": "TimeInForce",
                  "updatedTime": "number"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "avgPrice": "0.00388359",
                  "executedQty": "31.39000000",
                  "orderId": 180015097,
                  "price": "0.00388110",
                  "qty": "31.39000000",
                  "side": "SELL",
                  "symbol": "BNBBTC",
                  "timeInForce": "GTC",
                  "updatedTime": 1558941374745
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.query-user-39-s-margin-force-orders-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-user-39-s-margin-force-orders-user_data",
      "name": "Query User's Margin Force Orders (USER_DATA)"
    },
    {
      "description": "Query User's UM Force Orders",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/um/forceOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/forceOrders",
      "hmacSHA256": true,
      "weights": {
        "IP_text": "20 with symbol, 50 without symbol"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "autoCloseType": {
          "name": "autoCloseType",
          "type": "ENUM",
          "required": false,
          "description": "LIQUIDATION for liquidation orders, ADL for ADL orders."
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 50; max 100."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "autoCloseType": {
              "name": "autoCloseType",
              "type": "ENUM",
              "required": false,
              "description": "LIQUIDATION for liquidation orders, ADL for ADL orders."
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 50; max 100."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "orderId": "number",
                "symbol": "string",
                "status": "string",
                "clientOrderId": "string",
                "price": "NumberString",
                "avgPrice": "NumberString",
                "origQty": "NumberString",
                "executedQty": "NumberString",
                "cumQuote": "NumberString",
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "origType": "string",
                "time": "number",
                "updateTime": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "orderId": 6071832819,
                "symbol": "BTCUSDT",
                "status": "FILLED",
                "clientOrderId": "autoclose-1596107620040000020",
                "price": "10871.09",
                "avgPrice": "10913.21000",
                "origQty": "0.001",
                "executedQty": "0.001",
                "cumQuote": "10.91321",
                "timeInForce": "IOC",
                "type": "LIMIT",
                "reduceOnly": false,
                "side": "SELL",
                "positionSide": "BOTH",
                "origType": "LIMIT",
                "time": 1596107620044,
                "updateTime": 1596107620087
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.query-user-39-s-um-force-orders-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-user-39-s-um-force-orders-user_data",
      "name": "Query User's UM Force Orders (USER_DATA)"
    },
    {
      "description": "Query User's CM Force Orders",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/cm/forceOrders",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/cm/forceOrders",
      "hmacSHA256": true,
      "weights": {
        "IP_text": "20 with symbol, 50 without symbol"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "autoCloseType": {
          "name": "autoCloseType",
          "type": "ENUM",
          "required": false,
          "description": "\"LIQUIDATION\" for liquidation orders, \"ADL\" for ADL orders."
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 50; max 100."
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "autoCloseType": {
              "name": "autoCloseType",
              "type": "ENUM",
              "required": false,
              "description": "\"LIQUIDATION\" for liquidation orders, \"ADL\" for ADL orders."
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 50; max 100."
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "orderId": "number",
                "symbol": "string",
                "pair": "string",
                "status": "string",
                "clientOrderId": "string",
                "price": "NumberString",
                "avgPrice": "NumberString",
                "origQty": "NumberString",
                "executedQty": "NumberString",
                "cumBase": "NumberString",
                "timeInForce": "TimeInForce",
                "type": "OrderType",
                "reduceOnly": "boolean",
                "side": "OrderSide",
                "positionSide": "PositionSide",
                "origType": "string",
                "time": "number",
                "updateTime": "number"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "orderId": 165123080,
                "symbol": "BTCUSD_200925",
                "pair": "BTCUSD",
                "status": "FILLED",
                "clientOrderId": "autoclose-1596542005017000006",
                "price": "11326.9",
                "avgPrice": "11326.9",
                "origQty": "1",
                "executedQty": "1",
                "cumBase": "0.00882854",
                "timeInForce": "IOC",
                "type": "LIMIT",
                "reduceOnly": false,
                "side": "SELL",
                "positionSide": "BOTH",
                "origType": "LIMIT",
                "time": 1596542005019,
                "updateTime": 1596542005050
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.query-user-39-s-cm-force-orders-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-user-39-s-cm-force-orders-user_data",
      "name": "Query User's CM Force Orders (USER_DATA)"
    },
    {
      "description": "Or (account violation triggered)",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/um/apiTradingStatus",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/apiTradingStatus",
      "hmacSHA256": false,
      "weights": {
        "IP_text": "1 for a single symbol\n10 when the symbol parameter is omitted"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "indicators": { // indicator: quantitative rules indicators, value: user's indicators value, triggerValue: trigger indicator value threshold of quantitative rules.
                "BTCUSDT": [
                  {
                    "isLocked": "boolean",
                    "plannedRecoverTime": "number",
                    "indicator": "string", // Unfilled Ratio (UFR)
                    "value": "number", // Current value
                    "triggerValue": "number" // Trigger value
                  },
                  null,
                  null,
                  null
                ]
              },
              "updateTime": "number"
            }
          ],
          "responseExamples": [
            {
              "indicators": { // indicator: quantitative rules indicators, value: user's indicators value, triggerValue: trigger indicator value threshold of quantitative rules.
                "BTCUSDT": [
                  {
                    "isLocked": true,
                    "plannedRecoverTime": 1545741270000,
                    "indicator": "UFR", // Unfilled Ratio (UFR)
                    "value": 0.05, // Current value
                    "triggerValue": 0.995 // Trigger value
                  },
                  {
                    "isLocked": true,
                    "plannedRecoverTime": 1545741270000,
                    "indicator": "IFER", // IOC/FOK Expiration Ratio (IFER)
                    "value": 0.99, // Current value
                    "triggerValue": 0.99 // Trigger value
                  },
                  {
                    "isLocked": true,
                    "plannedRecoverTime": 1545741270000,
                    "indicator": "GCR", // GTC Cancellation Ratio (GCR)
                    "value": 0.99, // Current value
                    "triggerValue": 0.99 // Trigger value
                  },
                  {
                    "isLocked": true,
                    "plannedRecoverTime": 1545741270000,
                    "indicator": "DR", // Dust Ratio (DR)
                    "value": 0.99, // Current value
                    "triggerValue": 0.99 // Trigger value
                  }
                ]
              },
              "updateTime": 1545741270000
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.portfolio-margin-um-trading-quantitative-rules-indicators-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#portfolio-margin-um-trading-quantitative-rules-indicators-user_data",
      "name": "Portfolio Margin UM Trading Quantitative Rules Indicators (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/um/commissionRate",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/commissionRate",
      "hmacSHA256": true,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "makerCommissionRate": "NumberString", // 0.02%
              "takerCommissionRate": "NumberString" // 0.04%
            }
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSDT",
              "makerCommissionRate": "0.0002", // 0.02%
              "takerCommissionRate": "0.0004" // 0.04%
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.get-user-commission-rate-for-um-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#get-user-commission-rate-for-um-user_data",
      "name": "Get User Commission Rate for UM (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/cm/commissionRate",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/cm/commissionRate",
      "hmacSHA256": true,
      "weights": {
        "IP": 20,
        "IP_text": "20"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "symbol": "string",
              "makerCommissionRate": "NumberString", // 0.015%
              "takerCommissionRate": "NumberString" // 0.040%
            }
          ],
          "responseExamples": [
            {
              "symbol": "BTCUSD_PERP",
              "makerCommissionRate": "0.00015", // 0.015%
              "takerCommissionRate": "0.00040" // 0.040%
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.get-user-commission-rate-for-cm-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#get-user-commission-rate-for-cm-user_data",
      "name": "Get User Commission Rate for CM (USER_DATA)"
    },
    {
      "description": "Query margin loan record",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/margin/marginLoan",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/margin/marginLoan",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "txId": {
          "name": "txId",
          "type": "LONG",
          "required": false,
          "description": "the tranId in POST/papi/v1/marginLoan"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10 Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "txId": {
              "name": "txId",
              "type": "LONG",
              "required": false,
              "description": "the tranId in POST/papi/v1/marginLoan"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10 Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "txId": "number",
                  "asset": "string",
                  "principal": "NumberString",
                  "timestamp": "number",
                  "status": "string" //one of PENDING (pending execution), CONFIRMED (successfully loaned), FAILED (execution failed, nothing happened to your account);
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "txId": 12807067523,
                  "asset": "BNB",
                  "principal": "0.84624403",
                  "timestamp": 1555056425000,
                  "status": "CONFIRMED" //one of PENDING (pending execution), CONFIRMED (successfully loaned), FAILED (execution failed, nothing happened to your account);
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.query-margin-loan-record-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-margin-loan-record-user_data",
      "name": "Query Margin Loan Record(USER_DATA)"
    },
    {
      "description": "Query margin repay record.",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/margin/repayLoan",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/margin/repayLoan",
      "hmacSHA256": false,
      "weights": {
        "IP": 10,
        "IP_text": "10"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "txId": {
          "name": "txId",
          "type": "LONG",
          "required": false,
          "description": "the tranId in POST/papi/v1/repayLoan"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10 Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "txId": {
              "name": "txId",
              "type": "LONG",
              "required": false,
              "description": "the tranId in POST/papi/v1/repayLoan"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10 Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "amount": "NumberString", //Total amount repaid
                  "asset": "string",
                  "interest": "NumberString", //Interest repaid
                  "principal": "NumberString", //Principal repaid
                  "status": "string", //one of PENDING (pending execution), CONFIRMED (successfully execution), FAILED (execution failed, nothing happened to your account)
                  "timestamp": "number",
                  "txId": "number"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "amount": "14.00000000", //Total amount repaid
                  "asset": "BNB",
                  "interest": "0.01866667", //Interest repaid
                  "principal": "13.98133333", //Principal repaid
                  "status": "CONFIRMED", //one of PENDING (pending execution), CONFIRMED (successfully execution), FAILED (execution failed, nothing happened to your account)
                  "timestamp": 1563438204000,
                  "txId": 2970933056
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.query-margin-repay-record-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-margin-repay-record-user_data",
      "name": "Query Margin repay Record(USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET/papi/v1/margin/marginInterestHistory",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/margin/marginInterestHistory",
      "hmacSHA256": true,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "current": {
          "name": "current",
          "type": "LONG",
          "required": false,
          "description": "Currently querying page. Start from 1. Default:1"
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10 Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "current": {
              "name": "current",
              "type": "LONG",
              "required": false,
              "description": "Currently querying page. Start from 1. Default:1"
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10 Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "rows": [
                {
                  "txId": "number",
                  "interestAccuredTime": "number",
                  "asset": "string",
                  "rawAsset": "string",
                  "principal": "NumberString",
                  "interest": "NumberString",
                  "interestRate": "NumberString",
                  "type": "string"
                }
              ],
              "total": "number"
            }
          ],
          "responseExamples": [
            {
              "rows": [
                {
                  "txId": 1352286576452864800,
                  "interestAccuredTime": 1672160400000,
                  "asset": "USDT",
                  "rawAsset": "USDT",
                  "principal": "45.3313",
                  "interest": "0.00024995",
                  "interestRate": "0.00013233",
                  "type": "ON_BORROW"
                }
              ],
              "total": 1
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.get-margin-borrow-loan-interest-history-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#get-margin-borrow-loan-interest-history-user_data",
      "name": "Get Margin Borrow/Loan Interest History (USER_DATA)"
    },
    {
      "description": "Query interest history of negative balance for portfolio margin.",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/portfolio/interest-history",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/portfolio/interest-history",
      "hmacSHA256": false,
      "weights": {
        "IP": 50,
        "IP_text": "50"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": false,
          "description": ""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "size": {
          "name": "size",
          "type": "LONG",
          "required": false,
          "description": "Default:10 Max:100"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": false,
              "description": ""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "size": {
              "name": "size",
              "type": "LONG",
              "required": false,
              "description": "Default:10 Max:100"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "asset": "string",
                "interest": "NumberString", //interest amount
                "interestAccuredTime": "number",
                "interestRate": "NumberString", //daily interest rate
                "principal": "NumberString"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "asset": "USDT",
                "interest": "24.4440", //interest amount
                "interestAccuredTime": 1670227200000,
                "interestRate": "0.0001164", //daily interest rate
                "principal": "210000"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.query-portfolio-margin-negative-balance-interest-history-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#query-portfolio-margin-negative-balance-interest-history-user_data",
      "name": "Query Portfolio Margin Negative Balance Interest History(USER_DATA)"
    },
    {
      "description": "Fund collection for Portfolio Margin",
      "securityType": "TRADE",
      "request": "POST /papi/v1/auto-collection",
      "requestMethod": "POST",
      "requestEndPoint": "/papi/v1/auto-collection",
      "hmacSHA256": false,
      "weights": {
        "IP": 750,
        "IP_text": "750"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "msg": "success"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.fund-auto-collection-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#fund-auto-collection-trade",
      "name": "Fund Auto-collection (TRADE)"
    },
    {
      "description": "Transfers specific asset from Futures Account to Margin account",
      "securityType": "TRADE",
      "request": "POST /papi/v1/asset-collection",
      "requestMethod": "POST",
      "requestEndPoint": "/papi/v1/asset-collection",
      "hmacSHA256": false,
      "weights": {
        "IP": 30,
        "IP_text": "30"
      },
      "baseParams": {
        "asset": {
          "name": "asset",
          "type": "string",
          "required": true,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "asset": {
              "name": "asset",
              "type": "string",
              "required": true,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "msg": "success"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.fund-collection-by-asset-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#fund-collection-by-asset-trade",
      "name": "Fund Collection by Asset (TRADE)"
    },
    {
      "securityType": "TRADE",
      "request": "POST /papi/v1/bnb-transfer",
      "requestMethod": "POST",
      "requestEndPoint": "/papi/v1/bnb-transfer",
      "hmacSHA256": false,
      "weights": {
        "IP": 750,
        "IP_text": "750"
      },
      "baseParams": {
        "amount": {
          "name": "amount",
          "type": "DECIMAL",
          "required": true,
          "description": ""
        },
        "transferSide": {
          "name": "transferSide",
          "type": "\"TO_UM\"|\"FROM_UM\"",
          "required": true,
          "description": "\"TO_UM\",\"FROM_UM\""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": "The value cannot be greater than 60000"
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "amount": {
              "name": "amount",
              "type": "DECIMAL",
              "required": true,
              "description": ""
            },
            "transferSide": {
              "name": "transferSide",
              "type": "\"TO_UM\"|\"FROM_UM\"",
              "required": true,
              "description": "\"TO_UM\",\"FROM_UM\""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": "The value cannot be greater than 60000"
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "tranId": "number" //transaction id
            }
          ],
          "responseExamples": [
            {
              "tranId": 100000001 //transaction id
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.bnb-transfer-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#bnb-transfer-trade",
      "name": "BNB transfer (TRADE)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/um/income",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/income",
      "hmacSHA256": true,
      "weights": {
        "IP": 30,
        "IP_text": "30"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "incomeType": {
          "name": "incomeType",
          "type": "string",
          "required": false,
          "description": "TRANSFER, WELCOME_BONUS, REALIZED_PNL, FUNDING_FEE, COMMISSION, INSURANCE_CLEAR, REFERRAL_KICKBACK, COMMISSION_REBATE, API_REBATE, CONTEST_REWARD, CROSS_COLLATERAL_TRANSFER, OPTIONS_PREMIUM_FEE, OPTIONS_SETTLE_PROFIT, INTERNAL_TRANSFER, AUTO_EXCHANGE, DELIVERED_SETTELMENT, COIN_SWAP_DEPOSIT, COIN_SWAP_WITHDRAW, POSITION_LIMIT_INCREASE_FEE"
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get funding from INCLUSIVE."
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get funding until INCLUSIVE."
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 100; max 1000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "incomeType": {
              "name": "incomeType",
              "type": "string",
              "required": false,
              "description": "TRANSFER, WELCOME_BONUS, REALIZED_PNL, FUNDING_FEE, COMMISSION, INSURANCE_CLEAR, REFERRAL_KICKBACK, COMMISSION_REBATE, API_REBATE, CONTEST_REWARD, CROSS_COLLATERAL_TRANSFER, OPTIONS_PREMIUM_FEE, OPTIONS_SETTLE_PROFIT, INTERNAL_TRANSFER, AUTO_EXCHANGE, DELIVERED_SETTELMENT, COIN_SWAP_DEPOSIT, COIN_SWAP_WITHDRAW, POSITION_LIMIT_INCREASE_FEE"
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get funding from INCLUSIVE."
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get funding until INCLUSIVE."
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 100; max 1000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string", // trade symbol, if existing
                "incomeType": "string", // income type
                "income": "NumberString", // income amount
                "asset": "string", // income asset
                "info": "string", // extra information
                "time": "number",
                "tranId": "NumberString", // transaction id
                "tradeId": "string" // trade id, if existing
              },
              {
                "symbol": "string",
                "incomeType": "string",
                "income": "NumberString",
                "asset": "string",
                "info": "string",
                "time": "number",
                "tranId": "NumberString",
                "tradeId": "NumberString"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "", // trade symbol, if existing
                "incomeType": "TRANSFER", // income type
                "income": "-0.37500000", // income amount
                "asset": "USDT", // income asset
                "info": "TRANSFER", // extra information
                "time": 1570608000000,
                "tranId": "9689322392", // transaction id
                "tradeId": "" // trade id, if existing
              },
              {
                "symbol": "BTCUSDT",
                "incomeType": "COMMISSION",
                "income": "-0.01000000",
                "asset": "USDT",
                "info": "COMMISSION",
                "time": 1570636800000,
                "tranId": "9689322392",
                "tradeId": "2059192"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.get-um-income-history-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#get-um-income-history-user_data",
      "name": "Get UM Income History (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/cm/income",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/cm/income",
      "hmacSHA256": true,
      "weights": {
        "IP": 30,
        "IP_text": "30"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "incomeType": {
          "name": "incomeType",
          "type": "string",
          "required": false,
          "description": "\"TRANSFER\",\"WELCOME_BONUS\", \"FUNDING_FEE\", \"REALIZED_PNL\", \"COMMISSION\", \"INSURANCE_CLEAR\", and \"DELIVERED_SETTELMENT\""
        },
        "startTime": {
          "name": "startTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get funding from INCLUSIVE."
        },
        "endTime": {
          "name": "endTime",
          "type": "LONG",
          "required": false,
          "description": "Timestamp in ms to get funding until INCLUSIVE."
        },
        "limit": {
          "name": "limit",
          "type": "INT",
          "required": false,
          "description": "Default 100; max 1000"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "incomeType": {
              "name": "incomeType",
              "type": "string",
              "required": false,
              "description": "\"TRANSFER\",\"WELCOME_BONUS\", \"FUNDING_FEE\", \"REALIZED_PNL\", \"COMMISSION\", \"INSURANCE_CLEAR\", and \"DELIVERED_SETTELMENT\""
            },
            "startTime": {
              "name": "startTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get funding from INCLUSIVE."
            },
            "endTime": {
              "name": "endTime",
              "type": "LONG",
              "required": false,
              "description": "Timestamp in ms to get funding until INCLUSIVE."
            },
            "limit": {
              "name": "limit",
              "type": "INT",
              "required": false,
              "description": "Default 100; max 1000"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string", // trade symbol, if existing
                "incomeType": "string", // income type
                "income": "NumberString", // income amount
                "asset": "string", // income asset
                "info": "string", // extra information
                "time": "number",
                "tranId": "NumberString", // transaction id
                "tradeId": "string" // trade id, if existing
              },
              {
                "symbol": "string",
                "incomeType": "string",
                "income": "NumberString",
                "asset": "string",
                "info": "string",
                "time": "number",
                "tranId": "NumberString",
                "tradeId": "NumberString"
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "", // trade symbol, if existing
                "incomeType": "TRANSFER", // income type
                "income": "-0.37500000", // income amount
                "asset": "BTC", // income asset
                "info": "WITHDRAW", // extra information
                "time": 1570608000000,
                "tranId": "9689322392", // transaction id
                "tradeId": "" // trade id, if existing
              },
              {
                "symbol": "BTCUSD_200925",
                "incomeType": "COMMISSION",
                "income": "-0.01000000",
                "asset": "BTC",
                "info": "",
                "time": 1570636800000,
                "tranId": "9689322392",
                "tradeId": "2059192"
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.get-cm-income-history-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#get-cm-income-history-user_data",
      "name": "Get CM Income History(USER_DATA)"
    },
    {
      "description": "Get current UM account asset and position information.",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/um/account",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/account",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "tradeGroupId": "number",
              "assets": [
                {
                  "asset": "string", // asset name
                  "crossWalletBalance": "NumberString", // wallet balance
                  "crossUnPnl": "NumberString", // unrealized profit
                  "maintMargin": "NumberString", // maintenance margin required
                  "initialMargin": "NumberString", // total initial margin required with current mark price
                  "positionInitialMargin": "NumberString", //initial margin required for positions with current mark price
                  "openOrderInitialMargin": "NumberString", // initial margin required for open orders with current mark price
                  "updateTime": "number" // last update time
                }
              ],
              "positions": [ // positions of all symbols in the market are returned
                // only "BOTH" positions will be returned with One-way mode
                // only "LONG" and "SHORT" positions will be returned with Hedge mode
                {
                  "symbol": "string", // symbol name
                  "initialMargin": "NumberString", // initial margin required with current mark price
                  "maintMargin": "NumberString", // maintenance margin required
                  "unrealizedProfit": "NumberString", // unrealized profit
                  "positionInitialMargin": "NumberString", // initial margin required for positions with current mark price
                  "openOrderInitialMargin": "NumberString", // initial margin required for open orders with current mark price
                  "leverage": "NumberString", // current initial leverage
                  "entryPrice": "NumberString", // average entry price
                  "maxNotional": "NumberString", // maximum available notional with current leverage
                  "bidNotional": "NumberString", // bids notional, ignore
                  "askNotional": "NumberString", // ask notional, ignore
                  "positionSide": "PositionSide", // position side
                  "positionAmt": "NumberString", // position amount
                  "updateTime": "number", // last update time
                  "breakEvenPrice": "NumberString"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "tradeGroupId": -1,
              "assets": [
                {
                  "asset": "USDT", // asset name
                  "crossWalletBalance": "23.72469206", // wallet balance
                  "crossUnPnl": "0.00000000", // unrealized profit
                  "maintMargin": "0.00000000", // maintenance margin required
                  "initialMargin": "0.00000000", // total initial margin required with current mark price
                  "positionInitialMargin": "0.00000000", //initial margin required for positions with current mark price
                  "openOrderInitialMargin": "0.00000000", // initial margin required for open orders with current mark price
                  "updateTime": 1625474304765 // last update time
                }
              ],
              "positions": [ // positions of all symbols in the market are returned
                // only "BOTH" positions will be returned with One-way mode
                // only "LONG" and "SHORT" positions will be returned with Hedge mode
                {
                  "symbol": "BTCUSDT", // symbol name
                  "initialMargin": "0", // initial margin required with current mark price
                  "maintMargin": "0", // maintenance margin required
                  "unrealizedProfit": "0.00000000", // unrealized profit
                  "positionInitialMargin": "0", // initial margin required for positions with current mark price
                  "openOrderInitialMargin": "0", // initial margin required for open orders with current mark price
                  "leverage": "100", // current initial leverage
                  "entryPrice": "0.00000", // average entry price
                  "maxNotional": "250000", // maximum available notional with current leverage
                  "bidNotional": "0", // bids notional, ignore
                  "askNotional": "0", // ask notional, ignore
                  "positionSide": "BOTH", // position side
                  "positionAmt": "0", // position amount
                  "updateTime": 0, // last update time
                  "breakEvenPrice": "0.0"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.get-um-account-detail-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#get-um-account-detail-user_data",
      "name": "Get UM Account Detail (USER_DATA)"
    },
    {
      "description": "Get current CM account asset and position information.",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/cm/account",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/cm/account",
      "hmacSHA256": true,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "assets": [
                {
                  "asset": "string", // asset name
                  "crossWalletBalance": "NumberString", // total wallet balance
                  "crossUnPnl": "NumberString", // unrealized profit or loss
                  "maintMargin": "NumberString", // maintenance margin
                  "initialMargin": "NumberString", // total intial margin required with the latest mark price
                  "positionInitialMargin": "NumberString", // positions" margin required with the latest mark price
                  "openOrderInitialMargin": "NumberString", // open orders" intial margin required with the latest mark price
                  "updateTime": "number" // last update time
                }
              ],
              "positions": [
                {
                  "symbol": "string",
                  "positionAmt": "NumberString", // position amount
                  "initialMargin": "NumberString",
                  "maintMargin": "NumberString",
                  "unrealizedProfit": "NumberString",
                  "positionInitialMargin": "NumberString",
                  "openOrderInitialMargin": "NumberString",
                  "leverage": "NumberString",
                  "positionSide": "PositionSide", // BOTH means that it is the position of One-way Mode
                  "entryPrice": "NumberString",
                  "maxQty": "NumberString", // maximum quantity of base asset
                  "updateTime": "number",
                  "breakEvenPrice": "NumberString"
                }
              ]
            }
          ],
          "responseExamples": [
            {
              "assets": [
                {
                  "asset": "BTC", // asset name
                  "crossWalletBalance": "0.00241969", // total wallet balance
                  "crossUnPnl": "0.00000000", // unrealized profit or loss
                  "maintMargin": "0.00000000", // maintenance margin
                  "initialMargin": "0.00000000", // total intial margin required with the latest mark price
                  "positionInitialMargin": "0.00000000", // positions" margin required with the latest mark price
                  "openOrderInitialMargin": "0.00000000", // open orders" intial margin required with the latest mark price
                  "updateTime": 1625474304765 // last update time
                }
              ],
              "positions": [
                {
                  "symbol": "BTCUSD_201225",
                  "positionAmt": "0", // position amount
                  "initialMargin": "0",
                  "maintMargin": "0",
                  "unrealizedProfit": "0.00000000",
                  "positionInitialMargin": "0",
                  "openOrderInitialMargin": "0",
                  "leverage": "125",
                  "positionSide": "BOTH", // BOTH means that it is the position of One-way Mode
                  "entryPrice": "0.0",
                  "maxQty": "50", // maximum quantity of base asset
                  "updateTime": 0,
                  "breakEvenPrice": "0.0"
                }
              ]
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.get-cm-account-detail-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#get-cm-account-detail-user_data",
      "name": "Get CM Account Detail (USER_DATA)"
    },
    {
      "description": "Change Auto-repay-futures Status",
      "securityType": "TRADE",
      "request": "POST /papi/v1/repay-futures-switch",
      "requestMethod": "POST",
      "requestEndPoint": "/papi/v1/repay-futures-switch",
      "hmacSHA256": true,
      "weights": {
        "IP": 750,
        "IP_text": "750"
      },
      "baseParams": {
        "autoRepay": {
          "name": "autoRepay",
          "type": "string",
          "required": true,
          "description": "Default: true; false for turn off the auto-repay futures negative balance function"
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "autoRepay": {
              "name": "autoRepay",
              "type": "string",
              "required": true,
              "description": "Default: true; false for turn off the auto-repay futures negative balance function"
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "msg": "success"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.change-auto-repay-futures-status-trade",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#change-auto-repay-futures-status-trade",
      "name": "Change Auto-repay-futures Status (TRADE)"
    },
    {
      "description": "Query Auto-repay-futures Status",
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/repay-futures-switch",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/repay-futures-switch",
      "hmacSHA256": true,
      "weights": {
        "IP": 30,
        "IP_text": "30"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "autoRepay": "boolean" //  "true" for turn on the auto-repay futures; "false" for turn off the auto-repay futures
            }
          ],
          "responseExamples": [
            {
              "autoRepay": true //  "true" for turn on the auto-repay futures; "false" for turn off the auto-repay futures
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.get-auto-repay-futures-status-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#get-auto-repay-futures-status-user_data",
      "name": "Get Auto-repay-futures Status (USER_DATA)"
    },
    {
      "description": "Repay futures Negative Balance",
      "securityType": "USER_DATA",
      "request": "POST /papi/v1/repay-futures-negative-balance",
      "requestMethod": "POST",
      "requestEndPoint": "/papi/v1/repay-futures-negative-balance",
      "hmacSHA256": true,
      "weights": {
        "IP": 750,
        "IP_text": "750"
      },
      "baseParams": {
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "msg": "string"
            }
          ],
          "responseExamples": [
            {
              "msg": "success"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.repay-futures-negative-balance-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#repay-futures-negative-balance-user_data",
      "name": "Repay futures Negative Balance (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/um/adlQuantile",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/um/adlQuantile",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "adlQuantile": {
                  // if the positions of the symbol are crossed margined in Hedge Mode, "LONG" and "SHORT" will be returned a same quantile value, and "HEDGE" will be returned instead of "BOTH".
                  "LONG": "number",
                  "SHORT": "number",
                  "HEDGE": "number" // only a sign, ignore the value
                }
              },
              {
                "symbol": "string",
                "adlQuantile": {
                  // for positions of the symbol are in One-way Mode or isolated margined in Hedge Mode
                  "LONG": "number", // adl quantile for "LONG" position in hedge mode
                  "SHORT": "number", // adl qauntile for "SHORT" position in hedge mode
                  "BOTH": "number" // adl qunatile for position in one-way mode
                }
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "ETHUSDT",
                "adlQuantile": {
                  // if the positions of the symbol are crossed margined in Hedge Mode, "LONG" and "SHORT" will be returned a same quantile value, and "HEDGE" will be returned instead of "BOTH".
                  "LONG": 3,
                  "SHORT": 3,
                  "HEDGE": 0 // only a sign, ignore the value
                }
              },
              {
                "symbol": "BTCUSDT",
                "adlQuantile": {
                  // for positions of the symbol are in One-way Mode or isolated margined in Hedge Mode
                  "LONG": 1, // adl quantile for "LONG" position in hedge mode
                  "SHORT": 2, // adl qauntile for "SHORT" position in hedge mode
                  "BOTH": 0 // adl qunatile for position in one-way mode
                }
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.um-position-adl-quantile-estimation-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#um-position-adl-quantile-estimation-user_data",
      "name": "UM Position ADL Quantile Estimation (USER_DATA)"
    },
    {
      "securityType": "USER_DATA",
      "request": "GET /papi/v1/cm/adlQuantile",
      "requestMethod": "GET",
      "requestEndPoint": "/papi/v1/cm/adlQuantile",
      "hmacSHA256": false,
      "weights": {
        "IP": 5,
        "IP_text": "5"
      },
      "baseParams": {
        "symbol": {
          "name": "symbol",
          "type": "string",
          "required": false,
          "description": ""
        },
        "recvWindow": {
          "name": "recvWindow",
          "type": "LONG",
          "required": false,
          "description": ""
        },
        "timestamp": {
          "name": "timestamp",
          "type": "LONG",
          "required": true,
          "description": ""
        }
      },
      "overloads": [
        {
          "params": {
            "symbol": {
              "name": "symbol",
              "type": "string",
              "required": false,
              "description": ""
            },
            "recvWindow": {
              "name": "recvWindow",
              "type": "LONG",
              "required": false,
              "description": ""
            },
            "timestamp": {
              "name": "timestamp",
              "type": "LONG",
              "required": true,
              "description": ""
            }
          },
          "responseNames": [
            ""
          ],
          "responseTypes": [
            [
              {
                "symbol": "string",
                "adlQuantile": {
                  // if the positions of the symbol are crossed margined in Hedge Mode, "LONG" and "SHORT" will be returned a same quantile value, and "HEDGE" will be returned instead of "BOTH".
                  "LONG": "number",
                  "SHORT": "number",
                  "HEDGE": "number" // only a sign, ignore the value
                }
              },
              {
                "symbol": "string",
                "adlQuantile": {
                  // for positions of the symbol are in One-way Mode
                  "LONG": "number", // adl quantile for "LONG" position in hedge mode
                  "SHORT": "number", // adl qauntile for "SHORT" position in hedge mode
                  "BOTH": "number" // adl qunatile for position in one-way mode
                }
              }
            ]
          ],
          "responseExamples": [
            [
              {
                "symbol": "BTCUSD_200925",
                "adlQuantile": {
                  // if the positions of the symbol are crossed margined in Hedge Mode, "LONG" and "SHORT" will be returned a same quantile value, and "HEDGE" will be returned instead of "BOTH".
                  "LONG": 3,
                  "SHORT": 3,
                  "HEDGE": 0 // only a sign, ignore the value
                }
              },
              {
                "symbol": "BTCUSD_201225",
                "adlQuantile": {
                  // for positions of the symbol are in One-way Mode
                  "LONG": 1, // adl quantile for "LONG" position in hedge mode
                  "SHORT": 2, // adl qauntile for "SHORT" position in hedge mode
                  "BOTH": 0 // adl qunatile for position in one-way mode
                }
              }
            ]
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "Account",
      "path": "toc.account.cm-position-adl-quantile-estimation-user_data",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#cm-position-adl-quantile-estimation-user_data",
      "name": "CM Position ADL Quantile Estimation (USER_DATA)"
    },
    {
      "securityType": "USER_STREAM",
      "request": "POST /papi/v1/listenKey",
      "requestMethod": "POST",
      "requestEndPoint": "/papi/v1/listenKey",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {
              "listenKey": "string"
            }
          ],
          "responseExamples": [
            {
              "listenKey": "pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1"
            }
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "User Data Streams",
      "path": "toc.user-data-streams.start-user-data-stream-user_stream",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#start-user-data-stream-user_stream",
      "name": "Start User Data Stream (USER_STREAM)"
    },
    {
      "description": "Keepalive a user data stream to prevent a time out. User data streams will close after 60 minutes. It's recommended to send a ping about every 60 minutes.",
      "securityType": "USER_STREAM",
      "request": "PUT /papi/v1/listenKey",
      "requestMethod": "PUT",
      "requestEndPoint": "/papi/v1/listenKey",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "User Data Streams",
      "path": "toc.user-data-streams.keepalive-user-data-stream-user_stream",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#keepalive-user-data-stream-user_stream",
      "name": "Keepalive User Data Stream (USER_STREAM)"
    },
    {
      "description": "Close out a user data stream.",
      "securityType": "USER_STREAM",
      "request": "DELETE /papi/v1/listenKey",
      "requestMethod": "DELETE",
      "requestEndPoint": "/papi/v1/listenKey",
      "hmacSHA256": false,
      "weights": {
        "IP": 1,
        "IP_text": "1"
      },
      "baseParams": {},
      "overloads": [
        {
          "params": {},
          "responseNames": [
            ""
          ],
          "responseTypes": [
            {}
          ],
          "responseExamples": [
            {}
          ],
          "name": "",
          "isMinor": false
        }
      ],
      "parentName": "User Data Streams",
      "path": "toc.user-data-streams.close-user-data-stream-user_stream",
      "apiType": "portfolio",
      "ref": "https://binance-docs.github.io/apidocs/pm/en#close-user-data-stream-user_stream",
      "name": "Close User Data Stream (USER_STREAM)"
    }
  ]
}